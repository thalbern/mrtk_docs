{
  "api/_u_uxt_bounding_box_manipulator_component.html": {
    "href": "api/_u_uxt_bounding_box_manipulator_component.html",
    "title": "Class UUxtBoundingBoxManipulatorComponent | UXT Documentation",
    "keywords": "Class UUxtBoundingBoxManipulatorComponent Manages a set of affordances that can be manipulated for changing the actor transform. Inheritance System::Object UActorComponent UUxtBoundingBoxManipulatorComponent Namespace : Assembly : .dll Syntax public: class UUxtBoundingBoxManipulatorComponent Constructors View Source UUxtBoundingBoxManipulatorComponent() Declaration public: UUxtBoundingBoxManipulatorComponent() Methods View Source BeginPlay() Declaration protected: virtual void BeginPlay() override View Source ComputeBoundsFromComponents() Compute the bounding box based on the components of the bounding box actor. Declaration public: void ComputeBoundsFromComponents() View Source ComputeModifiedBounds(const FUxtBoundingBoxAffordanceInfo &Affordance, const FUxtGrabPointerData &GrabPointer, FBox &OutBounds, FQuat &OutDeltaRotation) Compute new bounding box and rotation based on the currently active grab pointers. Declaration protected: void ComputeModifiedBounds(const FUxtBoundingBoxAffordanceInfo &Affordance, const FUxtGrabPointerData &GrabPointer, FBox &OutBounds, FQuat &OutDeltaRotation) const Parameters Type Name Description const FUxtBoundingBoxAffordanceInfo & Affordance const FUxtGrabPointerData & GrabPointer FBox & OutBounds FQuat & OutDeltaRotation View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason View Source FindGrabPointer(const FUxtBoundingBoxAffordanceInfo &Affordance) Look up the grab pointer data for an affordance. Returns null if the affordance is not currently grabbed. Declaration protected: FUxtGrabPointerData * FindGrabPointer(const FUxtBoundingBoxAffordanceInfo &Affordance) Parameters Type Name Description const FUxtBoundingBoxAffordanceInfo & Affordance Returns Type Description FUxtGrabPointerData * View Source GetAffordanceKindActorClass(EUxtBoundingBoxAffordanceKind Kind) Actor class that will be instantiated for the given kind of affordance. Declaration public: TSubclassOf<class AActor> GetAffordanceKindActorClass(EUxtBoundingBoxAffordanceKind Kind) const Parameters Type Name Description EUxtBoundingBoxAffordanceKind Kind Returns Type Description TSubclassOf<class AActor> View Source GetBounds() Declaration public: const FBox & GetBounds() const Returns Type Description const FBox & View Source GetCenterAffordanceClass() Declaration public: TSubclassOf<class AActor> GetCenterAffordanceClass() const Returns Type Description TSubclassOf<class AActor> View Source GetCornerAffordanceClass() Declaration public: TSubclassOf<class AActor> GetCornerAffordanceClass() const Returns Type Description TSubclassOf<class AActor> View Source GetCustomAffordances() Declaration public: const TArray<FUxtBoundingBoxAffordanceInfo> & GetCustomAffordances() const Returns Type Description const TArray< FUxtBoundingBoxAffordanceInfo > & View Source GetEdgeAffordanceClass() Declaration public: TSubclassOf<class AActor> GetEdgeAffordanceClass() const Returns Type Description TSubclassOf<class AActor> View Source GetFaceAffordanceClass() Declaration public: TSubclassOf<class AActor> GetFaceAffordanceClass() const Returns Type Description TSubclassOf<class AActor> View Source GetInitBoundsFromActor() Declaration public: bool GetInitBoundsFromActor() const Returns Type Description bool View Source GetPreset() Declaration public: EUxtBoundingBoxManipulatorPreset GetPreset() const Returns Type Description EUxtBoundingBoxManipulatorPreset View Source GetRelativeBoxTransform(const FBox &Box, const FBox &RelativeTo, FTransform &OutTransform) Compute the relative translation and scale between two boxes. Returns false if relative scale can not be computed. Declaration protected: static bool GetRelativeBoxTransform(const FBox &Box, const FBox &RelativeTo, FTransform &OutTransform) Parameters Type Name Description const FBox & Box const FBox & RelativeTo FTransform & OutTransform Returns Type Description bool View Source GetUsedAffordances() Get the list of affordances that will be used for the bounding box. This can be a based on a preset or a custom set of affordances. Declaration public: const TArray<FUxtBoundingBoxAffordanceInfo> & GetUsedAffordances() const Returns Type Description const TArray< FUxtBoundingBoxAffordanceInfo > & View Source OnPointerBeginGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being grabbed. Declaration protected: void OnPointerBeginGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer View Source OnPointerEndGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being released. Declaration protected: void OnPointerEndGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer View Source OnPointerUpdateGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being grabbed. Declaration protected: void OnPointerUpdateGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction View Source TryActivateGrabPointer(const FUxtBoundingBoxAffordanceInfo &Affordance, const FUxtGrabPointerData &GrabPointer) Try to activate the given grab pointer on the bounding box. Returns true when the grab activation was successful and the pointer will update the bounding box. Declaration protected: bool TryActivateGrabPointer(const FUxtBoundingBoxAffordanceInfo &Affordance, const FUxtGrabPointerData &GrabPointer) Parameters Type Name Description const FUxtBoundingBoxAffordanceInfo & Affordance const FUxtGrabPointerData & GrabPointer Returns Type Description bool View Source TryReleaseGrabPointer(const FUxtBoundingBoxAffordanceInfo &Affordance) Release the grab pointer. Returns true if the pointer was grabbing and has been released. Declaration protected: bool TryReleaseGrabPointer(const FUxtBoundingBoxAffordanceInfo &Affordance) Parameters Type Name Description const FUxtBoundingBoxAffordanceInfo & Affordance Returns Type Description bool View Source UpdateAffordanceTransforms() Update the world transforms of affordance actors to match the current bounding box. Declaration protected: void UpdateAffordanceTransforms() View Source UseCustomAffordances() Declaration public: bool UseCustomAffordances() const Returns Type Description bool"
  },
  "api/_u_uxt_manipulator_component_base.html": {
    "href": "api/_u_uxt_manipulator_component_base.html",
    "title": "Class UUxtManipulatorComponentBase | UXT Documentation",
    "keywords": "Class UUxtManipulatorComponentBase Base class for manipulation components that react to pointer interactions. This class does not modify the actor as-is. Implementations should use the provided functions to compute a target transform from grabbing pointers and call the ApplyTargetTransform method to actually modify the actor. Inheritance System::Object USceneComponent UUxtGrabTargetComponent UUxtManipulatorComponentBase Inherited Members UUxtGrabTargetComponent::FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) UUxtGrabTargetComponent::GetGrabPointCentroid(const FTransform &Transform) UUxtGrabTargetComponent::GetGrabPointers() UUxtGrabTargetComponent::GetPointersTransformCentroid() UUxtGrabTargetComponent::GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) UUxtGrabTargetComponent::GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) UUxtGrabTargetComponent::GetTargetCentroid() UUxtGrabTargetComponent::GetTickOnlyWhileGrabbed() IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) IUxtGrabTarget::IsGrabFocusable(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::OnBeginGrab IUxtGrabTarget::OnBeginGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEndGrab IUxtGrabTarget::OnEndGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnExitGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnFarDragged(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarPressed(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarReleased(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrab IUxtGrabTarget::OnUpdateGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) IUxtGrabTarget::OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::SetTickOnlyWhileGrabbed(bool bEnable) UUxtGrabTargetComponent::UUxtGrabTargetComponent() Namespace : Assembly : .dll Syntax public: class UUxtManipulatorComponentBase : public xtGrabTargetComponent Constructors View Source ~UUxtManipulatorComponentBase() Declaration public: ~UUxtManipulatorComponentBase() View Source UUxtManipulatorComponentBase() Declaration public: UUxtManipulatorComponentBase() Fields View Source bAutoSetInitialTransform If true the initial transform will be set automatically when the component is grabbed. Declaration public: bool bAutoSetInitialTransform= true Field Value Type Description bool View Source InitialCameraSpaceTransform Declaration public: FTransform InitialCameraSpaceTransform Field Value Type Description FTransform View Source InitialTransform Declaration public: FTransform InitialTransform Field Value Type Description FTransform View Source MoveLogic Declaration protected: UxtManipulationMoveLogic * MoveLogic Field Value Type Description UxtManipulationMoveLogic * View Source TwoHandRotateLogic Declaration protected: UxtTwoHandManipulationRotateLogic * TwoHandRotateLogic Field Value Type Description UxtTwoHandManipulationRotateLogic * Methods View Source ApplyTargetTransform(const FTransform &TargetTransform) Apply the transform to the actor root scene component. Relative transform between the manipulator component and the root scene component is preserved. Declaration public: void ApplyTargetTransform(const FTransform &TargetTransform) Parameters Type Name Description const FTransform & TargetTransform View Source BeginPlay() Declaration protected: virtual void BeginPlay() override Overrides UUxtGrabTargetComponent::BeginPlay() View Source MoveToTargets(const FTransform &SourceTransform, FTransform &TargetTransform, bool UsePointerRotation) Translate the source transform such that grab points match targets. If more than one pointer is used then the centroid of the grab points and targets is used. Declaration public: void MoveToTargets(const FTransform &SourceTransform, FTransform &TargetTransform, bool UsePointerRotation) const Parameters Type Name Description const FTransform & SourceTransform FTransform & TargetTransform bool UsePointerRotation View Source RotateAboutAxis(const FTransform &SourceTransform, const FVector &Pivot, const FVector &Axis, FTransform &TargetTransform) Rotates the source transform around the pivot point on the given axis such that the pointers line up with current targets. If more than one pointer is used then the resulting rotation will minimize the mean square of target distances. Declaration public: void RotateAboutAxis(const FTransform &SourceTransform, const FVector &Pivot, const FVector &Axis, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform const FVector & Pivot const FVector & Axis FTransform & TargetTransform View Source RotateAroundPivot(const FTransform &SourceTransform, const FVector &Pivot, FTransform &TargetTransform) Rotates the source transform around the pivot point such that the pointers line up with current targets. If more than one pointer is used then the resulting rotation will minimize the mean square of target distances. Declaration public: void RotateAroundPivot(const FTransform &SourceTransform, const FVector &Pivot, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform const FVector & Pivot FTransform & TargetTransform View Source SetInitialTransform() Cache the initial world space and camera space transform. Manipulation should be based on these initial transform for stable results. If bAutoSetInitialTransform is true then the initial transform is updated when grabbed. Declaration public: void SetInitialTransform() View Source SmoothTransform(const FTransform &SourceTransform, float LocationSmoothing, float RotationSmoothing, float DeltaSeconds, FTransform &TargetTransform) Apply a low-pass filter to the source transform location and rotation to smooth out jittering. Target transform is a exponentially weighted average of the current component transform and the source transform based on the time step. Declaration public: void SmoothTransform(const FTransform &SourceTransform, float LocationSmoothing, float RotationSmoothing, float DeltaSeconds, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform float LocationSmoothing float RotationSmoothing float DeltaSeconds FTransform & TargetTransform"
  },
  "api/_u_uxt_far_pointer_component.html": {
    "href": "api/_u_uxt_far_pointer_component.html",
    "title": "Class UUxtFarPointerComponent | UXT Documentation",
    "keywords": "Class UUxtFarPointerComponent Component that casts a ray for the given hand-tracked hand and raises far interaction events on the far targets hit. A far target is an actor or component implementing the UUxtFarTarget interface. Inheritance System::Object UActorComponent UUxtFarPointerComponent Namespace : Assembly : .dll Syntax public: class UUxtFarPointerComponent Constructors View Source UUxtFarPointerComponent() Declaration public: UUxtFarPointerComponent() Fields View Source Hand Hand-tracked hand the pointer will use for targeting. Declaration public: EControllerHand Hand Field Value Type Description EControllerHand View Source OnFarPointerDisabled Declaration public: FUxtFarPointerDisabledDelegate OnFarPointerDisabled Field Value Type Description FUxtFarPointerDisabledDelegate View Source OnFarPointerEnabled Declaration public: FUxtFarPointerEnabledDelegate OnFarPointerEnabled Field Value Type Description FUxtFarPointerEnabledDelegate View Source RayLength Pointer ray length from ray start. Declaration public: float RayLength= 500 Field Value Type Description float View Source RayStartOffset Start of the pointer ray expressed as an offset from the hand ray origin in the ray direction. Declaration public: float RayStartOffset= 5 Field Value Type Description float View Source TraceChannel Trace channel to be used in the pointer's line trace query. Declaration public: TEnumAsByte<ECollisionChannel> TraceChannel= ECollisionChannel::ECC_Visibility Field Value Type Description TEnumAsByte<ECollisionChannel> Methods View Source GetFocusLocked() Whether the pointer is currently locked. Declaration public: bool GetFocusLocked() const Returns Type Description bool View Source GetHitNormal() Current hit point normal or negative ray direction if there's no hit. Declaration public: FVector GetHitNormal() const Returns Type Description FVector View Source GetHitPoint() Current hit point location or ray end if there's no hit. Declaration public: FVector GetHitPoint() const Returns Type Description FVector View Source GetHitPrimitive() Primitive the pointer is currently hitting or null if none. Declaration public: UPrimitiveComponent * GetHitPrimitive() const Returns Type Description UPrimitiveComponent * View Source GetPointerOrientation() Orientation of the pointer ray. Declaration public: FQuat GetPointerOrientation() const Returns Type Description FQuat View Source GetPointerOrigin() Origin of the pointer ray as reported by the hand tracker. See GetRayStart() for actual start of the ray used for querying the scene. Declaration public: FVector GetPointerOrigin() const Returns Type Description FVector View Source GetRayStart() Start of the ray used for querying the scene. This is the pointer origin shifted by the ray start offset in the pointer forward direction. Declaration public: FVector GetRayStart() const Returns Type Description FVector View Source IsEnabled() Whether the pointer is currently enabled. Hit information is only valid while the pointer is enabled. Declaration public: bool IsEnabled() const Returns Type Description bool View Source IsPressed() Whether the pointer is currently pressed. Declaration public: bool IsPressed() const Returns Type Description bool View Source SetActive(bool bNewActive, bool bReset=false) Declaration public: virtual void SetActive(bool bNewActive, bool bReset=false) override Parameters Type Name Description bool bNewActive bool bReset View Source SetFocusLocked(bool bNewFocusLocked) Set the pointer's locked state. Locked pointers don't update their hit, remaining focused on the primitive they were hitting until unlocked. Declaration public: void SetFocusLocked(bool bNewFocusLocked) Parameters Type Name Description bool bNewFocusLocked View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_f_uxt_pointer_focus_search_result.html": {
    "href": "api/_f_uxt_pointer_focus_search_result.html",
    "title": "Struct FUxtPointerFocusSearchResult | UXT Documentation",
    "keywords": "Struct FUxtPointerFocusSearchResult Result of closest point search functions. Namespace : Assembly : .dll Syntax public: struct FUxtPointerFocusSearchResult Fields View Source ClosestPointOnTarget Closest point on the primitive to the pointer position. Declaration public: FVector ClosestPointOnTarget Field Value Type Description FVector View Source MinDistance Distance of the closest point to the pointer position. Declaration public: float MinDistance Field Value Type Description float View Source Primitive Primitive that contains the closes point. Declaration public: UPrimitiveComponent * Primitive Field Value Type Description UPrimitiveComponent * View Source Target Closest object that implements the requires pointer target interface. Declaration public: UObject * Target Field Value Type Description UObject * Methods View Source IsValid() Declaration public: bool IsValid() const Returns Type Description bool"
  },
  "api/_u_uxt_finger_cursor_component.html": {
    "href": "api/_u_uxt_finger_cursor_component.html",
    "title": "Class UUxtFingerCursorComponent | UXT Documentation",
    "keywords": "Class UUxtFingerCursorComponent When added to an actor with a near pointer, this component displays a ring cursor oriented towards the current poke target and scaled according to the distance. Inheritance System::Object UUxtRingCursorComponent UUxtFingerCursorComponent Namespace : Assembly : .dll Syntax public: class UUxtFingerCursorComponent Constructors View Source UUxtFingerCursorComponent() Declaration public: UUxtFingerCursorComponent() Fields View Source MaxDistanceToTarget Maximum distance to the pointer target at which the cursor should be displayed. Declaration public: float MaxDistanceToTarget= 20.0f Field Value Type Description float View Source MaxRadius Cursor radius at the maximum distance to the target. Declaration public: float MaxRadius= 0.85f Field Value Type Description float View Source MinRadius Cursor radius when in contact with the target. Declaration public: float MinRadius= 0.15f Field Value Type Description float Methods View Source BeginPlay() Declaration protected: virtual void BeginPlay() override View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_follow_component.html": {
    "href": "api/_u_uxt_follow_component.html",
    "title": "Class UUxtFollowComponent | UXT Documentation",
    "keywords": "Class UUxtFollowComponent The follow component has three different constraints that keeps its owner in front of the camera: Angular Clamp, Distance Clamp, and Orientation. The combination of Angular and Distance Clamp creates a frustum in front of the camera where its owner can be. If its owner is outside that frustum it is adjusted. Angular Clamp: The objective of this constraint is to ensure that the reference forward vector remains within the bounds set by the leashing parameters. To do this, determine the angles between toTarget and the leashing bounds about the global Z-axis and the reference's Y-axis. If the toTarget falls within the leashing bounds, then we don't have to modify it. Otherwise, we apply a correction rotation to bring it within bounds. This will ensure that the its owner stays within the top, bottom, right and left planes of the frustum. Distance Clamp: The objective of this constraint is to ensure that the following actor stays within bounds set by the distance parameters. To do this, we measure the current distance from the camera to the its owner. If the distance is within the MinimumDistance and MaximumDistance then we don't have to modify it. Otherwise, we push away or pull in the its owner along the reference forward vector. This will ensure that the its owner stays within the near and far planes of the frustum. Orientation: The two options provided are constant FaceCamera or WorldLock. While world locked there are three conditions that will cause the its owner to face the camera: Angular Clamps Distance Clamps The angle between the forward vector of the its owner and toTarget vector (vector between the camera and the its owner) is larger than dead zone angle parameter Inheritance System::Object UActorComponent UUxtFollowComponent Namespace : Assembly : .dll Syntax public: class UUxtFollowComponent Constructors View Source UUxtFollowComponent() Declaration public: UUxtFollowComponent() Fields View Source ActorToFollow Actor that this component will follow. If null, this component will follow the camera Declaration public: AActor * ActorToFollow Field Value Type Description AActor * View Source bIgnoreAngleClamp Option to ignore angle clamping Declaration public: bool bIgnoreAngleClamp= false Field Value Type Description bool View Source bIgnoreCameraPitchAndRoll Option to ignore the pitch and roll of the camera Declaration public: bool bIgnoreCameraPitchAndRoll= false Field Value Type Description bool View Source bIgnoreDistanceClamp Option to ignore distance clamping Declaration public: bool bIgnoreDistanceClamp= false Field Value Type Description bool View Source bInterpolatePose Option to ignore interpolation between follow poses Declaration public: bool bInterpolatePose= true Field Value Type Description bool View Source DefaultDistance Default distance from eye to position its owner around, i.e. the sphere radius Declaration public: float DefaultDistance= 75.0f Field Value Type Description float View Source MaximumDistance Max distance from eye to its owner Declaration public: float MaximumDistance= 100.0f Field Value Type Description float View Source MaxViewHorizontalDegrees The horizontal angle from the camera forward axis to the owner will not exceed this value Declaration public: float MaxViewHorizontalDegrees= 30.0f Field Value Type Description float View Source MaxViewVerticalDegrees The vertical angle from the camera forward axis to the owner will not exceed this value Declaration public: float MaxViewVerticalDegrees= 30.0f Field Value Type Description float View Source MinimumDistance Min distance from eye to position its owner around, i.e. the sphere radius Declaration public: float MinimumDistance= 50.0f Field Value Type Description float View Source MoveToDefaultDistanceLerpTime Rate at which its owner will move toward default distance when angular leashing Declaration public: float MoveToDefaultDistanceLerpTime= 10.0f Field Value Type Description float View Source OrientationType Orientation Type Declaration public: TEnumAsByte<EUxtFollowOrientBehavior> OrientationType= EUxtFollowOrientBehavior::WorldLock Field Value Type Description TEnumAsByte<EUxtFollowOrientBehavior> View Source OrientToCameraDeadzoneDegrees The owner will not reorient until the angle between its forward vector and the vector to the camera is greater than this value Declaration public: float OrientToCameraDeadzoneDegrees= 60.0f Field Value Type Description float View Source PitchOffset Pitch offset from camera (relative to Max Distance) Declaration public: float PitchOffset= 0.0f Field Value Type Description float View Source VerticalMaxDistance Max vertical distance between the owner and camera Declaration public: float VerticalMaxDistance= 0.0f Field Value Type Description float Methods View Source BeginPlay() Declaration protected: virtual void BeginPlay() override View Source Recenter() Force the owner to recenter in the camera's field of view. Declaration public: void Recenter() View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_x_tools.html": {
    "href": "api/_u_x_tools.html",
    "title": "Class UXTools | UXT Documentation",
    "keywords": "Class UXTools Inheritance System::Object ModuleRules UXTools Namespace : Assembly : .dll Syntax public: class UXTools Constructors View Source UXTools(ReadOnlyTargetRules Target) Declaration public: UXTools(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_f_uxt_wmr_hand_tracker.html": {
    "href": "api/_f_uxt_wmr_hand_tracker.html",
    "title": "Class FUxtWmrHandTracker | UXT Documentation",
    "keywords": "Class FUxtWmrHandTracker WMR implementation of the hand tracker interface Inheritance System::Object IModularFeature IUxtHandTracker FUxtWmrHandTracker Inherited Members IUxtHandTracker::GetHandTracker() IUxtHandTracker::GetModularFeatureName() IUxtHandTracker::~IUxtHandTracker() Namespace : Assembly : .dll Syntax public: class FUxtWmrHandTracker : public xtHandTracker Methods View Source GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) const Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool Overrides IUxtHandTracker::GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) View Source GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) const Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool Overrides IUxtHandTracker::GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) View Source GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. Declaration public: virtual bool GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) const Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool Overrides IUxtHandTracker::GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) View Source GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) const Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool Overrides IUxtHandTracker::GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition)"
  },
  "api/_f_uxt_runtime_settings_button_set.html": {
    "href": "api/_f_uxt_runtime_settings_button_set.html",
    "title": "Struct FUxtRuntimeSettingsButtonSet | UXT Documentation",
    "keywords": "Struct FUxtRuntimeSettingsButtonSet Namespace : Assembly : .dll Syntax public: struct FUxtRuntimeSettingsButtonSet Fields View Source Buttons Declaration public: TSet<EHMDInputControllerButtons> Buttons Field Value Type Description TSet<EHMDInputControllerButtons>"
  },
  "api/_u_x_tools_w_m_r.html": {
    "href": "api/_u_x_tools_w_m_r.html",
    "title": "Class UXToolsWMR | UXT Documentation",
    "keywords": "Class UXToolsWMR Inheritance System::Object ModuleRules UXToolsWMR Namespace : Assembly : .dll Syntax public: class UXToolsWMR Constructors View Source UXToolsWMR(ReadOnlyTargetRules Target) Declaration public: UXToolsWMR(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_uxt_hand_tracking_function_library.html": {
    "href": "api/_u_uxt_hand_tracking_function_library.html",
    "title": "Class UUxtHandTrackingFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtHandTrackingFunctionLibrary Library of hand tracking functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtHandTrackingFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtHandTrackingFunctionLibrary Methods View Source GetHandJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not currently tracked, in which case the values of the output parameters are unchanged. Declaration public: static bool GetHandJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool View Source GetHandPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: static bool GetHandPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool View Source GetIsHandGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbed state. Returns false if the hand is not currently tracked, in which case the value of the output parameter is unchanged. Declaration public: static bool GetIsHandGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool View Source GetIsHandSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not currently tracked, in which case the value of the output parameter is unchanged. Declaration public: static bool GetIsHandSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool View Source IsHandTracked(EControllerHand Hand) Returns whether the given hand is tracked. Declaration public: static bool IsHandTracked(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand Returns Type Description bool"
  },
  "api/_i_uxt_far_target.html": {
    "href": "api/_i_uxt_far_target.html",
    "title": "Class IUxtFarTarget | UXT Documentation",
    "keywords": "Class IUxtFarTarget Interface to be implemented by components to handle far interactions. Inheritance System::Object IUxtFarTarget Namespace : Assembly : .dll Syntax public: class IUxtFarTarget Methods View Source IsFarFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsFarFocusable(const UPrimitiveComponent *Primitive) Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool View Source OnEnterFarFocus(UUxtFarPointerComponent *Pointer) Raised when a far pointer starts focusing a primitive. Declaration public: void OnEnterFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnExitFarFocus(UUxtFarPointerComponent *Pointer) Raised when a far pointer stops focusing a primitive. Declaration public: void OnExitFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnFarDragged(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is dragged. Declaration public: void OnFarDragged(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnFarPressed(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is pressed. Declaration public: void OnFarPressed(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnFarReleased(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is released. Declaration public: void OnFarReleased(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is updated. Declaration public: void OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer"
  },
  "api/_f_uxt_pressable_button_component_visualizer.html": {
    "href": "api/_f_uxt_pressable_button_component_visualizer.html",
    "title": "Class FUxtPressableButtonComponentVisualizer | UXT Documentation",
    "keywords": "Class FUxtPressableButtonComponentVisualizer Inheritance System::Object FComponentVisualizer FUxtPressableButtonComponentVisualizer Namespace : Assembly : .dll Syntax public: class FUxtPressableButtonComponentVisualizer"
  },
  "api/_i_uxt_hand_tracker.html": {
    "href": "api/_i_uxt_hand_tracker.html",
    "title": "Class IUxtHandTracker | UXT Documentation",
    "keywords": "Class IUxtHandTracker Hand tracker device interface. We assume that implementations poll and cache the hand tracking state at the beginning of the frame. This allows us to assume that if a hand is reported as tracked it will remain so for the remainder of the frame, simplifying client logic. Inheritance System::Object IModularFeature IUxtHandTracker Namespace : Assembly : .dll Syntax public: class IUxtHandTracker Constructors View Source ~IUxtHandTracker() Declaration public: virtual ~IUxtHandTracker() Methods View Source GetHandTracker() Returns the currently registered hand tracker or nullptr if none Declaration public: static IUxtHandTracker * GetHandTracker() Returns Type Description IUxtHandTracker * View Source GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) const =0 Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool View Source GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) const =0 Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool View Source GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. Declaration public: virtual bool GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) const =0 Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool View Source GetModularFeatureName() Declaration public: static FName GetModularFeatureName() Returns Type Description FName View Source GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) const =0 Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool"
  },
  "api/_f_u_x_tools_w_m_r_module.html": {
    "href": "api/_f_u_x_tools_w_m_r_module.html",
    "title": "Class FUXToolsWMRModule | UXT Documentation",
    "keywords": "Class FUXToolsWMRModule Module for WMR-specific functionality. Inheritance System::Object IModuleInterface FUXToolsWMRModule Namespace : Assembly : .dll Syntax public: class FUXToolsWMRModule Methods View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override View Source StartupModule() IModuleInterface implementation Declaration public: virtual void StartupModule() override"
  },
  "api/_f_uxt_bounding_box_preset_utils.html": {
    "href": "api/_f_uxt_bounding_box_preset_utils.html",
    "title": "Struct FUxtBoundingBoxPresetUtils | UXT Documentation",
    "keywords": "Struct FUxtBoundingBoxPresetUtils Namespace : Assembly : .dll Syntax public: struct FUxtBoundingBoxPresetUtils Methods View Source GetPresetAffordances(EUxtBoundingBoxManipulatorPreset Preset) Get the list of affordances contained in a preset. Declaration public: static const TArray<FUxtBoundingBoxAffordanceInfo> & GetPresetAffordances(EUxtBoundingBoxManipulatorPreset Preset) Parameters Type Name Description EUxtBoundingBoxManipulatorPreset Preset Returns Type Description const TArray< FUxtBoundingBoxAffordanceInfo > &"
  },
  "api/_u_uxt_runtime_settings.html": {
    "href": "api/_u_uxt_runtime_settings.html",
    "title": "Class UUxtRuntimeSettings | UXT Documentation",
    "keywords": "Class UUxtRuntimeSettings Settings for UXTools . Inheritance System::Object UObject UUxtRuntimeSettings Namespace : Assembly : .dll Syntax public: class UUxtRuntimeSettings Constructors View Source UUxtRuntimeSettings(const FObjectInitializer &ObjectInitializer) Declaration public: UUxtRuntimeSettings(const FObjectInitializer &ObjectInitializer) Parameters Type Name Description const FObjectInitializer & ObjectInitializer Fields View Source bStartWithHandsEnabled Start With Hands Enabled. Declaration public: bool bStartWithHandsEnabled= true Field Value Type Description bool View Source bStartWithPositionalHeadTracking Enable positional head tracking on game start. Declaration public: bool bStartWithPositionalHeadTracking= true Field Value Type Description bool View Source DefaultHandPose Default pose when no button is pressed. Declaration public: FName DefaultHandPose= TEXT(\"Relaxed\") Field Value Type Description FName View Source DefaultHandPosition Default position of the right hand in camera space. Declaration public: FVector DefaultHandPosition= FVector(40, 20, 0) Field Value Type Description FVector View Source HandAnimInstance Animation instance used for animating hand meshes. Declaration public: TSubclassOf<UAnimInstance> HandAnimInstance Field Value Type Description TSubclassOf<UAnimInstance> View Source HandMesh Skeletal mesh for animating hands. The skeleton should contain bones that match the names in the EWMRHandKeypoint enum. For more details see the documentation on input simulation. Declaration public: TSoftObjectPtr<USkeletalMesh> HandMesh Field Value Type Description TSoftObjectPtr<USkeletalMesh> View Source HandMovementBox Allowed range of hand movement in camera space. Declaration public: FBox HandMovementBox= FBox(FVector(10, -40, -40), FVector(60, 40, 40)) Field Value Type Description FBox View Source HandPoseButtonMappings Controller buttons that are pressed along with certain hand poses. Declaration public: TMap<FName, FUxtRuntimeSettingsButtonSet> HandPoseButtonMappings Field Value Type Description TMap<FName, FUxtRuntimeSettingsButtonSet > View Source HandRestOrientation Orientation of the right hand in the default pose. This is used to determine limits when rotating the hand. Declaration public: FRotator HandRestOrientation= FRotator(58.991508, -45.549568, -44.187847) Field Value Type Description FRotator View Source PrimaryHandPose Pose mapped to the primary pose action. Declaration public: FName PrimaryHandPose= TEXT(\"Pinch\") Field Value Type Description FName View Source SecondaryHandPose Pose mapped to the secondary pose action. Declaration public: FName SecondaryHandPose= TEXT(\"Poke\") Field Value Type Description FName View Source ShoulderPosition Position of the right shoulder in camera space. Declaration public: FVector ShoulderPosition= FVector(0, 10, -15) Field Value Type Description FVector Methods View Source Get() Declaration public: static UUxtRuntimeSettings * Get() Returns Type Description UUxtRuntimeSettings *"
  },
  "api/_i_uxt_poke_target.html": {
    "href": "api/_i_uxt_poke_target.html",
    "title": "Class IUxtPokeTarget | UXT Documentation",
    "keywords": "Class IUxtPokeTarget Interface for components that can be poked. Inheritance System::Object IUxtPokeTarget Namespace : Assembly : .dll Syntax public: class IUxtPokeTarget Methods View Source GetPokeBehaviour() Returns which poke behaviour this target supports. Declaration public: EUxtPokeBehaviour GetPokeBehaviour() const Returns Type Description EUxtPokeBehaviour View Source IsPokeFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsPokeFocusable(const UPrimitiveComponent *Primitive) Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool View Source OnBeginPoke(UUxtNearPointerComponent *Pointer) Raised when a pointer poke volume starts overlapping the actor. Declaration public: void OnBeginPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnEndPoke(UUxtNearPointerComponent *Pointer) Raised when a pointer poke volume stops overlapping the actor. Declaration public: void OnEndPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer focuses the actor. Declaration public: void OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnExitPokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer stops focusing the actor. Declaration public: void OnExitPokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnUpdatePoke(UUxtNearPointerComponent *Pointer) Raised while a pointer poke volume is overlapping the actor. Declaration public: void OnUpdatePoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while focused. Declaration public: void OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_uxt_math_utils_function_library.html": {
    "href": "api/_u_uxt_math_utils_function_library.html",
    "title": "Class UUxtMathUtilsFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtMathUtilsFunctionLibrary Library of utility functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtMathUtilsFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtMathUtilsFunctionLibrary Methods View Source GetRotationBetweenVectors(const FVector &Vector1, const FVector &Vector2) Compute minimal rotation between vectors. Declaration public: static FRotator GetRotationBetweenVectors(const FVector &Vector1, const FVector &Vector2) Parameters Type Name Description const FVector & Vector1 const FVector & Vector2 Returns Type Description FRotator View Source RotateAboutPivotPoint(const FTransform &Transform, const FRotator &Rotation, const FVector &Pivot) Apply rotation about a pivot point to the transform. Declaration public: static FTransform RotateAboutPivotPoint(const FTransform &Transform, const FRotator &Rotation, const FVector &Pivot) Parameters Type Name Description const FTransform & Transform const FRotator & Rotation const FVector & Pivot Returns Type Description FTransform View Source SwingTwistDecompose(const FRotator &Rotation, const FVector &TwistAxis, FRotator &Swing, FRotator &Twist) Decompose a rotation into swing and twist components. The twist component describes a rotation around the given twist axis, while the swing contains the remaining rotation. Declaration public: static void SwingTwistDecompose(const FRotator &Rotation, const FVector &TwistAxis, FRotator &Swing, FRotator &Twist) Parameters Type Name Description const FRotator & Rotation const FVector & TwistAxis FRotator & Swing FRotator & Twist"
  },
  "api/_u_uxt_far_target.html": {
    "href": "api/_u_uxt_far_target.html",
    "title": "Class UUxtFarTarget | UXT Documentation",
    "keywords": "Class UUxtFarTarget Inheritance System::Object UInterface UUxtFarTarget Namespace : Assembly : .dll Syntax public: class UUxtFarTarget"
  },
  "api/_a_uxt_hand_interaction_actor.html": {
    "href": "api/_a_uxt_hand_interaction_actor.html",
    "title": "Class AUxtHandInteractionActor | UXT Documentation",
    "keywords": "Class AUxtHandInteractionActor Actor that drives hand interactions with components that implement the far, grab and poke target interfaces. A hand has two interaction modes: Near: interactions performed by poking or grabbing targets directly. Far: interactions performed by pointing at far targets from a distance via a hand ray. The actor transitions between modes depending on whether there is a grab or poke target within the near activation distance. Inheritance System::Object AActor AUxtHandInteractionActor Namespace : Assembly : .dll Syntax public: class AUxtHandInteractionActor Constructors View Source AUxtHandInteractionActor(const FObjectInitializer &ObjectInitializer) Declaration public: AUxtHandInteractionActor(const FObjectInitializer &ObjectInitializer) Parameters Type Name Description const FObjectInitializer & ObjectInitializer Fields View Source bUseDefaultVisuals When set create default visuals automatically for near and far cursors and far beam Declaration public: bool bUseDefaultVisuals= true Field Value Type Description bool View Source NearActivationDistance Distance from the hand to the closest grab or poke target at which near interaction activates. Declaration public: float NearActivationDistance= 20.0f Field Value Type Description float Methods View Source BeginPlay() Declaration public: virtual void BeginPlay() override View Source GetHand() Declaration public: EControllerHand GetHand() const Returns Type Description EControllerHand View Source GetPokeRadius() Declaration public: float GetPokeRadius() const Returns Type Description float View Source GetRayLength() Declaration public: float GetRayLength() const Returns Type Description float View Source GetRayStartOffset() Declaration public: float GetRayStartOffset() const Returns Type Description float View Source GetTraceChannel() Declaration public: ECollisionChannel GetTraceChannel() const Returns Type Description ECollisionChannel View Source SetHand(EControllerHand NewHand) Declaration public: void SetHand(EControllerHand NewHand) Parameters Type Name Description EControllerHand NewHand View Source SetPokeRadius(float NewPokeRadius) Declaration public: void SetPokeRadius(float NewPokeRadius) Parameters Type Name Description float NewPokeRadius View Source SetRayLength(float NewRayLength) Declaration public: void SetRayLength(float NewRayLength) Parameters Type Name Description float NewRayLength View Source SetRayStartOffset(float NewRayStartOffset) Declaration public: void SetRayStartOffset(float NewRayStartOffset) Parameters Type Name Description float NewRayStartOffset View Source SetTraceChannel(ECollisionChannel NewTraceChannel) Declaration public: void SetTraceChannel(ECollisionChannel NewTraceChannel) Parameters Type Name Description ECollisionChannel NewTraceChannel View Source Tick(float DeltaTime) Declaration public: virtual void Tick(float DeltaTime) override Parameters Type Name Description float DeltaTime"
  },
  "api/_i_uxt_grab_target.html": {
    "href": "api/_i_uxt_grab_target.html",
    "title": "Class IUxtGrabTarget | UXT Documentation",
    "keywords": "Class IUxtGrabTarget Interface for components that can be grabbed. Inheritance System::Object IUxtGrabTarget Namespace : Assembly : .dll Syntax public: class IUxtGrabTarget Methods View Source IsGrabFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsGrabFocusable(const UPrimitiveComponent *Primitive) Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool View Source OnBeginGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer starts grabbing while overlapping the actor. Declaration public: void OnBeginGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnEndGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer stops grabbing or stops overlapping the actor while grabbing. Declaration public: void OnEndGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer focuses the actor. Declaration public: void OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnExitGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer stops focusing the actor. Declaration public: void OnExitGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnUpdateGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while grabbing. Declaration public: void OnUpdateGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while focused. Declaration public: void OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_uxt_grab_target_component.html": {
    "href": "api/_u_uxt_grab_target_component.html",
    "title": "Class UUxtGrabTargetComponent | UXT Documentation",
    "keywords": "Class UUxtGrabTargetComponent Interactable component that listens to grab events from near pointers. A pointer that starts grabing while near the actor is considered a grabbing pointer. The grab is released when the pointer stops grabing, regardless of whether it is still near or not. The GrabComponent does not react to grabbing pointers by itself, but serves as a base class for manipulation. Inheritance System::Object USceneComponent UUxtGrabTargetComponent Inherited Members IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtGrabTarget::IsGrabFocusable(const UPrimitiveComponent *Primitive) IUxtGrabTarget::OnBeginGrab(UUxtNearPointerComponent *Pointer) IUxtGrabTarget::OnEndGrab(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnExitGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnUpdateGrab(UUxtNearPointerComponent *Pointer) IUxtGrabTarget::OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtGrabTargetComponent : public xtGrabTarget, public xtFarTarget Constructors View Source UUxtGrabTargetComponent() Declaration public: UUxtGrabTargetComponent() Fields View Source OnBeginGrab Event raised when grab starts. Declaration public: FUxtBeginGrabDelegate OnBeginGrab Field Value Type Description FUxtBeginGrabDelegate View Source OnEndGrab Event raised when grab ends. Declaration public: FUxtEndGrabDelegate OnEndGrab Field Value Type Description FUxtEndGrabDelegate View Source OnUpdateGrab Event raised when grab updates. Declaration public: FUxtUpdateGrabDelegate OnUpdateGrab Field Value Type Description FUxtUpdateGrabDelegate Methods View Source BeginPlay() Declaration protected: virtual void BeginPlay() override View Source FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) Returns true if the pointer is currently grabbing the actor. PointerData will contain the associated grab data for the pointer. Index is the order in which pointers started grabbing. Declaration public: void FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) const Parameters Type Name Description UUxtNearPointerComponent * NearPointer UUxtFarPointerComponent * FarPointer bool & Success FUxtGrabPointerData & PointerData int & Index View Source GetGrabPointCentroid(const FTransform &Transform) Compute the centroid of the grab points in world space. Declaration public: FVector GetGrabPointCentroid(const FTransform &Transform) const Parameters Type Name Description const FTransform & Transform Returns Type Description FVector View Source GetGrabPointers() Returns a list of all currently grabbing pointers. Declaration public: const TArray<FUxtGrabPointerData> & GetGrabPointers() const Returns Type Description const TArray< FUxtGrabPointerData > & View Source GetPointersTransformCentroid() Compute the average transform of currently grabbing pointers Declaration protected: FTransform GetPointersTransformCentroid() const Returns Type Description FTransform View Source GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) Returns the first active grab pointer. If no pointer is grabbing the Valid output will be false. Declaration public: void GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) const Parameters Type Name Description bool & Valid FUxtGrabPointerData & PointerData View Source GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) Returns the second active grab pointer. If less than two pointers are grabbing the Valid output will be false. Declaration public: void GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) const Parameters Type Name Description bool & Valid FUxtGrabPointerData & PointerData View Source GetTargetCentroid() Compute the centroid of the pointer targets in world space. Declaration public: FVector GetTargetCentroid() const Returns Type Description FVector View Source GetTickOnlyWhileGrabbed() Declaration public: bool GetTickOnlyWhileGrabbed() const Returns Type Description bool View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool View Source IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool View Source OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source SetTickOnlyWhileGrabbed(bool bEnable) Declaration public: void SetTickOnlyWhileGrabbed(bool bEnable) Parameters Type Name Description bool bEnable"
  },
  "api/_u_uxt_pressable_button_component.html": {
    "href": "api/_u_uxt_pressable_button_component.html",
    "title": "Class UUxtPressableButtonComponent | UXT Documentation",
    "keywords": "Class UUxtPressableButtonComponent Component that turns the actor it is attached to into a pressable rectangular button. Inheritance System::Object USceneComponent UUxtPressableButtonComponent Inherited Members IUxtPokeTarget::GetPokeBehaviour() IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::IsPokeFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::OnBeginPoke(UUxtNearPointerComponent *Pointer) IUxtPokeTarget::OnEndPoke(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnExitPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnUpdatePoke(UUxtNearPointerComponent *Pointer) IUxtPokeTarget::OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtPressableButtonComponent : public xtPokeTarget, public xtFarTarget Constructors View Source UUxtPressableButtonComponent() Declaration public: UUxtPressableButtonComponent() Fields View Source MaxPushDistance The maximum distance the button can be pushed Declaration public: float MaxPushDistance Field Value Type Description float View Source OnBeginFocus Event raised when a pointer starts focusing the button. WasFocused indicates if the button was already focused by another pointer. Declaration public: FUxtButtonBeginFocusDelegate OnBeginFocus Field Value Type Description FUxtButtonBeginFocusDelegate View Source OnBeginPoke Event raised when a pointer starts poking the Pressable Button. Declaration public: FUxtButtonBeginPokeDelegate OnBeginPoke Field Value Type Description FUxtButtonBeginPokeDelegate View Source OnButtonPressed Event raised when the button reaches the pressed distance. Declaration public: FUxtButtonPressedDelegate OnButtonPressed Field Value Type Description FUxtButtonPressedDelegate View Source OnButtonReleased Event raised when the a pressed button reaches the released distance. Declaration public: FUxtButtonReleasedDelegate OnButtonReleased Field Value Type Description FUxtButtonReleasedDelegate View Source OnEndFocus Event raised when a pointer ends focusing the Pressable Button. IsFocused indicates if the Pressable Button is still focused by another pointer. Declaration public: FUxtButtonEndFocusDelegate OnEndFocus Field Value Type Description FUxtButtonEndFocusDelegate View Source OnEndPoke Event raised when a pointer ends poking the Pressable Button. Declaration public: FUxtButtonEndPokeDelegate OnEndPoke Field Value Type Description FUxtButtonEndPokeDelegate View Source OnUpdateFocus Event raised when a focusing pointer updates. Declaration public: FUxtButtonUpdateFocusDelegate OnUpdateFocus Field Value Type Description FUxtButtonUpdateFocusDelegate View Source OnUpdatePoke Event raised while a pointer is poking the Pressable Button. Declaration public: FUxtButtonUpdatePokeDelegate OnUpdatePoke Field Value Type Description FUxtButtonUpdatePokeDelegate View Source PressedFraction Fraction of the maximum travel distance at which the button will raise the pressed event. Declaration public: float PressedFraction Field Value Type Description float View Source RecoverySpeed Button movement speed while recovering Declaration public: float RecoverySpeed Field Value Type Description float View Source ReleasedFraction Fraction of the maximum travel distance at which a pressed button will raise the released event. Declaration public: float ReleasedFraction Field Value Type Description float Methods View Source BeginPlay() Declaration protected: virtual void BeginPlay() override View Source GetPokeBehaviour_Implementation() Declaration protected: virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override Returns Type Description EUxtPokeBehaviour View Source GetScaleAdjustedMaxPushDistance() The maximum distance the button can be pushed Declaration public: float GetScaleAdjustedMaxPushDistance() const Returns Type Description float View Source GetVisuals() Get scene component used for the moving visuals Declaration public: USceneComponent * GetVisuals() const Returns Type Description USceneComponent * View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool View Source IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool View Source IsPressed() Get the current pressed state of the button Declaration public: bool IsPressed() const Returns Type Description bool View Source OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer View Source OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source SetCollisionProfile(FName Profile) Set scene component to be used for the moving visuals Declaration public: void SetCollisionProfile(FName Profile) Parameters Type Name Description FName Profile View Source SetVisuals(USceneComponent *Visuals) Set scene component to be used for the moving visuals Declaration public: void SetVisuals(USceneComponent *Visuals) Parameters Type Name Description USceneComponent * Visuals View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_f_uxt_poke_pointer_focus.html": {
    "href": "api/_f_uxt_poke_pointer_focus.html",
    "title": "Struct FUxtPokePointerFocus | UXT Documentation",
    "keywords": "Struct FUxtPokePointerFocus Focus implementation for the poke pointers. Inherited Members FUxtPointerFocus::ClearFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) FUxtPointerFocus::FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) FUxtPointerFocus::FindInterfaceComponent(AActor *Owner) FUxtPointerFocus::GetClosestTargetPoint() FUxtPointerFocus::GetFocusedPrimitive() FUxtPointerFocus::GetFocusedTarget() FUxtPointerFocus::GetFocusedTargetChecked() FUxtPointerFocus::SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) FUxtPointerFocus::SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) FUxtPointerFocus::SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UObject *NewTarget, UPrimitiveComponent *NewPrimitive, const FVector &NewClosestPointOnTarget) FUxtPointerFocus::UpdateFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::~FUxtPointerFocus() Namespace : Assembly : .dll Syntax public: struct FUxtPokePointerFocus : public xtPointerFocus Methods View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) const override Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint Returns Type Description bool Overrides FUxtPointerFocus::GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const override Returns Type Description UClass * Overrides FUxtPointerFocus::GetInterfaceClass() View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const override Parameters Type Name Description UObject * Target Returns Type Description bool Overrides FUxtPointerFocus::ImplementsTargetInterface(UObject *Target) View Source RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) View Source RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) View Source RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer)"
  },
  "api/_f_uxt_bounding_box_affordance_info.html": {
    "href": "api/_f_uxt_bounding_box_affordance_info.html",
    "title": "Struct FUxtBoundingBoxAffordanceInfo | UXT Documentation",
    "keywords": "Struct FUxtBoundingBoxAffordanceInfo Affordances are grabbable actors placed on the bounding box which enable interaction. Namespace : Assembly : .dll Syntax public: struct FUxtBoundingBoxAffordanceInfo Fields View Source Action Action to perform when the affordance is grabbed. Declaration public: EUxtBoundingBoxAffordanceAction Action= EUxtBoundingBoxAffordanceAction::Resize Field Value Type Description EUxtBoundingBoxAffordanceAction View Source ActorClass Actor that will be spawned to represent the affordance. Declaration public: TSubclassOf<class AActor> ActorClass Field Value Type Description TSubclassOf<class AActor> View Source BoundsLocation Location of the affordance in normalized bounding box space (-1..1). Declaration public: FVector BoundsLocation Field Value Type Description FVector View Source BoundsRotation Rotation of the affordance in bounding box space. Declaration public: FRotator BoundsRotation Field Value Type Description FRotator View Source ConstraintMatrix Constraint matrix defining possible movement directions or rotation axes. Drag vectors during interaction are multiplied with this matrix. Declaration public: FMatrix ConstraintMatrix Field Value Type Description FMatrix View Source Kind Kind of actor class to use if no explicit actor class is set. In this case the matching actor class from the bounding box component will be used. Declaration public: EUxtBoundingBoxAffordanceKind Kind= EUxtBoundingBoxAffordanceKind::Center Field Value Type Description EUxtBoundingBoxAffordanceKind Methods View Source GetWorldTransform(const FBox &Bounds, const FTransform &RootTransform) Transform from affordance local space to world space, based on the root transform. Root transform scale is not included in the transform. Declaration public: FTransform GetWorldTransform(const FBox &Bounds, const FTransform &RootTransform) const Parameters Type Name Description const FBox & Bounds const FTransform & RootTransform Returns Type Description FTransform"
  },
  "api/_u_uxt_near_pointer_component.html": {
    "href": "api/_u_uxt_near_pointer_component.html",
    "title": "Class UUxtNearPointerComponent | UXT Documentation",
    "keywords": "Class UUxtNearPointerComponent Adds poke and grab interactions to an actor. It keeps track of all overlapping poke targets and raises focus events on the closest one. Targets use the transform of pointers focusing them to drive their interactions. Inheritance System::Object UActorComponent UUxtNearPointerComponent Namespace : Assembly : .dll Syntax public: class UUxtNearPointerComponent Constructors View Source ~UUxtNearPointerComponent() Declaration public: virtual ~UUxtNearPointerComponent() View Source UUxtNearPointerComponent() Declaration public: UUxtNearPointerComponent() Fields View Source bFocusLocked Whether the pointer is locked on its current focused target. When locked, pointers won't change their focused target even if they stop overlapping it. Declaration public: bool bFocusLocked= false Field Value Type Description bool View Source GrabFocus Focus of the grab pointer Declaration protected: FUxtGrabPointerFocus * GrabFocus Field Value Type Description FUxtGrabPointerFocus * View Source GrabRadius Declaration public: float GrabRadius= 3.5f Field Value Type Description float View Source Hand The hand that this component represents. Determines the position of touch and grab pointers. Declaration public: EControllerHand Hand= EControllerHand::Right Field Value Type Description EControllerHand View Source PokeDepth The depth beyond the front face at which a front face pokable no longer recieves poke events. While poking a front face pokable, if the near pointer moves beyond this depth, the pokable will receive a poke end event. Declaration public: float PokeDepth= 20.0f Field Value Type Description float View Source PokeFocus Focus of the poke pointer Declaration protected: FUxtPokePointerFocus * PokeFocus Field Value Type Description FUxtPokePointerFocus * View Source PokeRadius Declaration public: float PokeRadius= 0.75f Field Value Type Description float View Source ProximityRadius Declaration public: float ProximityRadius= 11.0f Field Value Type Description float View Source TraceChannel Declaration public: TEnumAsByte<ECollisionChannel> TraceChannel= ECollisionChannel::ECC_Visibility Field Value Type Description TEnumAsByte<ECollisionChannel> Methods View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration public: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason View Source GetFocusedGrabTarget(FVector &OutClosestPointOnTarget) Returns currently focused grab target or null if there is none. Declaration public: UObject * GetFocusedGrabTarget(FVector &OutClosestPointOnTarget) const Parameters Type Name Description FVector & OutClosestPointOnTarget Returns Type Description UObject * View Source GetFocusedPokeTarget(FVector &OutClosestPointOnTarget) Returns currently focused poke target or null if there is none. Declaration public: UObject * GetFocusedPokeTarget(FVector &OutClosestPointOnTarget) const Parameters Type Name Description FVector & OutClosestPointOnTarget Returns Type Description UObject * View Source GetFocusLocked() Returns whether the pointer is locked on the currently focused target. Declaration public: bool GetFocusLocked() const Returns Type Description bool View Source GetGrabPointerTransform() Declaration public: FTransform GetGrabPointerTransform() const Returns Type Description FTransform View Source GetIsPoking() Declaration public: bool GetIsPoking() const Returns Type Description bool View Source GetPokePointerRadius() Declaration public: float GetPokePointerRadius() const Returns Type Description float View Source GetPokePointerTransform() Declaration public: FTransform GetPokePointerTransform() const Returns Type Description FTransform View Source IsGrabbing() Declaration public: bool IsGrabbing() const Returns Type Description bool View Source SetActive(bool bNewActive, bool bReset=false) Declaration public: virtual void SetActive(bool bNewActive, bool bReset=false) override Parameters Type Name Description bool bNewActive bool bReset View Source SetFocusedGrabTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Set a focused grab target explicitly which will receive grasp events. If bEnableFocusLock is true, then the new focus target will be locked until released by calling SetFocusLocked. Declaration public: bool SetFocusedGrabTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Parameters Type Name Description UActorComponent * NewFocusedTarget bool bEnableFocusLock Returns Type Description bool View Source SetFocusedPokeTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Set a focused poke target explicitly which will receive grasp events. If bEnableFocusLock is true, then the new focus target will be locked until released by calling SetFocusLocked. Declaration public: bool SetFocusedPokeTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Parameters Type Name Description UActorComponent * NewFocusedTarget bool bEnableFocusLock Returns Type Description bool View Source SetFocusLocked(bool Value) Sets whether the pointer is locked on the currently focused target. Declaration public: void SetFocusLocked(bool Value) Parameters Type Name Description bool Value View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_f_uxt_interaction_utils.html": {
    "href": "api/_f_uxt_interaction_utils.html",
    "title": "Class FUxtInteractionUtils | UXT Documentation",
    "keywords": "Class FUxtInteractionUtils Inheritance System::Object FUxtInteractionUtils Namespace : Assembly : .dll Syntax public: class FUxtInteractionUtils Methods View Source GetDefaultClosestPointOnPrimitive(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutPointOnSurface, float &OutDistanceSqr) Calculates the point on the target surface that is closest to the point passed in. Return value indicates whether a point was found. Declaration public: static bool GetDefaultClosestPointOnPrimitive(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutPointOnSurface, float &OutDistanceSqr) Parameters Type Name Description const UPrimitiveComponent * Primitive const FVector & Point FVector & OutPointOnSurface float & OutDistanceSqr Returns Type Description bool"
  },
  "api/_f_u_x_tools_editor_module.html": {
    "href": "api/_f_u_x_tools_editor_module.html",
    "title": "Class FUXToolsEditorModule | UXT Documentation",
    "keywords": "Class FUXToolsEditorModule Inheritance System::Object IModuleInterface FUXToolsEditorModule Namespace : Assembly : .dll Syntax public: class FUXToolsEditorModule Methods View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override View Source StartupModule() Declaration public: virtual void StartupModule() override"
  },
  "api/_u_x_tools_input_simulation.html": {
    "href": "api/_u_x_tools_input_simulation.html",
    "title": "Class UXToolsInputSimulation | UXT Documentation",
    "keywords": "Class UXToolsInputSimulation Inheritance System::Object ModuleRules UXToolsInputSimulation Namespace : Assembly : .dll Syntax public: class UXToolsInputSimulation Constructors View Source UXToolsInputSimulation(ReadOnlyTargetRules Target) Declaration public: UXToolsInputSimulation(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_uxt_far_beam_component.html": {
    "href": "api/_u_uxt_far_beam_component.html",
    "title": "Class UUxtFarBeamComponent | UXT Documentation",
    "keywords": "Class UUxtFarBeamComponent When added to an actor with a far pointer, this component displays a beam from the pointer ray start to the current hit point. Inheritance System::Object UStaticMeshComponent UUxtFarBeamComponent Namespace : Assembly : .dll Syntax public: class UUxtFarBeamComponent Constructors View Source UUxtFarBeamComponent() Declaration public: UUxtFarBeamComponent() Fields View Source HoverDistance Distance over the hit surface to place beam end at. Declaration public: float HoverDistance= 0.5f Field Value Type Description float Methods View Source BeginPlay() Declaration public: virtual void BeginPlay() override View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration public: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_far_cursor_component.html": {
    "href": "api/_u_uxt_far_cursor_component.html",
    "title": "Class UUxtFarCursorComponent | UXT Documentation",
    "keywords": "Class UUxtFarCursorComponent When added to an actor with a far pointer this component displays a flat ring cursor at the pointer's hit point oriented following the hit normal. Inheritance System::Object UUxtRingCursorComponent UUxtFarCursorComponent Namespace : Assembly : .dll Syntax public: class UUxtFarCursorComponent Constructors View Source UUxtFarCursorComponent() Declaration public: UUxtFarCursorComponent() Fields View Source HoverDistance Distance over the hit surface to place the cursor at. Declaration public: float HoverDistance= 0.5f Field Value Type Description float View Source IdleRadius Cursor radius when idle at 1m from the camera. The actual radius will scale with the distance to the camera to keep a constant screen size. Declaration public: float IdleRadius= 0.6f Field Value Type Description float View Source PressedRadius Cursor radius when pressed at 1m from the camera. The actual radius will scale with the distance to the camera to keep a constant screen size. Declaration public: float PressedRadius= 0.32f Field Value Type Description float Methods View Source BeginPlay() Declaration protected: virtual void BeginPlay() override View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_f_uxt_pointer_focus.html": {
    "href": "api/_f_uxt_pointer_focus.html",
    "title": "Struct FUxtPointerFocus | UXT Documentation",
    "keywords": "Struct FUxtPointerFocus Utility class that is used by components to manage different pointers and their focus targets. Namespace : Assembly : .dll Syntax public: struct FUxtPointerFocus Constructors View Source ~FUxtPointerFocus() Declaration public: virtual ~FUxtPointerFocus() Methods View Source ClearFocus(UUxtNearPointerComponent *Pointer) Clear the focused target. Declaration public: void ClearFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) Find the closest primitive and point on the owner of the given component. Declaration protected: FUxtPointerFocusSearchResult FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) const Parameters Type Name Description UActorComponent * Target const FVector & Point Returns Type Description FUxtPointerFocusSearchResult View Source FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) Find the closest target object, primitive, and point among the overlaps. Declaration protected: FUxtPointerFocusSearchResult FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) const Parameters Type Name Description const TArray<FOverlapResult> & Overlaps const FVector & Point Returns Type Description FUxtPointerFocusSearchResult View Source FindInterfaceComponent(AActor *Owner) Find a component of the actor that implements the required interface. Find a component of the actor that implements the given interface type. Declaration public: UActorComponent * FindInterfaceComponent(AActor *Owner) const Parameters Type Name Description AActor * Owner Returns Type Description UActorComponent * View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) const =0 Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint Returns Type Description bool View Source GetClosestTargetPoint() Get the closest point on the surface of the focused target Declaration public: const FVector & GetClosestTargetPoint() const Returns Type Description const FVector & View Source GetFocusedPrimitive() Get the currently focused primitive component Declaration public: UPrimitiveComponent * GetFocusedPrimitive() const Returns Type Description UPrimitiveComponent * View Source GetFocusedTarget() Get the currently focused target object. Declaration public: UObject * GetFocusedTarget() const Returns Type Description UObject * View Source GetFocusedTargetChecked() Get the currently focused target object. Returns null if the target does not implement the expected interface. Declaration public: UObject * GetFocusedTargetChecked() const Returns Type Description UObject * View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const =0 Returns Type Description UClass * View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const =0 Parameters Type Name Description UObject * Target Returns Type Description bool View Source RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer View Source RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer View Source RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer View Source SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) Select the closest primitive from the owner of the given target component. The target component will be the new focus, unless no usable primitive can be found. Declaration public: void SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform UActorComponent * NewTarget View Source SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) Select and set the focused target among the list of overlaps. Declaration public: void SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform const TArray<FOverlapResult> & Overlaps View Source SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UObject *NewTarget, UPrimitiveComponent *NewPrimitive, const FVector &NewClosestPointOnTarget) Set the focus to the given target object, primitive, and point on the target. Declaration protected: void SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UObject *NewTarget, UPrimitiveComponent *NewPrimitive, const FVector &NewClosestPointOnTarget) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform UObject * NewTarget UPrimitiveComponent * NewPrimitive const FVector & NewClosestPointOnTarget View Source UpdateFocus(UUxtNearPointerComponent *Pointer) Notify the focused target of a pointer update. Declaration public: void UpdateFocus(UUxtNearPointerComponent *Pointer) const Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "Docs/HandInteraction.html": {
    "href": "Docs/HandInteraction.html",
    "title": "| UXT Documentation",
    "keywords": "Documentation coming soon"
  },
  "api/_u_uxt_function_library.html": {
    "href": "api/_u_uxt_function_library.html",
    "title": "Class UUxtFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtFunctionLibrary Library of utility functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtFunctionLibrary Methods View Source GetHeadPose(UObject *WorldContextObject) Returns the world space position and orientation of the head. Declaration public: static FTransform GetHeadPose(UObject *WorldContextObject) Parameters Type Name Description UObject * WorldContextObject Returns Type Description FTransform View Source IsInEditor() Returns true if we are running in editor (not game mode or VR preview). Declaration public: static bool IsInEditor() Returns Type Description bool"
  },
  "api/_u_x_tools_editor.html": {
    "href": "api/_u_x_tools_editor.html",
    "title": "Class UXToolsEditor | UXT Documentation",
    "keywords": "Class UXToolsEditor Inheritance System::Object ModuleRules UXToolsEditor Namespace : Assembly : .dll Syntax public: class UXToolsEditor Constructors View Source UXToolsEditor(ReadOnlyTargetRules Target) Declaration public: UXToolsEditor(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_f_u_x_tools_module.html": {
    "href": "api/_f_u_x_tools_module.html",
    "title": "Class FUXToolsModule | UXT Documentation",
    "keywords": "Class FUXToolsModule Inheritance System::Object IModuleInterface FUXToolsModule Namespace : Assembly : .dll Syntax public: class FUXToolsModule Methods View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override View Source StartupModule() IModuleInterface implementation Declaration public: virtual void StartupModule() override"
  },
  "api/_a_uxt_input_simulation_actor.html": {
    "href": "api/_a_uxt_input_simulation_actor.html",
    "title": "Class AUxtInputSimulationActor | UXT Documentation",
    "keywords": "Class AUxtInputSimulationActor Actor that produces head pose and hand animations for the input simulation subsystem. Inheritance System::Object AActor AUxtInputSimulationActor Namespace : Assembly : .dll Syntax public: class AUxtInputSimulationActor Fields View Source bAddDefaultInputBindings If true, adds default input bindings for input simulation. Declaration public: uint32 bAddDefaultInputBindings Field Value Type Description uint32 Methods View Source BeginPlay() Declaration public: virtual void BeginPlay() override View Source GetHeadMovement() Declaration public: UUxtInputSimulationHeadMovementComponent * GetHeadMovement() const Returns Type Description UUxtInputSimulationHeadMovementComponent * View Source GetLeftHand() Declaration public: USkeletalMeshComponent * GetLeftHand() const Returns Type Description USkeletalMeshComponent * View Source GetRightHand() Declaration public: USkeletalMeshComponent * GetRightHand() const Returns Type Description USkeletalMeshComponent * View Source GetTargetPose(EControllerHand Hand) Get the current animation pose of a hand. If the hand is currently controlled by user input it will use the current target pose, otherwise the default pose is used. Declaration public: FName GetTargetPose(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description FName View Source IsHandControlled(EControllerHand Hand) True if the hand is currently controlled by the user. Declaration public: bool IsHandControlled(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description bool View Source IsHandVisible(EControllerHand Hand) True if the hand is currently visible. Declaration public: bool IsHandVisible(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description bool View Source ResetTargetPose(EControllerHand Hand) Reset the default target animation pose for a hand. Declaration public: void ResetTargetPose(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand View Source SetTargetPose(EControllerHand Hand, FName PoseName) Set the target animation pose for a hand. Declaration public: void SetTargetPose(EControllerHand Hand, FName PoseName) Parameters Type Name Description EControllerHand Hand FName PoseName View Source Tick(float DeltaSeconds) Declaration public: virtual void Tick(float DeltaSeconds) override Parameters Type Name Description float DeltaSeconds"
  },
  "README.html": {
    "href": "README.html",
    "title": "Introduction | UXT Documentation",
    "keywords": "Introduction UX Tools for Unreal Engine is a UE game plugin with code, blueprints and example assets created to help in the implementation of features commonly needed when developing UX for mixed reality applications. The project is still in early development (it provides a small set of features and breaking changes are to be expected) but the included features are complete and robust enough to use in your own projects. Only HoloLens 2 is supported at the moment. Features: Input simulation : simulated articulated hands and head pose for use in-editor. Great for improving development iteration times. Hand interaction actor : used to interact with our UX components with articulated hands. Pressable button component : low level component used to drive the state of button blueprints. An example button blueprint is provided. Manipulator component : allows moving and rotating an actor via one or two hand manipulation. Follow behaviour component : keeps an actor or component within sight of another component, usually the camera. Included but still in development is a bounding box component that allows manipulation of an actor's transform via affordances. Getting Started Get UE 4.25 preview 6 or later. Earlier previews or UE versions are not supported. Clone this repository. Checkout release/0.8.0. Bear in mind this branch is alive, it is not a release, and will be updated regularly with potentially breaking changes . There will be a release soon marked as such in GitHub. At this point it can be useful to have a look at the example maps provided in the UX Tools Game ( /UXToolsGame ) to get familiar with the plugin's functionality. To use the plugin in a game: Copy /UXToolsGame/Plugins/UXTools to the game's Plugins directory. Make sure the game project is a code one in order to be able to build the plugin sources. Open the game project and enable the UX Tools plugin in the plugins menu. To make sure everything is working as expected, add a hand interaction actor and an instance of the simple button blueprint to a level and try pressing the button with the simulated hands when playing in the editor. Documentation The latest version of the documentation can be found here ."
  },
  "Docs/InputSimulation.html": {
    "href": "Docs/InputSimulation.html",
    "title": "Input Simulation | UXT Documentation",
    "keywords": "Input Simulation Input simulation is using mouse and keyboard input in the editor to simulate a Head-Mounted Display (HMD) as well as hand tracking and other features. This allows testing Mixed-Reality features, such as buttons and interactions, without a physical device. Input simulation is not intended as a long term substitute for actual hardware, but as a development tool to improve iteration times and allow testing in case of limited hardware availability. Input simulation is only enabled in the Unreal editor. Activation Input simulation will become active when playing in the Unreal editor and no head-mounted display (HMD) is connected. If a HMD is connected the input simulation is disabled and camera placement is controlled by the device. Controls Default controls for moving the camera are based on the DefaultPawn: W/S keys for moving forward/backward A/D keys for moving sideways Q/E keys for moving down/up Mouse movement controls head rotation In addition to default pawn movement there are virtual hands that can be controlled for simulating hand tracking: Hold Left Shift/Alt for controlling the left/right hand respectively. This disables head rotation with the mouse and moves the hand instead. Both hands can be controlled together by holding both control keys. T/Y keys for toggling hand visibility. UX Tools project settings contain an option to \"Start with Hands Enabled\". Hands can still be enabled with the T/Y keys even if they are not initially visible. Press the Left mouse button to perform a \"Pinch\" gesture. This also activates the \"grasp\" state of the hand controller, allowing object manipulation. Press the Middle mouse button to perform a \"Poke\" gesture. This can be used for poking buttons. Note that buttons can also be pressed by simply moving the hand towards the button, without performing any gestures. Holding the Right mouse button enables rotation of the controlled hands: X axis changes yaw angle. Y axis changes pitch angle. Scroll wheel changes roll angle. To reset the hand rotation press the visibility keys (T/Y) twice. This will reset the hand location and rotation to defaults. Hand Animation Hand input is simulated with skeletal meshes that are animated according to user input. The main input simulation actor adds two instances of the skeletal hand mesh for the left and right hand respectively. The mesh asset is expected to model the right hand, while the left hand mesh is mirrored on the Y axis. An animation blueprint is used to toggle between different possible hand poses, such as a default relaxed hand, poking with the index finger, or pinching between thumb and index finger. Changing the current pose is bound to user input, usually the left and middle mouse buttons. The animation blueprint handles transition and blending between poses. After the mesh animation, the input simulation actor reads the position and rotation of bones matching the relevant hand joints by name (see EWMRHandKeypoint enum). This data is then passed to the input simulation subsystem to emulate device data when requested. Updating Hand Animation Assets The hand animation is best created from an FBX file. The file should contain: A mesh model for the right hand. A skeleton that animates the mesh. Bones in the skeleton that match the EWMRHandKeypoint enum by name: Palm, Wrist, ThumbMetacarpal, ThumbProximal, ThumbDistal, ThumbTip, IndexMetacarpal, etc.. Note that these bones do not necessarily have to deform the mesh, they only define the simulated joint positions. However, the joint bones should be aligned with the visible mesh to avoid confusion. Animation poses for the relevant hand gestures: Flat, Relaxed, Poke, Pinch, Grab, PalmUp, etc. The FBX file is imported, generating a mesh, skeleton, material(s), and animation assets. Open the hand animation asset that contains the desired hand poses. With Create Asset > Create PoseAsset > Current Animation create a pose asset that can blend between the various hand poses. Open the new pose asset and rename the relevant poses with meaningful names, e.g. \"Flat\", \"Relaxed\", \"Pinch\", \"Poke\". Open the InputSimulationHands_AnimInstance asset. This is the animation blueprint that drives the skeletal animation. In the AnimGraph find the PoseAsset blend node and in the Details panel change the linked pose asset to the one created above."
  },
  "Docs/FollowComponent.html": {
    "href": "Docs/FollowComponent.html",
    "title": "FollowComponent | UXT Documentation",
    "keywords": "FollowComponent The FollowComponent is used to keep objects \"following\" the user by applying a set of constraints on the component's owner. Usage Place a FollowComponent on your actor. In this example, we created an empty actor and added some geometry and text to make a panel that we want to keep in front of the user. Since we also want it to always face the user, we've set the \"Orientation Type\" to \"FaceCamera\". Hint: The camera looks down the +X axis, so you may want the front face of your content be in the -X direction. Behavior Details The FollowComponent has three different constraints that keeps its owner in front of the camera: Angular Clamp, Distance Clamp, and Orientation. The combination of Angular and Distance Clamp creates a frustum in front of the camera where its owner can be. If its owner is outside that frustum it is adjusted. Angular Clamp : The objective of this constraint is to ensure that the reference forward vector remains within the bounds set by the leashing parameters. To do this, determine the angles between toTarget and the leashing bounds about the global Z-axis and the reference's Y-axis. If the toTarget falls within the leashing bounds, then we don't have to modify it. Otherwise, we apply a correction rotation to bring it within bounds. This will ensure that the its owner stays within the top, bottom, right and left planes of the frustum. Distance Clamp : The objective of this constraint is to ensure that the following actor stays within bounds set by the distance parameters. To do this, we measure the current distance from the camera to the its owner. If the distance is within the MinimumDistance and MaximumDistance then we don't have to modify it. Otherwise, we push away or pull in the its owner along the reference forward vector. This will ensure that the its owner stays within the near and far planes of the frustum. Orientation : The two options provided are constant FaceCamera or WorldLock. While world locked there are three conditions that will cause the its owner to face the camera: Angular Clamps Distance Clamps The angle between the forward vector of the its owner and toTarget vector (vector between the camera and the its owner) is larger than dead zone angle parameter"
  },
  "Docs/PressableButton.html": {
    "href": "Docs/PressableButton.html",
    "title": "| UXT Documentation",
    "keywords": "Documentation coming soon"
  },
  "api/_u_x_tools_runtime_settings.html": {
    "href": "api/_u_x_tools_runtime_settings.html",
    "title": "Class UXToolsRuntimeSettings | UXT Documentation",
    "keywords": "Class UXToolsRuntimeSettings Inheritance System::Object ModuleRules UXToolsRuntimeSettings Namespace : Assembly : .dll Syntax public: class UXToolsRuntimeSettings Constructors View Source UXToolsRuntimeSettings(ReadOnlyTargetRules Target) Declaration public: UXToolsRuntimeSettings(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_uxt_grab_target.html": {
    "href": "api/_u_uxt_grab_target.html",
    "title": "Class UUxtGrabTarget | UXT Documentation",
    "keywords": "Class UUxtGrabTarget Inheritance System::Object UInterface UUxtGrabTarget Namespace : Assembly : .dll Syntax public: class UUxtGrabTarget"
  },
  "api/_f_uxt_grab_pointer_data.html": {
    "href": "api/_f_uxt_grab_pointer_data.html",
    "title": "Struct FUxtGrabPointerData | UXT Documentation",
    "keywords": "Struct FUxtGrabPointerData Utility struct that stores transient data for a pointer which is interacting with a grabbable component. Namespace : Assembly : .dll Syntax public: struct FUxtGrabPointerData Fields View Source FarPointer The far pointer that is interacting with the component Declaration public: UUxtFarPointerComponent * FarPointer= nullptr Field Value Type Description UUxtFarPointerComponent * View Source FarRayHitPointInPointer Far pointer only property -> describes the relative transform of the grab point to the pointer transform (pointer origin / orientation) This is needed to calculate the new grab point on the object on pointer translations / rotations Declaration public: FTransform FarRayHitPointInPointer= FTransform::Identity Field Value Type Description FTransform View Source GrabPointTransform Last updated grab point transform. (Pointer transform in near pointer case, ray hit transform in far pointer case) Declaration public: FTransform GrabPointTransform Field Value Type Description FTransform View Source LocalGrabPoint Transform of the pointer when it started interacting, in the local space of the target component. This allows computing pointer offset in relation to the current actor transform. Declaration public: FTransform LocalGrabPoint Field Value Type Description FTransform View Source NearPointer The near pointer that is interacting with the component. Declaration public: UUxtNearPointerComponent * NearPointer= nullptr Field Value Type Description UUxtNearPointerComponent * View Source StartTime The time at which interaction started, in seconds since application start. Declaration public: float StartTime Field Value Type Description float"
  },
  "api/_f_uxt_grab_pointer_focus.html": {
    "href": "api/_f_uxt_grab_pointer_focus.html",
    "title": "Struct FUxtGrabPointerFocus | UXT Documentation",
    "keywords": "Struct FUxtGrabPointerFocus Focus implementation for the grab pointers. Inherited Members FUxtPointerFocus::ClearFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) FUxtPointerFocus::FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) FUxtPointerFocus::FindInterfaceComponent(AActor *Owner) FUxtPointerFocus::GetClosestTargetPoint() FUxtPointerFocus::GetFocusedPrimitive() FUxtPointerFocus::GetFocusedTarget() FUxtPointerFocus::GetFocusedTargetChecked() FUxtPointerFocus::SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) FUxtPointerFocus::SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) FUxtPointerFocus::SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UObject *NewTarget, UPrimitiveComponent *NewPrimitive, const FVector &NewClosestPointOnTarget) FUxtPointerFocus::UpdateFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::~FUxtPointerFocus() Namespace : Assembly : .dll Syntax public: struct FUxtGrabPointerFocus : public xtPointerFocus Methods View Source BeginGrab(UUxtNearPointerComponent *Pointer) Notify the target object that grab has started. Declaration public: void BeginGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source EndGrab(UUxtNearPointerComponent *Pointer) Notify the target object that grab has ended. Declaration public: void EndGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) const override Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint Returns Type Description bool Overrides FUxtPointerFocus::GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const override Returns Type Description UClass * Overrides FUxtPointerFocus::GetInterfaceClass() View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const override Parameters Type Name Description UObject * Target Returns Type Description bool Overrides FUxtPointerFocus::ImplementsTargetInterface(UObject *Target) View Source IsGrabbing() Declaration public: bool IsGrabbing() const Returns Type Description bool View Source RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) View Source RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) View Source RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) View Source UpdateGrab(UUxtNearPointerComponent *Pointer) Notify the grabbed target object that the pointer has been updated. Declaration public: void UpdateGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_uxt_poke_target.html": {
    "href": "api/_u_uxt_poke_target.html",
    "title": "Class UUxtPokeTarget | UXT Documentation",
    "keywords": "Class UUxtPokeTarget Inheritance System::Object UInterface UUxtPokeTarget Namespace : Assembly : .dll Syntax public: class UUxtPokeTarget"
  },
  "api/_u_uxt_input_simulation_head_movement_component.html": {
    "href": "api/_u_uxt_input_simulation_head_movement_component.html",
    "title": "Class UUxtInputSimulationHeadMovementComponent | UXT Documentation",
    "keywords": "Class UUxtInputSimulationHeadMovementComponent Movement component that applies user input. Works similar to UFloatingPawnMovement, but does not require a APawn actor. Inheritance System::Object UMovementComponent UUxtInputSimulationHeadMovementComponent Namespace : Assembly : .dll Syntax public: class UUxtInputSimulationHeadMovementComponent Methods View Source AddMovementInput(const FVector &Movement) Add cumulative movement input in world space. Declaration public: void AddMovementInput(const FVector &Movement) Parameters Type Name Description const FVector & Movement View Source AddRotationInput(const FRotator &Rotation) Add cumulative rotation input relative to current world space orientation. Declaration public: void AddRotationInput(const FRotator &Rotation) Parameters Type Name Description const FRotator & Rotation View Source BeginPlay() Declaration public: virtual void BeginPlay() override View Source IsHeadMovementEnabled() Declaration public: bool IsHeadMovementEnabled() const Returns Type Description bool View Source SetHeadMovementEnabled(bool bEnable) Declaration public: void SetHeadMovementEnabled(bool bEnable) Parameters Type Name Description bool bEnable View Source TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime enum ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_uxt_manipulation_move_logic.html": {
    "href": "api/_uxt_manipulation_move_logic.html",
    "title": "Class UxtManipulationMoveLogic | UXT Documentation",
    "keywords": "Class UxtManipulationMoveLogic Implements a move logic that will move an object based on the initial position of the grab point relative to the pointer and relative to the object, and subsequent changes to the pointer and the object's rotation Usage: When a manipulation starts, call Setup. Call Update for querying a new position for the object. Inheritance System::Object UxtManipulationMoveLogic Namespace : Assembly : .dll Syntax public: class UxtManipulationMoveLogic Methods View Source Setup(const FTransform &PointerCentroidPose, const FVector &GrabCentroid, const FTransform &ObjectTransform, const FVector &HeadPosition) Setup move logic by caching initial input values Declaration public: void Setup(const FTransform &PointerCentroidPose, const FVector &GrabCentroid, const FTransform &ObjectTransform, const FVector &HeadPosition) Parameters Type Name Description const FTransform & PointerCentroidPose const FVector & GrabCentroid const FTransform & ObjectTransform const FVector & HeadPosition View Source Update(const FTransform &PointerCentroidPose, const FQuat &ObjectRotation, const FVector &ObjectScale, bool UsePointerRotation, const FVector &HeadPosition) Provide updated input and head/camera position to retrieve new object position Declaration public: FVector Update(const FTransform &PointerCentroidPose, const FQuat &ObjectRotation, const FVector &ObjectScale, bool UsePointerRotation, const FVector &HeadPosition) const Parameters Type Name Description const FTransform & PointerCentroidPose const FQuat & ObjectRotation const FVector & ObjectScale bool UsePointerRotation const FVector & HeadPosition Returns Type Description FVector"
  },
  "api/_u_uxt_input_simulation_local_player_subsystem.html": {
    "href": "api/_u_uxt_input_simulation_local_player_subsystem.html",
    "title": "Class UUxtInputSimulationLocalPlayerSubsystem | UXT Documentation",
    "keywords": "Class UUxtInputSimulationLocalPlayerSubsystem Subsystem that creates an actor for simulation when a game is started. Inheritance System::Object ULocalPlayerSubsystem UUxtInputSimulationLocalPlayerSubsystem Namespace : Assembly : .dll Syntax public: class UUxtInputSimulationLocalPlayerSubsystem Methods View Source Deinitialize() Declaration public: virtual void Deinitialize() override View Source Initialize(FSubsystemCollectionBase &Collection) Declaration public: virtual void Initialize(FSubsystemCollectionBase &Collection) override Parameters Type Name Description FSubsystemCollectionBase & Collection View Source ShouldCreateSubsystem(UObject *Outer) Declaration public: virtual bool ShouldCreateSubsystem(UObject *Outer) const override Parameters Type Name Description UObject * Outer Returns Type Description bool"
  },
  "Docs/Manipulator.html": {
    "href": "Docs/Manipulator.html",
    "title": "Manipulator Components | UXT Documentation",
    "keywords": "Manipulator Components Manipulator components allow an actor to be picked up by a user and then moved, rotated or scaled. Generic Manipulator The Generic Manipulator component is a general-purpose implementation of the Manipulator Component Base . It supports both one and two-handed manipulation with a number of configurable settings to change its behavior. One-handed manipulation If one-handed manipulation is enabled the actor can be moved with just one hand. This mode supports movement and rotation, but not scaling of the actor. The way hand rotation translates into actor rotation depends on the One Hand Rotation Mode : Maintain Original Rotation : Does not rotate object as it is being moved. Rotate About Object Center : Only works for articulated hands/controllers. Rotate object using rotation of the hand/controller, but about the object center point. Useful for inspecting at a distance. Rotate About Grab Point : Only works for articulated hands/controllers. Rotate object as if it was being held by hand/controller. Useful for inspection. Maintain Rotation To User : Maintains the object's original rotation for Y/Z axis to the user. Gravity Aligned Maintain Rotation To User : Maintains object's original rotation to user, but makes the object vertical. Useful for bounding boxes. Face User : Ensures object always faces the user. Useful for slates/panels. Face Away From User : Ensures object always faces away from user. Useful for slates/panels that are configured backwards. Two-handed manipulation If two-handed manipulation is enabled the actor can be moved, rotated, and scaled by grabbing it with both hands. Each of these actions can be enabled or disabled separately as needed, e.g. an actor can have rotation and scaling enabled while movement is disabled. Movement uses the center point between both hands, so each hand contributes half of the translation. Rotation is based on imaginary axis between both hands. The actor will rotate with the change of this axis, while avoiding roll around it. Scaling uses the change in distance between hands. Smoothing The generic manipulator has a simple smoothing option to reduce jittering from noisy input. This becomes especially important with one-handed rotation, where hand tracking can be unreliable and the resulting transform amplifies jittering. The smoothing method is based on a low-pass filter that gets applied to the source transform location and rotation. The resulting actor transform T_final is a exponentially weighted average of the current transform T_current and the raw target transform T_target based on the time step: T_final = Lerp( T_current, T_target, Exp(-Smoothing * DeltaSeconds) )"
  },
  "api/_uxt_two_hand_manipulation_rotate_logic.html": {
    "href": "api/_uxt_two_hand_manipulation_rotate_logic.html",
    "title": "Class UxtTwoHandManipulationRotateLogic | UXT Documentation",
    "keywords": "Class UxtTwoHandManipulationRotateLogic Implements common logic for rotating holograms using a handlebar metaphor. Each frame, object_rotation_delta = rotation_delta(current_hands_vector, previous_hands_vector) where hands_vector is the vector between two hand/controller positions. Usage: When a manipulation starts, call Setup. Call Update with currently available grab pointers to get a new rotation for the object. Inheritance System::Object UxtTwoHandManipulationRotateLogic Inherited Members UxtTwoHandManipulationRotateLogic Namespace : Assembly : .dll Syntax public: class UxtTwoHandManipulationRotateLogic Methods View Source Setup(GrabPointers PointerData, const FQuat &HostRotation) Sets up rotation logic by storing initial handle bar and rotation value Declaration public: void Setup(GrabPointers PointerData, const FQuat &HostRotation) Parameters Type Name Description GrabPointers PointerData const FQuat & HostRotation View Source Update(GrabPointers PointerData) Updates the rotation based on the current grab pointer locations Declaration public: FQuat Update(GrabPointers PointerData) const Parameters Type Name Description GrabPointers PointerData Returns Type Description FQuat"
  },
  "api/_u_uxt_grab_pointer_data_function_library.html": {
    "href": "api/_u_uxt_grab_pointer_data_function_library.html",
    "title": "Class UUxtGrabPointerDataFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtGrabPointerDataFunctionLibrary Utility functions for FGrabPointerData. Inheritance System::Object UBlueprintFunctionLibrary UUxtGrabPointerDataFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtGrabPointerDataFunctionLibrary Methods View Source GetGrabLocation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab point in world space. Declaration public: static FVector GetGrabLocation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FVector View Source GetGrabRotation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab rotation in world space. Declaration public: static FRotator GetGrabRotation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FRotator View Source GetGrabTransform(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab transform in world space. Declaration public: static FTransform GetGrabTransform(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FTransform View Source GetLocationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the world space offset between pointer grab point and target. Declaration public: static FVector GetLocationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FVector View Source GetPointerLocation(const FUxtGrabPointerData &GrabData) Returns the world space pointer location Declaration public: static FVector GetPointerLocation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FVector View Source GetPointerTransform(const FUxtGrabPointerData &GrabData) Returns the world space pointer transform (at pointer origin). Declaration public: static FTransform GetPointerTransform(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FTransform View Source GetRotationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the world space rotation between pointer grab point and target. Declaration public: static FRotator GetRotationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FRotator View Source GetTargetLocation(const FUxtGrabPointerData &GrabData) Compute the pointer target in world space. Declaration public: static FVector GetTargetLocation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FVector View Source GetTargetRotation(const FUxtGrabPointerData &GrabData) Compute the target rotation in world space. Declaration public: static FRotator GetTargetRotation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FRotator View Source GetTargetTransform(const FUxtGrabPointerData &GrabData) Compute the pointer target transform in world space. Declaration public: static FTransform GetTargetTransform(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FTransform"
  }
}