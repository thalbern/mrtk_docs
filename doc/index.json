{
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.InputActionPropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.InputActionPropertyDrawer.html",
    "title": "Class InputActionPropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputActionPropertyDrawer Inheritance Object InputActionPropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class InputActionPropertyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect rect, SerializedProperty property, GUIContent content) Parameters Type Name Description Rect rect SerializedProperty property GUIContent content"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities Classes CanvasEditorExtension Helper class to assign the UIRaycastCamera when creating a new canvas object and assigning the world space render mode. InspectorFieldsUtility A collection of helper functions for adding InspectorFields to a custom Inspector InspectorUIUtility This class has handy inspector UI utilities and functions. MixedRealityInspectorUtility This class has handy inspector utilities and functions. Structs InspectorUIUtility.ListSettings A data container for managing scrolling lists or nested drawers in custom inspectors. Delegates InspectorUIUtility.ListButtonEvent Delegate for button callbacks, single index InspectorUIUtility.MultiListButtonEvent Delegate for button callbacks, multi-index for nested arrays"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors Classes ChannelPackerWindow ClippingBoxEditor ClippingPlaneEditor ClippingSphereEditor ControllerPopupWindow HoverLightInspector MixedRealityStandardShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/Standard\" shader. MixedRealityStandardShaderGUI.Styles MixedRealityToolkitInspector Text3DShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/TextShader3D\". Text3DShaderGUI.Styles Enums MixedRealityStandardShaderGUI.AlbedoAlphaMode MixedRealityStandardShaderGUI.CustomRenderingMode MixedRealityStandardShaderGUI.DepthWrite MixedRealityStandardShaderGUI.RenderingMode"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityDictationHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityDictationHandler.html",
    "title": "Interface IMixedRealityDictationHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDictationHandler Interface to implement dictation events. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDictationHandler : IEventSystemHandler Methods OnDictationComplete(DictationEventData) Declaration void OnDictationComplete(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData OnDictationError(DictationEventData) Declaration void OnDictationError(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData OnDictationHypothesis(DictationEventData) Declaration void OnDictationHypothesis(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData OnDictationResult(DictationEventData) Declaration void OnDictationResult(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityFocusChangedHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityFocusChangedHandler.html",
    "title": "Interface IMixedRealityFocusChangedHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityFocusChangedHandler Interface to implement to react to focus changed events. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityFocusChangedHandler : IEventSystemHandler Methods OnBeforeFocusChange(FocusEventData) Focus event that is raised before the focus is actually changed. Useful for logic that needs to take place before focus changes. Declaration void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusChanged(FocusEventData) Focus event that is raised when the focused object is changed. Declaration void OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.UnityTouchController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.UnityTouchController.html",
    "title": "Class UnityTouchController | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityTouchController Inheritance Object BaseController UnityTouchController Inherited Members BaseController.DefaultLeftHandedInteractions BaseController.DefaultRightHandedInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) Namespace : Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput Assembly : cs.temp.dll.dll Syntax public class UnityTouchController : BaseController Constructors UnityTouchController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Declaration public UnityTouchController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions The default interactions for this controller. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultInteractions Lifetime The current lifetime of the Touch. Declaration public float Lifetime { get; } Property Value Type Description Single ManipulationThreshold The threshold a finger must move before starting a manipulation gesture. Declaration public float ManipulationThreshold { get; set; } Property Value Type Description Single MaxTapContactTime Time in seconds to determine if the contact registers as a tap or a hold Declaration public float MaxTapContactTime { get; set; } Property Value Type Description Single ScreenPointRay Current Screen point ray for the Touch. Declaration public Ray ScreenPointRay { get; } Property Value Type Description Ray TouchData Current Touch Data for the Controller. Declaration public Touch TouchData { get; } Property Value Type Description Touch Methods EndTouch() End the touch. Declaration public void EndTouch() SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides BaseController.SetupDefaultInteractions(Handedness) StartTouch() Start the touch. Declaration public void StartTouch() Update() Update the touch data. Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.UnityTouchDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.UnityTouchDeviceManager.html",
    "title": "Class UnityTouchDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityTouchDeviceManager Manages Touch devices using unity input system. Inheritance Object BaseDeviceManager UnityTouchDeviceManager Implements IMixedRealityDeviceManager IMixedRealityExtensionService Inherited Members BaseDeviceManager.GetActiveControllers() BaseDeviceManager.RequestPointers(SystemType, Handedness, Boolean) Namespace : Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput Assembly : cs.temp.dll.dll Syntax public class UnityTouchDeviceManager : BaseDeviceManager, IMixedRealityDeviceManager, IMixedRealityExtensionService Constructors UnityTouchDeviceManager(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public UnityTouchDeviceManager(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Methods Disable() Declaration public override void Disable() Update() Declaration public override void Update() Implements IMixedRealityDeviceManager IMixedRealityExtensionService"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpProjectPostProcess.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpProjectPostProcess.html",
    "title": "Class UwpProjectPostProcess | Mixed Reality Toolkit Documentation",
    "keywords": "Class UwpProjectPostProcess This class is designed to post process the UWP Assembly-CSharp projects to ensure that the defaults and defines are set correctly. Inheritance Object UwpProjectPostProcess Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Build Assembly : cs.temp.dll.dll Syntax public static class UwpProjectPostProcess Methods Execute(String) Executes the Post Processes on the C# Projects generated as part of the UWP build. Declaration public static void Execute(string buildRootPath) Parameters Type Name Description String buildRootPath The root path of the UWP build output."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Build | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Build Classes BuildDeployPreferences Build and Deploy Specific Editor Preferences for the Build and Deploy Window. BuildInfo CopyDirectoryInfo UwpAppxBuildTools UwpBuildDeployWindow Build window - supports SLN creation, APPX from SLN, Deploy on device, and misc helper utilities associated with the build/deploy/test iteration loop Requires the device to be set in developer mode and to have secure connections disabled (in the security tab in the device portal) UwpPlayerBuildTools Class containing various utility methods to build a WSA solution from a Unity project. UwpProjectPostProcess This class is designed to post process the UWP Assembly-CSharp projects to ensure that the defaults and defines are set correctly. Delegates UwpPlayerBuildTools.BuildInfoConfigurationMethod A method capable of configuring BuildInfo settings."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.BaseMixedRealityLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.BaseMixedRealityLineDataProvider.html",
    "title": "Class BaseMixedRealityLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityLineDataProvider Base class that provides data about a line. Inheritance Object BaseMixedRealityLineDataProvider EllipseLineDataProvider ParabolaLineDataProvider RectangleLineDataProvider SimpleLineDataProvider SplineDataProvider Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityLineDataProvider : MonoBehaviour Remarks Data to be consumed by other classes like the BaseMixedRealityLineRenderer Properties Distorters A list of distorters that apply to this line Declaration public List<Distorter> Distorters { get; } Property Value Type Description List < Distorter > DistortionMode NormalizedLength mode uses the DistortionStrength curve for distortion strength, Uniform uses UniformDistortionStrength along entire line Declaration public DistortionMode DistortionMode { get; set; } Property Value Type Description DistortionMode DistortionStrength Declaration public AnimationCurve DistortionStrength { get; set; } Property Value Type Description AnimationCurve FirstPoint Declaration public Vector3 FirstPoint { get; set; } Property Value Type Description Vector3 FlipUpVector Reverses up vector when determining rotation along line Declaration public bool FlipUpVector { get; set; } Property Value Type Description Boolean LastPoint Declaration public Vector3 LastPoint { get; set; } Property Value Type Description Vector3 LineEndClamp Clamps the line's normalized end point. This setting will affect line renderers. Declaration public float LineEndClamp { get; set; } Property Value Type Description Single LineStartClamp Clamps the line's normalized start point. This setting will affect line renderers. Declaration public float LineStartClamp { get; set; } Property Value Type Description Single LineTransform Transform to use when translating points from local to world space. If null, this object's transform is used. Declaration public Transform LineTransform { get; set; } Property Value Type Description Transform Loops Controls whether this line loops Declaration public virtual bool Loops { get; set; } Property Value Type Description Boolean Remarks Some classes override this setting. ManualUpVectorBlend The weight of manual up vectors in Velocity rotation mode Declaration public float ManualUpVectorBlend { get; set; } Property Value Type Description Single ManualUpVectors These vectors are used with ManualUpVectorBlend to determine rotation along the line in Velocity rotation mode. Vectors are distributed along the normalized length of the line. Declaration public Vector3[] ManualUpVectors { get; set; } Property Value Type Description Vector3 [] OriginOffset Local space offset to transform position. Used to determine rotation along line in RelativeToOrigin rotation mode Declaration public Vector3 OriginOffset { get; set; } Property Value Type Description Vector3 PointCount The number of points this line has. Declaration public abstract int PointCount { get; } Property Value Type Description Int32 RotationMode The rotation mode used in the GetRotation function. You can visualize rotations by checking Draw Rotations under Editor Settings. Declaration public LineRotationMode RotationMode { get; set; } Property Value Type Description LineRotationMode TransformMode Defines how a base line data provider will transform its points Declaration public LinePointTransformMode TransformMode { get; set; } Property Value Type Description LinePointTransformMode UnClampedWorldLength Declaration public float UnClampedWorldLength { get; } Property Value Type Description Single UniformDistortionStrength Declaration public float UniformDistortionStrength { get; set; } Property Value Type Description Single VelocitySearchRange Used in Velocity rotation mode. Declaration public float VelocitySearchRange { get; set; } Property Value Type Description Single Remarks Smaller values are more accurate but more expensive Methods DrawUnselectedGizmosPreview() Declaration protected virtual void DrawUnselectedGizmosPreview() GetClosestPoint(Vector3, Int32, Int32) Iterates along line until it finds the point closest to worldPosition Declaration public Vector3 GetClosestPoint(Vector3 worldPosition, int resolution = 5, int maxIterations = 5) Parameters Type Name Description Vector3 worldPosition Int32 resolution Int32 maxIterations Returns Type Description Vector3 GetNormalizedLengthFromWorldLength(Single, Int32) Returns a normalized length corresponding to a world length Useful for determining LineStartClamp / LineEndClamp values Declaration public float GetNormalizedLengthFromWorldLength(float worldLength, int searchResolution = 10) Parameters Type Name Description Single worldLength Int32 searchResolution Returns Type Description Single GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) Iterates along line until it finds the length closest to worldposition. Declaration public float GetNormalizedLengthFromWorldPos(Vector3 worldPosition, int resolution = 5, int maxIterations = 5) Parameters Type Name Description Vector3 worldPosition Int32 resolution Int32 maxIterations Returns Type Description Single GetPoint(Int32) Gets a point along the line at the specified index Declaration public Vector3 GetPoint(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 GetPoint(Single) Gets a point along the line at the specified normalized length. Declaration public Vector3 GetPoint(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected abstract Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected abstract Vector3 GetPointInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 GetRotation(Int32, LineRotationMode) Gets the rotation of a point along the line at the specified index Declaration public Quaternion GetRotation(int pointIndex, LineRotationMode lineRotationMode = null) Parameters Type Name Description Int32 pointIndex LineRotationMode lineRotationMode Returns Type Description Quaternion GetRotation(Single, LineRotationMode) Gets the rotation of a point along the line at the specified length Declaration public Quaternion GetRotation(float normalizedLength, LineRotationMode lineRotationMode = null) Parameters Type Name Description Single normalizedLength LineRotationMode lineRotationMode Returns Type Description Quaternion GetUnClampedPoint(Single) Gets a point along the line at the specified length without using LineStartClamp or LineEndClamp Declaration public Vector3 GetUnClampedPoint(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected abstract float GetUnClampedWorldLengthInternal() Returns Type Description Single GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected virtual Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 GetVelocity(Single) Gets the velocity along the line Declaration public Vector3 GetVelocity(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 OnEnable() Declaration protected virtual void OnEnable() OnValidate() Declaration protected virtual void OnValidate() SetPoint(Int32, Vector3) Sets a point in the line This function is not guaranteed to have an effect Declaration public void SetPoint(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected abstract void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Update() Declaration protected virtual void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.EllipseLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.EllipseLineDataProvider.html",
    "title": "Class EllipseLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class EllipseLineDataProvider Creates an elliptical line shape. Inheritance Object BaseMixedRealityLineDataProvider EllipseLineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) BaseMixedRealityLineDataProvider.OnValidate() BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.Update() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public class EllipseLineDataProvider : BaseMixedRealityLineDataProvider Remarks This line loops. Properties PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount Radius Declaration public Vector2 Radius { get; set; } Property Value Type Description Vector2 Resolution Declaration public int Resolution { get; set; } Property Value Type Description Int32 Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.TwoHandMoveLogic.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.TwoHandMoveLogic.html",
    "title": "Class TwoHandMoveLogic | Mixed Reality Toolkit Documentation",
    "keywords": "Class TwoHandMoveLogic Implements a movement logic that uses the model of angular rotations along a sphere whose radius varies. The angle to move by is computed by looking at how much the hand changes relative to a pivot point (slightly below and in front of the head). Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. Inheritance Object TwoHandMoveLogic Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public class TwoHandMoveLogic Constructors TwoHandMoveLogic(MovementConstraintType) Constructor. Declaration public TwoHandMoveLogic(MovementConstraintType _movementConstraint) Parameters Type Name Description MovementConstraintType _movementConstraint Methods GetHandPivotPosition() Get the hand pivot position located a bit lower and behind the camera. Declaration public static Vector3 GetHandPivotPosition() Returns Type Description Vector3 A point that is below and just in front of the head. Setup(Vector3, Transform) Declaration public void Setup(Vector3 startHandPositionMeters, Transform manipulationRoot) Parameters Type Name Description Vector3 startHandPositionMeters Transform manipulationRoot Update(Vector3, Vector3) Declaration public Vector3 Update(Vector3 centroid, Vector3 manipulationObjectPosition) Parameters Type Name Description Vector3 centroid Vector3 manipulationObjectPosition Returns Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers.IMixedRealityEventHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers.IMixedRealityEventHandler.html",
    "title": "Interface IMixedRealityEventHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEventHandler Interface to implement generic events. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEventHandler : IEventSystemHandler Methods OnEventRaised(GenericBaseEventData) Declaration void OnEventRaised(GenericBaseEventData eventData) Parameters Type Name Description GenericBaseEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers.IMixedRealityPlacementHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers.IMixedRealityPlacementHandler.html",
    "title": "Interface IMixedRealityPlacementHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityPlacementHandler Interface to implement reacting to placement of objects. Inherited Members IMixedRealityEventHandler.OnEventRaised(GenericBaseEventData) Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityPlacementHandler : IMixedRealityEventHandler, IEventSystemHandler Methods OnPlacingCompleted(PlacementEventData) Declaration void OnPlacingCompleted(PlacementEventData eventData) Parameters Type Name Description PlacementEventData eventData OnPlacingStarted(PlacementEventData) Declaration void OnPlacingStarted(PlacementEventData eventData) Parameters Type Name Description PlacementEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityPointer.html",
    "title": "Interface IMixedRealityPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityPointer Interface for handling pointers. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityPointer : IEqualityComparer Properties BaseCursor The pointer's cursor. Declaration IMixedRealityCursor BaseCursor { get; set; } Property Value Type Description IMixedRealityCursor Controller The pointer's current controller reference. Declaration IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController CursorModifier The currently active cursor modifier. Declaration ICursorModifier CursorModifier { get; set; } Property Value Type Description ICursorModifier FocusTarget The currently focused target. Declaration IMixedRealityFocusHandler FocusTarget { get; set; } Property Value Type Description IMixedRealityFocusHandler InputSourceParent This pointer's input source parent. Declaration IMixedRealityInputSource InputSourceParent { get; } Property Value Type Description IMixedRealityInputSource IsFocusLocked Is the focus for this pointer currently locked? Declaration bool IsFocusLocked { get; set; } Property Value Type Description Boolean IsInteractionEnabled Has the conditions for the interaction been satisfied to enable the interaction? Declaration bool IsInteractionEnabled { get; } Property Value Type Description Boolean PointerExtent The pointer's maximum extent when raycasting. Declaration float PointerExtent { get; set; } Property Value Type Description Single PointerId This pointer's id. Declaration uint PointerId { get; } Property Value Type Description UInt32 PointerName This pointer's name. Declaration string PointerName { get; set; } Property Value Type Description String PointerOrientation The Y orientation of the pointer - used for touchpad rotation and navigation Declaration float PointerOrientation { get; } Property Value Type Description Single PrioritizedLayerMasksOverride The physics layers to use when raycasting. Declaration LayerMask[] PrioritizedLayerMasksOverride { get; set; } Property Value Type Description LayerMask [] Remarks If set, will override the IMixedRealityInputSystem 's default raycasting layer mask array. Examples Allow the pointer to hit SR, but first prioritize any DefaultRaycastLayers (potentially behind SR) int sr = LayerMask.GetMask(\"SR\"); int nonSR = Physics.DefaultRaycastLayers &amp; ~sr; IMixedRealityPointer.PrioritizedLayerMasksOverride = new LayerMask[] { nonSR, sr }; RaycastMode The physics raycast mode to use. Declaration RaycastMode RaycastMode { get; set; } Property Value Type Description RaycastMode Rays The raycast rays. Declaration RayStep[] Rays { get; } Property Value Type Description RayStep [] RayStabilizer Ray stabilizer used when calculating position of pointer end point. Declaration IBaseRayStabilizer RayStabilizer { get; set; } Property Value Type Description IBaseRayStabilizer Result The physics raycast pointer result. Declaration IPointerResult Result { get; set; } Property Value Type Description IPointerResult SphereCastRadius The radius to use when RaycastMode is set to Sphere. Declaration float SphereCastRadius { get; set; } Property Value Type Description Single TeleportHotSpot The currently active teleport hotspot. Declaration IMixedRealityTeleportHotSpot TeleportHotSpot { get; set; } Property Value Type Description IMixedRealityTeleportHotSpot Methods OnPostRaycast() Called after all rays have casted. Declaration void OnPostRaycast() OnPreRaycast() Called before all rays have casted. Declaration void OnPreRaycast() TryGetPointerPosition(out Vector3) Returns the position of the input source, if available. Not all input sources support positional information, and those that do may not always have it available. Declaration bool TryGetPointerPosition(out Vector3 position) Parameters Type Name Description Vector3 position Out parameter filled with the position if available, otherwise . Returns Type Description Boolean True if a position was retrieved, false if not. TryGetPointerRotation(out Quaternion) Returns the rotation of the input source, if available. Not all input sources support rotation information, and those that do may not always have it available. Declaration bool TryGetPointerRotation(out Quaternion rotation) Parameters Type Name Description Quaternion rotation Out parameter filled with the rotation if available, otherwise . Returns Type Description Boolean True if an rotation was retrieved, false if not. TryGetPointingRay(out Ray) Returns the pointing ray of the input source, if available. Not all input sources support pointing information, and those that do may not always have it available. Declaration bool TryGetPointingRay(out Ray pointingRay) Parameters Type Name Description Ray pointingRay Out parameter filled with the pointing ray if available. Returns Type Description Boolean True if a pointing ray was retrieved, false if not."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.MixedRealityLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.MixedRealityLineRenderer.html",
    "title": "Class MixedRealityLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityLineRenderer Implements Unity's built in line renderer component, and applies the line data to it. Inheritance Object BaseMixedRealityLineRenderer MixedRealityLineRenderer Inherited Members BaseMixedRealityLineRenderer.lineDataSource BaseMixedRealityLineRenderer.LineDataSource BaseMixedRealityLineRenderer.LineColor BaseMixedRealityLineRenderer.LineWidth BaseMixedRealityLineRenderer.WidthMultiplier BaseMixedRealityLineRenderer.ColorOffset BaseMixedRealityLineRenderer.WidthOffset BaseMixedRealityLineRenderer.StepMode BaseMixedRealityLineRenderer.LineStepCount BaseMixedRealityLineRenderer.GetColor(Single) BaseMixedRealityLineRenderer.GetWidth(Single) Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers Assembly : cs.temp.dll.dll Syntax public class MixedRealityLineRenderer : BaseMixedRealityLineRenderer Properties LineMaterial Declaration public Material LineMaterial { get; set; } Property Value Type Description Material RoundedCaps Declaration public bool RoundedCaps { get; set; } Property Value Type Description Boolean RoundedEdges Declaration public bool RoundedEdges { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem.MixedRealityBoundaryVisualizationProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem.MixedRealityBoundaryVisualizationProfile.html",
    "title": "Class MixedRealityBoundaryVisualizationProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityBoundaryVisualizationProfile Configuration profile settings for setting up boundary visualizations. Inheritance Object BaseMixedRealityProfile MixedRealityBoundaryVisualizationProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem Assembly : cs.temp.dll.dll Syntax public class MixedRealityBoundaryVisualizationProfile : BaseMixedRealityProfile Properties BoundaryCeilingMaterial The material to use for displaying the boundary ceiling. Declaration public Material BoundaryCeilingMaterial { get; } Property Value Type Description Material BoundaryHeight The developer defined height of the boundary, in meters. Declaration public float BoundaryHeight { get; } Property Value Type Description Single Remarks The BoundaryHeight property is used to create a three dimensional volume for the play space. BoundaryWallMaterial The material to use for displaying the boundary geometry walls. Declaration public Material BoundaryWallMaterial { get; } Property Value Type Description Material BoundaryWallsPhysicsLayer The physics layer to assign to the generated boundary walls. Declaration public int BoundaryWallsPhysicsLayer { get; } Property Value Type Description Int32 CeilingPhysicsLayer The physics layer to assign to the generated boundary ceiling. Declaration public int CeilingPhysicsLayer { get; } Property Value Type Description Int32 FloorMaterial The material to use for the floor when created by the boundary system. Declaration public Material FloorMaterial { get; } Property Value Type Description Material FloorPhysicsLayer The physics layer to assign to the generated floor. Declaration public int FloorPhysicsLayer { get; } Property Value Type Description Int32 FloorScale The size at which to display the rectangular floor plane . Declaration public Vector2 FloorScale { get; } Property Value Type Description Vector2 PlayAreaMaterial The material to use for the rectangular play area . Declaration public Material PlayAreaMaterial { get; } Property Value Type Description Material PlayAreaPhysicsLayer The physics layer to assign to the generated play area. Declaration public int PlayAreaPhysicsLayer { get; } Property Value Type Description Int32 ShowBoundaryCeiling Should the boundary system display the boundary ceiling? Declaration public bool ShowBoundaryCeiling { get; } Property Value Type Description Boolean ShowBoundaryWalls Should the boundary system display the boundary geometry walls? Declaration public bool ShowBoundaryWalls { get; } Property Value Type Description Boolean ShowFloor Should the boundary system display the floor? Declaration public bool ShowFloor { get; } Property Value Type Description Boolean ShowPlayArea Should the boundary system display the play area? Declaration public bool ShowPlayArea { get; } Property Value Type Description Boolean ShowTrackedArea Should the boundary system display the tracked area? Declaration public bool ShowTrackedArea { get; } Property Value Type Description Boolean TrackedAreaMaterial The material to use for the boundary geometry . Declaration public Material TrackedAreaMaterial { get; } Property Value Type Description Material TrackedAreaPhysicsLayer The physics layer to assign to the generated tracked area. Declaration public int TrackedAreaPhysicsLayer { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.DeviceInputType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.DeviceInputType.html",
    "title": "Enum DeviceInputType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum DeviceInputType The InputType defines the types of input exposed by a controller. Denoting the available buttons / interactions that a controller supports. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public enum DeviceInputType Fields Name Description ButtonNearTouch ButtonPress ButtonTouch DirectionalPad Gaze GripPosition 3 DoF Grip with only position. GripRotation 3 Dof Grip with only rotation. Hand IndexFinger IndexFingerNearTouch IndexFingerPress IndexFingerTouch Menu MiddleFinger MiddleFingerNearTouch MiddleFingerPress MiddleFingerTouch None PinkyFinger PinkyFingerNearTouch PinkyFingerPress PinkyFingerTouch PointerClick PointerPosition 3 Dof Pointer with only position. PointerRotation 3 Dof Pointer with only rotation. RingFinger RingFingerNearTouch RingFingerPress RingFingerTouch Scroll Select SpatialGrip 6 DoF Grip with position and rotation. SpatialPointer 6 Dof Pointer with position and rotation. Start Thumb ThumbNearTouch ThumbPress ThumbStick ThumbStickNearTouch ThumbStickPress ThumbStickTouch ThumbTouch Touchpad TouchpadNearTouch TouchpadPress TouchpadTouch Trigger TriggerNearTouch TriggerPress TriggerTouch Voice"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityGestureHandler-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityGestureHandler-1.html",
    "title": "Interface IMixedRealityGestureHandler<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityGestureHandler<T> Interface to implement for generic gesture input. Inherited Members IMixedRealityGestureHandler.OnGestureStarted(InputEventData) IMixedRealityGestureHandler.OnGestureUpdated(InputEventData) IMixedRealityGestureHandler.OnGestureCompleted(InputEventData) IMixedRealityGestureHandler.OnGestureCanceled(InputEventData) Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityGestureHandler<T> : IMixedRealityGestureHandler, IEventSystemHandler Type Parameters Name Description T The type of data you want to listen for. Methods OnGestureCompleted(InputEventData<T>) Gesture Completed Event. Declaration void OnGestureCompleted(InputEventData<T> eventData) Parameters Type Name Description InputEventData <T> eventData Remarks The for the associated gesture data. OnGestureUpdated(InputEventData<T>) Gesture Updated Event. Declaration void OnGestureUpdated(InputEventData<T> eventData) Parameters Type Name Description InputEventData <T> eventData Remarks The for the associated gesture data."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers.IMixedRealitySpatialAwarenessMeshObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers.IMixedRealitySpatialAwarenessMeshObserver.html",
    "title": "Interface IMixedRealitySpatialAwarenessMeshObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessMeshObserver The interface for defining an IMixedRealitySpatialAwarenessObserver which provides mesh data. Inherited Members IMixedRealitySpatialAwarenessObserver.StartupBehavior IMixedRealitySpatialAwarenessObserver.DefaultPhysicsLayer IMixedRealitySpatialAwarenessObserver.IsRunning IMixedRealitySpatialAwarenessObserver.IsStationaryObserver IMixedRealitySpatialAwarenessObserver.ObserverVolumeType IMixedRealitySpatialAwarenessObserver.ObservationExtents IMixedRealitySpatialAwarenessObserver.ObserverRotation IMixedRealitySpatialAwarenessObserver.ObserverOrigin IMixedRealitySpatialAwarenessObserver.UpdateInterval IMixedRealitySpatialAwarenessObserver.Resume() IMixedRealitySpatialAwarenessObserver.Suspend() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessMeshObserver : IMixedRealitySpatialAwarenessObserver, IMixedRealityDataProvider, IMixedRealityExtensionService, IMixedRealityService, IDisposable, IMixedRealityEventSource Properties DisplayOption Gets or sets a value indicating how the mesh subsystem is to display surface meshes within the application. Declaration SpatialAwarenessMeshDisplayOptions DisplayOption { get; set; } Property Value Type Description SpatialAwarenessMeshDisplayOptions Remarks Applications that wish to process the es should set this value to None. LevelOfDetail Gets or sets the level of detail, as a MixedRealitySpatialAwarenessMeshLevelOfDetail value, for the returned spatial mesh. Setting this value to Custom, implies that the developer is specifying a custom value for MeshTrianglesPerCubicMeter. Declaration SpatialAwarenessMeshLevelOfDetail LevelOfDetail { get; set; } Property Value Type Description SpatialAwarenessMeshLevelOfDetail Remarks Specifying any other value will cause to be overwritten. Meshes Gets the collection of s being managed by the observer. Declaration IReadOnlyDictionary<int, SpatialAwarenessMeshObject> Meshes { get; } Property Value Type Description IReadOnlyDictionary < Int32 , SpatialAwarenessMeshObject > MeshPhysicsLayer Get or sets the desired Unity Physics Layer on which to set the spatial mesh. Declaration int MeshPhysicsLayer { get; set; } Property Value Type Description Int32 Remarks If not explicitly set, it is recommended that implementations return DefaultPhysicsLayer . MeshPhysicsLayerMask Gets the bit mask that corresponds to the value specified in MeshPhysicsLayer . Declaration int MeshPhysicsLayerMask { get; } Property Value Type Description Int32 OcclusionMaterial Gets or sets the to be used when spatial es should occlude other objects. Declaration Material OcclusionMaterial { get; set; } Property Value Type Description Material RecalculateNormals Indicates whether or not mesh normals should be recalculated by the observer. Declaration bool RecalculateNormals { get; set; } Property Value Type Description Boolean TrianglesPerCubicMeter Gets or sets the level of detail, in triangles per cubic meter, for the returned spatial mesh. Declaration int TrianglesPerCubicMeter { get; set; } Property Value Type Description Int32 Remarks When specifying Coarse or Fine for the , this value will be automatically overwritten with system default values. VisibleMaterial Gets or sets the to be used when displaying es. Declaration Material VisibleMaterial { get; set; } Property Value Type Description Material"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers.IMixedRealitySpatialAwarenessObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers.IMixedRealitySpatialAwarenessObserver.html",
    "title": "Interface IMixedRealitySpatialAwarenessObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessObserver Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessObserver : IMixedRealityDataProvider, IMixedRealityExtensionService, IMixedRealityService, IDisposable, IMixedRealityEventSource Properties DefaultPhysicsLayer Get or sets the default Unity Physics Layer on which to set the spatial object. Declaration int DefaultPhysicsLayer { get; } Property Value Type Description Int32 IsRunning Is the observer running (actively accumulating spatial data)? Declaration bool IsRunning { get; } Property Value Type Description Boolean IsStationaryObserver Should the observer remain stationary in the scene? Declaration bool IsStationaryObserver { get; set; } Property Value Type Description Boolean Remarks Set IsStationaryObserver to false to move the volume with the user. If set to true, the origin will be 0,0,0 or the last known location. ObservationExtents Gets or sets the extents( 1/2 size) of the volume, in meters per axis, from which individual observations will be made. Declaration Vector3 ObservationExtents { get; set; } Property Value Type Description Vector3 Remarks When used when ObserverVolumeType is set to the X value of the extents will be used as the radius. ObserverOrigin Gets or sets the origin of the observer. Declaration Vector3 ObserverOrigin { get; set; } Property Value Type Description Vector3 Remarks Moving the observer origin allows the spatial awareness system to locate and discard meshes as the user navigates the environment. ObserverRotation Gets or sets the orientation of the volume. Declaration Quaternion ObserverRotation { get; set; } Property Value Type Description Quaternion ObserverVolumeType Gets or sets the type of volume the observer should operate in. Declaration VolumeType ObserverVolumeType { get; set; } Property Value Type Description VolumeType StartupBehavior Indicates the developer's intended startup behavior. Declaration AutoStartBehavior StartupBehavior { get; set; } Property Value Type Description AutoStartBehavior UpdateInterval Gets or sets the frequency, in seconds, at which the spatial observer should update. Declaration float UpdateInterval { get; set; } Property Value Type Description Single Methods Resume() Start | resume the observer. Declaration void Resume() Suspend() Stop | pause the observer Declaration void Suspend()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.BuildInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.BuildInfo.html",
    "title": "Class BuildInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class BuildInfo Inheritance Object BuildInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Build Assembly : cs.temp.dll.dll Syntax public class BuildInfo Constructors BuildInfo() Declaration public BuildInfo() Properties BuildAppx Declaration public bool BuildAppx { get; } Property Value Type Description Boolean BuildOptions Declaration public BuildOptions BuildOptions { get; set; } Property Value Type Description BuildOptions BuildPlatform Declaration public string BuildPlatform { get; set; } Property Value Type Description String BuildSymbols Declaration public string BuildSymbols { get; } Property Value Type Description String BuildTarget Declaration public BuildTarget BuildTarget { get; set; } Property Value Type Description BuildTarget ColorSpace Declaration public ColorSpace? ColorSpace { get; set; } Property Value Type Description Nullable < ColorSpace > Configuration Declaration public string Configuration { get; } Property Value Type Description String CopyDirectories Declaration public IEnumerable<CopyDirectoryInfo> CopyDirectories { get; set; } Property Value Type Description IEnumerable < CopyDirectoryInfo > IsCommandLine Declaration public bool IsCommandLine { get; set; } Property Value Type Description Boolean OutputDirectory Declaration public string OutputDirectory { get; set; } Property Value Type Description String PostBuildAction Declaration public Action<BuildInfo, BuildReport> PostBuildAction { get; set; } Property Value Type Description Action < BuildInfo , BuildReport > PreBuildAction Declaration public Action<BuildInfo> PreBuildAction { get; set; } Property Value Type Description Action < BuildInfo > Scenes Declaration public IEnumerable<string> Scenes { get; set; } Property Value Type Description IEnumerable < String > WSAGenerateReferenceProjects Declaration public bool? WSAGenerateReferenceProjects { get; set; } Property Value Type Description Nullable < Boolean > WSASdk Declaration public WSASDK? WSASdk { get; set; } Property Value Type Description Nullable < WSASDK > WSAUWPBuildType Declaration public WSAUWPBuildType? WSAUWPBuildType { get; set; } Property Value Type Description Nullable < WSAUWPBuildType > WSAUwpSdk Declaration public string WSAUwpSdk { get; set; } Property Value Type Description String Methods AppendSymbols(IEnumerable<String>) Declaration public void AppendSymbols(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable < String > symbols AppendSymbols(String[]) Declaration public void AppendSymbols(params string[] symbol) Parameters Type Name Description String [] symbol HasAnySymbols(IEnumerable<String>) Declaration public bool HasAnySymbols(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable < String > symbols Returns Type Description Boolean HasAnySymbols(String[]) Declaration public bool HasAnySymbols(params string[] symbols) Parameters Type Name Description String [] symbols Returns Type Description Boolean HasConfigurationSymbol() Declaration public bool HasConfigurationSymbol() Returns Type Description Boolean RemoveConfigurationSymbols(String) Declaration public static IEnumerable<string> RemoveConfigurationSymbols(string symbols) Parameters Type Name Description String symbols Returns Type Description IEnumerable < String >"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.AnimationCurveExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.AnimationCurveExtensions.html",
    "title": "Class AnimationCurveExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class AnimationCurveExtensions Extension methods for Unity's AnimationCurve class Inheritance Object AnimationCurveExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class AnimationCurveExtensions Methods Duration(AnimationCurve) Returns the absolute duration of the curve from first to last key frame Declaration public static float Duration(this AnimationCurve curve) Parameters Type Name Description AnimationCurve curve The animation curve to check duration of. Returns Type Description Single Returns 0 if the curve is null or has less than 1 frame, otherwise returns time difference between first and last frame."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.ArrayExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ArrayExtensions Array type method extensions. Inheritance Object ArrayExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class ArrayExtensions Methods WrapIndex(Array, Int32) Wraps the index around to the beginning of the array if the provided index is longer than the array. Declaration public static int WrapIndex(this Array array, int index) Parameters Type Name Description Array array The array to wrap the index around. Int32 index The index to look for. Returns Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.EnumFlagsAttributeDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.EnumFlagsAttributeDrawer.html",
    "title": "Class EnumFlagsAttributeDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class EnumFlagsAttributeDrawer Renders enum flags on fields with the attribute. From https://answers.unity.com/questions/486694/default-editor-enum-as-flags-.html Inheritance Object EnumFlagsAttributeDrawer Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class EnumFlagsAttributeDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.PivotAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.PivotAxis.html",
    "title": "Enum PivotAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PivotAxis Rotational Pivot axis for orientating an object Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum PivotAxis Fields Name Description Free X XY XZ Y YZ Z"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.IMixedRealityService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.IMixedRealityService.html",
    "title": "Interface IMixedRealityService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityService Generic interface for all Mixed Reality Services Inherited Members IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityService : IDisposable Properties Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration string Name { get; } Property Value Type Description String Priority Optional Priority to reorder registered managers based on their respective priority, reduces the risk of race conditions by prioritizing the order in which managers are evaluated. Declaration uint Priority { get; } Property Value Type Description UInt32 Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration void Destroy() Disable() Optional Disable function to pause the service. Declaration void Disable() Enable() Optional Enable function to enable / re-enable the service. Declaration void Enable() Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration void Initialize() Reset() Optional Reset function to perform that will Reset the service, for example, whenever there is a profile change. Declaration void Reset() Update() Optional Update function to perform per-frame updates of the service. Declaration void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.BaseMixedRealityLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.BaseMixedRealityLineRenderer.html",
    "title": "Class BaseMixedRealityLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityLineRenderer Base class for Mixed Reality Line Renderers. Inheritance Object BaseMixedRealityLineRenderer MeshLineRenderer MixedRealityLineRenderer ParticleSystemLineRenderer StripMeshLineRenderer Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityLineRenderer : MonoBehaviour Fields lineDataSource Declaration protected BaseMixedRealityLineDataProvider lineDataSource Field Value Type Description BaseMixedRealityLineDataProvider Properties ColorOffset Normalized offset for color gradient Declaration public float ColorOffset { get; set; } Property Value Type Description Single LineColor Color gradient applied to line's normalized length Declaration public Gradient LineColor { get; set; } Property Value Type Description Gradient LineDataSource The line data this component will render Declaration public BaseMixedRealityLineDataProvider LineDataSource { get; set; } Property Value Type Description BaseMixedRealityLineDataProvider LineStepCount Number of steps to interpolate along line in Interpolated step mode Declaration public int LineStepCount { get; set; } Property Value Type Description Int32 LineWidth Declaration public AnimationCurve LineWidth { get; set; } Property Value Type Description AnimationCurve StepMode Method for gathering points along line. Interpolated uses normalized length. FromSource uses line's base points. (FromSource may not look right for all LineDataProvider types.) Declaration public StepMode StepMode { get; set; } Property Value Type Description StepMode WidthMultiplier Declaration public float WidthMultiplier { get; set; } Property Value Type Description Single WidthOffset Normalized offset for width curve Declaration public float WidthOffset { get; set; } Property Value Type Description Single Methods GetColor(Single) Get the along the normalized length of the line. Declaration protected virtual Color GetColor(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Color GetWidth(Single) Get the width of the line along the normalized length of the line. Declaration protected virtual float GetWidth(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities Classes CalibrationSpace Sets global shader variables relating to calibration space transforms CameraCache The purpose of this class is to provide a cached reference to the main camera. Calling Camera.main executes a FindByTag on the scene, which will get worse and worse with more tagged objects. CanvasUtility Helper class for setting up canvases for use in the MRTK. ClippingBox Component to animate and visualize a box that can be used with per pixel based clipping. ClippingPlane Component to animate and visualize a plane that can be used with per pixel based clipping. ClippingPrimitive An abstract primitive component to animate and visualize a clipping primitive that can be used to drive per pixel based clipping. ClippingSphere Component to animate and visualize a sphere that can be used with per pixel based clipping. DebugUtilities EdgeUtilities The EdgeUtilities class provides functionality for working with objects. FastSimplexNoise A conglomeration of open-source simplex libraries in C# with an emphasis on performance HoverLight Utility component to animate and visualize a light that can be used with the \"MixedRealityToolkit/Standard\" shader \"_HoverLight\" feature. MathUtilities Math Utilities class. PlatformUtility WindowsApiChecker Helper class for determining if a Windows API contract is available. See https://docs.microsoft.com/en-us/uwp/extension-sdks/windows-universal-sdk for a full list of contracts. Enums ClippingPrimitive.Side"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityDeviceManager.html",
    "title": "Interface IMixedRealityDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDeviceManager Mixed Reality Toolkit device definition, used to instantiate and manage a specific device / SDK Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDeviceManager : IMixedRealityService, IDisposable Methods GetActiveControllers() Retrieve all controllers currently registered with this device at runtime (if direct access is required) Declaration IMixedRealityController[] GetActiveControllers() Returns Type Description IMixedRealityController []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealitySpeechHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealitySpeechHandler.html",
    "title": "Interface IMixedRealitySpeechHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpeechHandler Interface to implement to react to speech recognition. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpeechHandler : IEventSystemHandler Methods OnSpeechKeywordRecognized(SpeechEventData) Declaration void OnSpeechKeywordRecognized(SpeechEventData eventData) Parameters Type Name Description SpeechEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Classes SystemType Reference to a class Type with support for Unity serialization. Structs AnimatorParameter A copy of the because that class is not Serializable and cannot be modified in the editor. MixedRealityPose ProcessResult Result from a completed asynchronous process. QuaternionSmoothed Vector3Smoothed Enums AutoStartBehavior This enumeration identifies two different ways to handle the startup behavior for a feature. Both will warm up the component, ready for it's use (e.g. connecting backend services or registering for events. The first causes the feature to start immediately. The second allows the feature to be manually started at a later time. AxisType The AxisType identifies the type of button or input being sent to the framework from a controller. This is mainly information only or for advanced users to understand the input coming directly from the controller. CollationOrder Collation order type used for sorting CreateProfileMenuItemIndices Defines the display order of the Assets > Create > Mixed Reality Toolkit > Profiles menu items. ExperienceScale The ExperienceScale identifies the environment for which the experience is designed. Handedness The Handedness defines which hand a controller is currently operating in. It is up to the developer to determine whether this affects the use of a controller or not. \"Other\" defines potential controllers that will offer a \"third\" hand, e.g. a full body tracking suit. MovementConstraintType OrientationType Orientation type enum PivotAxis Rotational Pivot axis for orientating an object RadialViewReferenceDirection Which direction to orient the radial view object. RecognitionConfidenceLevel Indicates the confidence level of a recognized event. RotationConstraintType ScaleState SolverOrientationType SupportedPlatforms The supported platforms for Mixed Reality Toolkit Components and Features. TrackedObjectType TypeGrouping Indicates how selectable classes should be collated in drop-down menu. VolumeType todo"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.SourceStateEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.SourceStateEventData.html",
    "title": "Class SourceStateEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class SourceStateEventData Describes an source state event that has a source id. Source State events do not have an associated MixedRealityInputAction . Inheritance Object BaseInputEventData SourceStateEventData SourcePoseEventData<T> Inherited Members BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class SourceStateEventData : BaseInputEventData Constructors SourceStateEventData(EventSystem) Constructor. Declaration public SourceStateEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties Controller Declaration public IMixedRealityController Controller { get; } Property Value Type Description IMixedRealityController Methods Initialize(IMixedRealityInputSource, IMixedRealityController) Populates the event with data. Declaration public void Initialize(IMixedRealityInputSource inputSource, IMixedRealityController controller) Parameters Type Name Description IMixedRealityInputSource inputSource IMixedRealityController controller"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.SpeechEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.SpeechEventData.html",
    "title": "Class SpeechEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechEventData Describes an input event that involves keyword recognition. Inheritance Object BaseInputEventData SpeechEventData Inherited Members BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class SpeechEventData : BaseInputEventData Constructors SpeechEventData(EventSystem) Constructor. Declaration public SpeechEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties Confidence A measure of correct recognition certainty. Declaration public RecognitionConfidenceLevel Confidence { get; } Property Value Type Description RecognitionConfidenceLevel PhraseDuration The time it took for the phrase to be uttered. Declaration public TimeSpan PhraseDuration { get; } Property Value Type Description TimeSpan PhraseStartTime The moment in time when uttering of the phrase began. Declaration public DateTime PhraseStartTime { get; } Property Value Type Description DateTime RecognizedText The text that was recognized. Declaration public string RecognizedText { get; } Property Value Type Description String Methods Initialize(IMixedRealityInputSource, MixedRealityInputAction, RecognitionConfidenceLevel, TimeSpan, DateTime, String) Populates the event with data. Declaration public void Initialize(IMixedRealityInputSource inputSource, MixedRealityInputAction inputAction, RecognitionConfidenceLevel confidence, TimeSpan phraseDuration, DateTime phraseStartTime, string recognizedText) Parameters Type Name Description IMixedRealityInputSource inputSource MixedRealityInputAction inputAction RecognitionConfidenceLevel confidence TimeSpan phraseDuration DateTime phraseStartTime String recognizedText"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.LayerExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.LayerExtensions.html",
    "title": "Class LayerExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class LayerExtensions Extension methods for Unity's LayerMask struct Inheritance Object LayerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class LayerExtensions Fields InvalidLayerId The Invalid Layer Id. Declaration public const int InvalidLayerId = -1 Field Value Type Description Int32 Methods Combine(LayerMask[]) Combines provided layers into a single layer mask. Declaration public static int Combine(this LayerMask[] layerMaskList) Parameters Type Name Description LayerMask [] layerMaskList Returns Type Description Int32 The combined layer mask FindLayerListIndex(Int32, LayerMask[]) Look through the layerMaskList and find the index in that list for which the supplied layer is part of Declaration public static int FindLayerListIndex(this int layer, LayerMask[] layerMasks) Parameters Type Name Description Int32 layer Layer to search for LayerMask [] layerMasks List of LayerMasks to search Returns Type Description Int32 LayerMaskList index, or -1 for not found GetLayerId(ref Int32, String) Gets a valid layer id using the layer name. Declaration public static int GetLayerId(ref int cache, string layerName) Parameters Type Name Description Int32 cache The cached layer id. String layerName The name of the layer to look for if the is unset. Returns Type Description Int32 The layer id. IsInLayerMask(Int32, Int32) Checks whether a layer is in a layer mask Declaration public static bool IsInLayerMask(this int layer, int layerMask) Parameters Type Name Description Int32 layer Int32 layerMask Returns Type Description Boolean True if the layer mask contains the layer ToMask(Int32) Transform layer id to Declaration public static LayerMask ToMask(int layerId) Parameters Type Name Description Int32 layerId Returns Type Description LayerMask"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.MathExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.MathExtensions.html",
    "title": "Class MathExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class MathExtensions Extension methods and helper functions for various math data Inheritance Object MathExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class MathExtensions Methods ClampComponentWise(Vector3, Vector3, Vector3) Declaration public static Vector3 ClampComponentWise(Vector3 value, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 value Vector3 min Vector3 max Returns Type Description Vector3 CubicToLinearIndex(Vector3Int, Vector3Int) Declaration public static int CubicToLinearIndex(Vector3Int ndx, Vector3Int size) Parameters Type Name Description Vector3Int ndx Vector3Int size Returns Type Description Int32 LinearToCubicIndex(Int32, Vector3Int) Declaration public static Vector3Int LinearToCubicIndex(int linearIndex, Vector3Int size) Parameters Type Name Description Int32 linearIndex Vector3Int size Returns Type Description Vector3Int MostSignificantBit(Int32) Declaration public static int MostSignificantBit(this int x) Parameters Type Name Description Int32 x Returns Type Description Int32 PowerOfTwoGreaterThanOrEqualTo(Int32) Declaration public static int PowerOfTwoGreaterThanOrEqualTo(this int v) Parameters Type Name Description Int32 v Returns Type Description Int32 PowerOfTwoGreaterThanOrEqualTo(Vector3Int) Declaration public static Vector3Int PowerOfTwoGreaterThanOrEqualTo(this Vector3Int v) Parameters Type Name Description Vector3Int v Returns Type Description Vector3Int ResetIfGreaterThan(Int32, Int32) Sets the value to zero if greater than the specified amount. Declaration public static int ResetIfGreaterThan(this int value, int amount) Parameters Type Name Description Int32 value Int32 amount Returns Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityCameraProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityCameraProfileInspector.html",
    "title": "Class MixedRealityCameraProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityCameraProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityCameraProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityCameraProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Classes ActivePowerSchemeInfo AdapterInfo ApplicationInfo AvailableWiFiNetworks BatteryInfo DeviceInfo DeviceOsInfo DevicePortalConnections DHCPInfo FileList InstalledApps InstallStatus InterfaceInfo IpAddressInfo IpConfigInfo MachineName NetworkInterfaces NetworkProfileInfo PowerStateInfo ProcessInfo ProcessList WirelessNetworkInfo Structs FileInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DevicePortal.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DevicePortal.html",
    "title": "Class DevicePortal | Mixed Reality Toolkit Documentation",
    "keywords": "Class DevicePortal Function used to communicate with Windows 10 devices through the device portal REST APIs. Inheritance Object DevicePortal Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public static class DevicePortal Methods ConnectToWiFiNetworkAsync(DeviceInfo, InterfaceInfo, WirelessNetworkInfo, String) Connects to the specified WiFi Network. Declaration public static Task<Response> ConnectToWiFiNetworkAsync(DeviceInfo targetDevice, InterfaceInfo interfaceInfo, WirelessNetworkInfo wifiNetwork, string password) Parameters Type Name Description DeviceInfo targetDevice InterfaceInfo interfaceInfo The interface to use to connect. WirelessNetworkInfo wifiNetwork The network to connect to. String password Password for network access. Returns Type Description Task < Response > True, if connection successful. DownloadLogFileAsync(String, DeviceInfo, ApplicationInfo) Downloads and launches the Log file for the target application on the target device. Declaration public static Task<string> DownloadLogFileAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached . Returns Type Description Task < String > The path of the downloaded log file. EnsureAuthenticationAsync(DeviceInfo) Makes sure the Authentication Headers and CSRF Tokens are set. Declaration public static Task<bool> EnsureAuthenticationAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < Boolean > True if Authentication is successful, otherwise false. FinalizeUrl(String) This Utility method finalizes the URL and formats the HTTPS string if needed. Local Machine will be changed to 127.0.1:10080 for HoloLens connections. Declaration public static string FinalizeUrl(string targetUrl) Parameters Type Name Description String targetUrl The target URL i.e. 128.128.128.128 Returns Type Description String The finalized URL with http/https prefix. GetAllInstalledAppsAsync(DeviceInfo) Declaration public static Task<InstalledApps> GetAllInstalledAppsAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < InstalledApps > GetAvailableWiFiNetworksAsync(DeviceInfo, InterfaceInfo) Gets the of the target device. Declaration public static Task<AvailableWiFiNetworks> GetAvailableWiFiNetworksAsync(DeviceInfo targetDevice, InterfaceInfo interfaceInfo) Parameters Type Name Description DeviceInfo targetDevice InterfaceInfo interfaceInfo The GUID for the network interface to use to search for wireless networks, without brackets. Returns Type Description Task < AvailableWiFiNetworks > GetBatteryStateAsync(DeviceInfo) Gets the of the target device. Declaration public static Task<BatteryInfo> GetBatteryStateAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < BatteryInfo > GetDeviceOsInfoAsync(DeviceInfo) Gets the of the target device. Declaration public static Task<DeviceOsInfo> GetDeviceOsInfoAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < DeviceOsInfo > GetIpConfigInfoAsync(DeviceInfo) Gets the of the target device. Declaration public static Task<IpConfigInfo> GetIpConfigInfoAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < IpConfigInfo > GetMachineNameAsync(DeviceInfo) Gets the of the target device. Declaration public static Task<MachineName> GetMachineNameAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < MachineName > GetPowerStateAsync(DeviceInfo) Gets the of the target device. Declaration public static Task<PowerStateInfo> GetPowerStateAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < PowerStateInfo > GetWiFiNetworkInterfacesAsync(DeviceInfo) Gets the of the target device. Declaration public static Task<NetworkInterfaces> GetWiFiNetworkInterfacesAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < NetworkInterfaces > InstallAppAsync(String, DeviceInfo, Boolean) Installs the target application on the target device. Declaration public static Task<bool> InstallAppAsync(string appFullPath, DeviceInfo targetDevice, bool waitForDone = true) Parameters Type Name Description String appFullPath DeviceInfo targetDevice Boolean waitForDone Should the thread wait until installation is complete? Returns Type Description Task < Boolean > True, if Installation was a success. IsAppInstalledAsync(String, DeviceInfo) Determines if the target application is currently running on the target device. Declaration public static Task<bool> IsAppInstalledAsync(string packageName, DeviceInfo targetDevice) Parameters Type Name Description String packageName DeviceInfo targetDevice Returns Type Description Task < Boolean > True, if application is currently installed on device. IsAppRunningAsync(String, DeviceInfo, ApplicationInfo) Determines if the target application is running on the target device. Declaration public static Task<bool> IsAppRunningAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached . Returns Type Description Task < Boolean > True, if the application is running. LaunchAppAsync(String, DeviceInfo, ApplicationInfo) Launches the target application on the target device. Declaration public static Task<bool> LaunchAppAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached . Returns Type Description Task < Boolean > True, if application was successfully launched and is currently running on the target device. OpenWebPortal(DeviceInfo) Opens the Device Portal for the target device. Declaration public static void OpenWebPortal(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice RefreshCsrfTokenAsync(DeviceInfo) Refreshes the CSRF Token in case the device or it's portal was restarted. Declaration public static Task<bool> RefreshCsrfTokenAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < Boolean > True, if refresh was successful. RestartAsync(DeviceInfo) Restart the target device. Declaration public static Task<bool> RestartAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < Boolean > True, if the device has successfully restarted. ShutdownAsync(DeviceInfo) Shuts down the target device. Declaration public static Task<bool> ShutdownAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < Boolean > True, if the device is shitting down. StopAppAsync(String, DeviceInfo, ApplicationInfo) Stops the target application on the target device. Declaration public static Task<bool> StopAppAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached . Returns Type Description Task < Boolean > true, if application was successfully stopped. UninstallAppAsync(String, DeviceInfo, ApplicationInfo) Uninstalls the target application on the target device Declaration public static Task<bool> UninstallAppAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached . Returns Type Description Task < Boolean > True, if uninstall was a success."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal Classes DevicePortal Function used to communicate with Windows 10 devices through the device portal REST APIs."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.ExtendsAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.ExtendsAttribute.html",
    "title": "Class ExtendsAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class ExtendsAttribute Constraint that allows selection of classes that extend a specific class when selecting a with the Unity inspector. Inheritance Object SystemTypeAttribute ExtendsAttribute Inherited Members SystemTypeAttribute.Grouping SystemTypeAttribute.AllowAbstract Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax public sealed class ExtendsAttribute : SystemTypeAttribute Constructors ExtendsAttribute(Type, TypeGrouping) Initializes a new instance of the ExtendsAttribute class. Declaration public ExtendsAttribute(Type baseType, TypeGrouping grouping) Parameters Type Name Description Type baseType Type of class that selectable classes must derive from. TypeGrouping grouping Gets or sets grouping of selectable classes. Defaults to unless explicitly specified. Properties BaseType Gets the type of class that selectable classes must derive from. Declaration public Type BaseType { get; } Property Value Type Description Type Methods IsConstraintSatisfied(Type) Determines whether the specified Type satisfies filter constraint. Declaration public override bool IsConstraintSatisfied(Type type) Parameters Type Name Description Type type Type to test. Returns Type Description Boolean A Boolean value indicating if the type specified by type satisfies this constraint and should thus be selectable. Overrides SystemTypeAttribute.IsConstraintSatisfied(Type)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Diagnostics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Diagnostics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Diagnostics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Diagnostics Classes MixedRealityDiagnosticsProfile Configuration profile settings for setting up diagnostics."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityGestureMapping.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityGestureMapping.html",
    "title": "Struct MixedRealityGestureMapping | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityGestureMapping Data structure for mapping gestures to MixedRealityInputAction s that can be raised by the Input System. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MixedRealityGestureMapping Constructors MixedRealityGestureMapping(String, GestureInputType, MixedRealityInputAction) Constructor. Declaration public MixedRealityGestureMapping(string description, GestureInputType gestureType, MixedRealityInputAction action) Parameters Type Name Description String description GestureInputType gestureType MixedRealityInputAction action Properties Action Action for the associated gesture. Declaration public MixedRealityInputAction Action { get; } Property Value Type Description MixedRealityInputAction Description Simple, human readable description of the gesture. Declaration public string Description { get; } Property Value Type Description String GestureType Type of Gesture. Declaration public GestureInputType GestureType { get; } Property Value Type Description GestureInputType"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.WindowsGestureSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.WindowsGestureSettings.html",
    "title": "Enum WindowsGestureSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Enum WindowsGestureSettings Copy of Unity's Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Flags] public enum WindowsGestureSettings Fields Name Description DoubleTap Enable support for the double-tap gesture. Hold Enable support for the hold gesture. ManipulationTranslate Enable support for the manipulation gesture which tracks changes to the hand's position. This gesture is relative to the start position of the gesture and measures an absolute movement through the world. NavigationRailsX Enable support for the navigation gesture, in the horizontal axis using rails (guides). NavigationRailsY Enable support for the navigation gesture, in the vertical axis using rails (guides). NavigationRailsZ Enable support for the navigation gesture, in the depth axis using rails (guides). NavigationX Enable support for the navigation gesture, in the horizontal axis. NavigationY Enable support for the navigation gesture, in the vertical axis. NavigationZ Enable support for the navigation gesture, in the depth axis. Tap Enable support for the tap gesture."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.SystemTypeAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.SystemTypeAttribute.html",
    "title": "Class SystemTypeAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class SystemTypeAttribute Base class for class selection constraints that can be applied when selecting a with the Unity inspector. Inheritance Object SystemTypeAttribute ExtendsAttribute ImplementsAttribute Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax public abstract class SystemTypeAttribute : PropertyAttribute Constructors SystemTypeAttribute(Type, TypeGrouping) Declaration public SystemTypeAttribute(Type type, TypeGrouping grouping = null) Parameters Type Name Description Type type Initializes a new instance of the SystemTypeAttribute class. TypeGrouping grouping Gets or sets grouping of selectable classes. Defaults to unless explicitly specified. Properties AllowAbstract Gets or sets whether abstract classes can be selected from drop-down. Defaults to a value of false unless explicitly specified. Declaration public bool AllowAbstract { get; protected set; } Property Value Type Description Boolean Grouping Gets or sets grouping of selectable classes. Defaults to unless explicitly specified. Declaration public TypeGrouping Grouping { get; protected set; } Property Value Type Description TypeGrouping Methods IsConstraintSatisfied(Type) Determines whether the specified Type satisfies filter constraint. Declaration public virtual bool IsConstraintSatisfied(Type type) Parameters Type Name Description Type type Type to test. Returns Type Description Boolean A Boolean value indicating if the type specified by type satisfies this constraint and should thus be selectable."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityInputSystemProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityInputSystemProfile.html",
    "title": "Class MixedRealityInputSystemProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputSystemProfile Configuration profile settings for setting up controller pointers. Inheritance Object BaseMixedRealityProfile MixedRealityInputSystemProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputSystemProfile : BaseMixedRealityProfile Properties ControllerMappingProfile Active profile for controller mapping configuration Declaration public MixedRealityControllerMappingProfile ControllerMappingProfile { get; } Property Value Type Description MixedRealityControllerMappingProfile ControllerVisualizationProfile Device profile for rendering spatial controllers. Declaration public MixedRealityControllerVisualizationProfile ControllerVisualizationProfile { get; } Property Value Type Description MixedRealityControllerVisualizationProfile DictationSystem Current Registered Dictation System. Declaration public IMixedRealityDictationSystem DictationSystem { get; } Property Value Type Description IMixedRealityDictationSystem FocusProviderType The focus provider service concrete type to use when raycasting. Declaration public SystemType FocusProviderType { get; } Property Value Type Description SystemType GesturesProfile Gesture Mapping Profile for recognizing gestures across all platforms. Declaration public MixedRealityGesturesProfile GesturesProfile { get; } Property Value Type Description MixedRealityGesturesProfile InputActionRulesProfile Input Action Rules Profile for raising actions based on specific criteria. Declaration public MixedRealityInputActionRulesProfile InputActionRulesProfile { get; } Property Value Type Description MixedRealityInputActionRulesProfile InputActionsProfile Input System Action Mapping profile for wiring up Controller input to Actions. Declaration public MixedRealityInputActionsProfile InputActionsProfile { get; } Property Value Type Description MixedRealityInputActionsProfile IsControllerMappingEnabled Enable and configure the devices for your application. Declaration public bool IsControllerMappingEnabled { get; } Property Value Type Description Boolean IsDictationEnabled Is Dictation Enabled? Declaration public bool IsDictationEnabled { get; } Property Value Type Description Boolean IsSpeechCommandsEnabled Is the speech Commands Enabled? Declaration public bool IsSpeechCommandsEnabled { get; } Property Value Type Description Boolean PointerProfile Pointer configuration options Declaration public MixedRealityPointerProfile PointerProfile { get; } Property Value Type Description MixedRealityPointerProfile SpeechCommandsProfile Speech commands profile for configured speech commands, for use by the speech recognition system Declaration public MixedRealitySpeechCommandsProfile SpeechCommandsProfile { get; } Property Value Type Description MixedRealitySpeechCommandsProfile SpeechSystem Current Registered Speech System. Declaration public IMixedRealitySpeechSystem SpeechSystem { get; } Property Value Type Description IMixedRealitySpeechSystem"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.HoverLightInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.HoverLightInspector.html",
    "title": "Class HoverLightInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class HoverLightInspector Inheritance Object HoverLightInspector Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class HoverLightInspector : Editor"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Text3DShaderGUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Text3DShaderGUI.html",
    "title": "Class Text3DShaderGUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class Text3DShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/TextShader3D\". Inheritance Object Text3DShaderGUI Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class Text3DShaderGUI : ShaderGUI Fields cullMode Declaration protected MaterialProperty cullMode Field Value Type Description MaterialProperty firstTimeApply Declaration protected bool firstTimeApply Field Value Type Description Boolean Methods OnGUI(MaterialEditor, MaterialProperty[]) Declaration public override void OnGUI(MaterialEditor matEditor, MaterialProperty[] props) Parameters Type Name Description MaterialEditor matEditor MaterialProperty [] props"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.CanvasEditorExtension.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.CanvasEditorExtension.html",
    "title": "Class CanvasEditorExtension | Mixed Reality Toolkit Documentation",
    "keywords": "Class CanvasEditorExtension Helper class to assign the UIRaycastCamera when creating a new canvas object and assigning the world space render mode. Inheritance Object CanvasEditorExtension Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities Assembly : cs.temp.dll.dll Syntax public class CanvasEditorExtension : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityMousePointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityMousePointer.html",
    "title": "Interface IMixedRealityMousePointer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityMousePointer Interface for handling mouse pointers. Inherited Members IMixedRealityPointer.Controller IMixedRealityPointer.PointerId IMixedRealityPointer.PointerName IMixedRealityPointer.InputSourceParent IMixedRealityPointer.BaseCursor IMixedRealityPointer.CursorModifier IMixedRealityPointer.TeleportHotSpot IMixedRealityPointer.IsInteractionEnabled IMixedRealityPointer.IsFocusLocked IMixedRealityPointer.PointerExtent IMixedRealityPointer.Rays IMixedRealityPointer.PrioritizedLayerMasksOverride IMixedRealityPointer.FocusTarget IMixedRealityPointer.Result IMixedRealityPointer.RayStabilizer IMixedRealityPointer.RaycastMode IMixedRealityPointer.SphereCastRadius IMixedRealityPointer.PointerOrientation IMixedRealityPointer.OnPreRaycast() IMixedRealityPointer.OnPostRaycast() IMixedRealityPointer.TryGetPointerPosition(Vector3) IMixedRealityPointer.TryGetPointingRay(Ray) IMixedRealityPointer.TryGetPointerRotation(Quaternion) Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityMousePointer : IMixedRealityPointer, IEqualityComparer Properties HideCursorWhenInactive Should the mouse cursor be hidden when no active input is received? Declaration bool HideCursorWhenInactive { get; } Property Value Type Description Boolean HideTimeout How long should it take before the mouse cursor is hidden? Declaration float HideTimeout { get; } Property Value Type Description Single MovementThresholdToUnHide What is the movement threshold to reach before un-hiding mouse cursor? Declaration float MovementThresholdToUnHide { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.GenericJoystickController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.GenericJoystickController.html",
    "title": "Class GenericJoystickController | Mixed Reality Toolkit Documentation",
    "keywords": "Class GenericJoystickController Inheritance Object BaseController GenericJoystickController XboxController Inherited Members BaseController.DefaultInteractions BaseController.DefaultLeftHandedInteractions BaseController.DefaultRightHandedInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) Namespace : Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput Assembly : cs.temp.dll.dll Syntax public class GenericJoystickController : BaseController Constructors GenericJoystickController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Declaration public GenericJoystickController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Fields CurrentControllerPose Declaration protected MixedRealityPose CurrentControllerPose Field Value Type Description MixedRealityPose CurrentControllerPosition Declaration protected Vector3 CurrentControllerPosition Field Value Type Description Vector3 CurrentControllerRotation Declaration protected Quaternion CurrentControllerRotation Field Value Type Description Quaternion LastControllerPose Declaration protected MixedRealityPose LastControllerPose Field Value Type Description MixedRealityPose Properties PointerOffsetAngle The pointer's offset angle. Declaration public float PointerOffsetAngle { get; protected set; } Property Value Type Description Single Methods SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides BaseController.SetupDefaultInteractions(Handedness) UpdateButtonData(MixedRealityInteractionMapping) Update an Interaction Bool data type from a Bool input Declaration protected void UpdateButtonData(MixedRealityInteractionMapping interactionMapping) Parameters Type Name Description MixedRealityInteractionMapping interactionMapping Remarks Raises an Input System \"Input Down\" event when the key is down, and raises an \"Input Up\" when it is released (e.g. a Button) Also raises a \"Pressed\" event while pressed UpdateController() Update the controller data from Unity's Input Manager Declaration public virtual void UpdateController() UpdateDualAxisData(MixedRealityInteractionMapping) Update the Touchpad / Thumbstick input from the device (in OpenVR, touchpad and thumbstick are the same input control) Declaration protected void UpdateDualAxisData(MixedRealityInteractionMapping interactionMapping) Parameters Type Name Description MixedRealityInteractionMapping interactionMapping UpdatePoseData(MixedRealityInteractionMapping) Update Spatial Pointer Data. Declaration protected void UpdatePoseData(MixedRealityInteractionMapping interactionMapping) Parameters Type Name Description MixedRealityInteractionMapping interactionMapping UpdateSingleAxisData(MixedRealityInteractionMapping) Update an Interaction Float data type from a SingleAxis (float) input Declaration protected void UpdateSingleAxisData(MixedRealityInteractionMapping interactionMapping) Parameters Type Name Description MixedRealityInteractionMapping interactionMapping Remarks Raises an Input System \"Pressed\" event when the float data changes"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorGenericFields-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorGenericFields-1.html",
    "title": "Class InspectorGenericFields<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorGenericFields<T> A set of Inspector fields for setting up properties in a component that can be automatically rendered in a custom inspector Inheritance Object InspectorGenericFields<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields Assembly : cs.temp.dll.dll Syntax public class InspectorGenericFields<T> Type Parameters Name Description T Methods GetSettings(T) Searches through a class for InspectorField tags creates properties that can be serialized and automatically rendered in a custom inspector Declaration public static List<InspectorPropertySetting> GetSettings(T source) Parameters Type Name Description T source Returns Type Description List < InspectorPropertySetting > LoadSettings(T, List<InspectorPropertySetting>) Copies values from Inspector PropertySettings to an instantiated class on start, helps overcome polymorphism limitations of serialization Declaration public static void LoadSettings(T target, List<InspectorPropertySetting> settings) Parameters Type Name Description T target List < InspectorPropertySetting > settings"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.Distorter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.Distorter.html",
    "title": "Class Distorter | Mixed Reality Toolkit Documentation",
    "keywords": "Class Distorter Inheritance Object Distorter DistorterBulge DistorterGravity DistorterSimplex DistorterSphere DistorterWiggly Implements IComparable < Distorter > Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters Assembly : cs.temp.dll.dll Syntax public abstract class Distorter : MonoBehaviour, IComparable<Distorter> Properties DistortionEnabled Declaration public bool DistortionEnabled { get; } Property Value Type Description Boolean DistortOrder Declaration public int DistortOrder { get; set; } Property Value Type Description Int32 DistortStrength Declaration public float DistortStrength { get; set; } Property Value Type Description Single Methods CompareTo(Distorter) Declaration public int CompareTo(Distorter other) Parameters Type Name Description Distorter other Returns Type Description Int32 DistortPoint(Vector3, Single) Distorts a world-space point Automatically applies DistortStrength and ensures that strength never exceeds 1 Declaration public Vector3 DistortPoint(Vector3 point, float strength = 1F) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 DistortPointInternal(Vector3, Single) Internal function where position distortion is done Declaration protected abstract Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 DistortScale(Vector3, Single) Distorts a world-space scale Automatically applies DistortStrength and ensures that strength never exceeds 1 Declaration public Vector3 DistortScale(Vector3 scale, float strength = 1F) Parameters Type Name Description Vector3 scale Single strength Returns Type Description Vector3 DistortScaleInternal(Vector3, Single) Internal function where scale distortion is done Declaration protected abstract Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() Implements System.IComparable<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.InstalledApps.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.InstalledApps.html",
    "title": "Class InstalledApps | Mixed Reality Toolkit Documentation",
    "keywords": "Class InstalledApps Inheritance Object InstalledApps Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class InstalledApps Fields InstalledPackages Declaration public ApplicationInfo[] InstalledPackages Field Value Type Description ApplicationInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Attributes | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Attributes Classes EnumFlagsAttribute From https://answers.unity.com/questions/486694/default-editor-enum-as-flags-.html ExtendsAttribute Constraint that allows selection of classes that extend a specific class when selecting a with the Unity inspector. ImplementsAttribute Constraint that allows selection of classes that implement a specific interface when selecting a with the Unity inspector. MixedRealityControllerAttribute Attach to a controller device class to make it show up in the controller mapping profile. MixedRealityDataProviderAttribute Attribute that defines the properties of a Mixed Reality Toolkit data provider. MixedRealityExtensionServiceAttribute Attribute that defines the properties of a Mixed Reality Toolkit extension service. PhysicsLayerAttribute Attribute used to make an Int32 field render a dropdown generated from the current layers defined in the Tag Manager. PrefabAttribute Attribute used to ensure that a GameObject inspector slot only accepts prefabs. SystemTypeAttribute Base class for class selection constraints that can be applied when selecting a with the Unity inspector. Vector3RangeAttribute Attribute used to make a float or int variable in a script be restricted to a specific range."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.TrackingState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.TrackingState.html",
    "title": "Enum TrackingState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TrackingState The Tracking State defines how a device is currently being tracked. This enables developers to be able to handle non-tracked situations and react accordingly. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public enum TrackingState Remarks Tracking is being defined as receiving sensor (positional and/or rotational) data from the device. Fields Name Description NotApplicable The device does not support tracking (ex: a traditional game controller). NotTracked The device is not tracked. Tracked The device is tracked (positionally and/or rotationally)."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Physics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Physics Structs ComparableRaycastResult FocusDetails Contains information about which game object has the focus currently. Also contains information about the normal of that point. RayStep Enums RaycastMode Defines the different ways raycasting can be done. TeleportSurfaceResult"
  },
  "Documentation/Architecture/SpatialAwareness/IMixedRealitySpatialAwarenessSurfaceFindingHandler.html": {
    "href": "Documentation/Architecture/SpatialAwareness/IMixedRealitySpatialAwarenessSurfaceFindingHandler.html",
    "title": "IMixedRealitySpatialAwarenessSurfaceFindingHandler Interface | Mixed Reality Toolkit Documentation",
    "keywords": "IMixedRealitySpatialAwarenessSurfaceFindingHandler Interface Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers OnSurfaceAdded( MixedRealitySpatialAwarenessEventData eventData) Called when a new planar surface has been identified by the spatial awareness system. OnSurfaceUpdated( MixedRealitySpatialAwarenessEventData eventData) Called when an existing planar surface has been modified by the spatial awareness system. OnSurfaceDeleted( MixedRealitySpatialAwarenessEventData eventDatawhat do ) Called when an existing planar surface has been discarded by the spatial awareness system. See Also Mixed Reality Spatial Awareness System Architecture"
  },
  "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessPlanarSurfaceHandler.html": {
    "href": "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessPlanarSurfaceHandler.html",
    "title": "MixedRealitySpatialAwarenessSurfaceFindingHandler Class | Mixed Reality Toolkit Documentation",
    "keywords": "MixedRealitySpatialAwarenessSurfaceFindingHandler Class Toolkit Layer Namespace SDK - Surface Awareness Package Microsoft.MixedReality.Toolkit.SDK.SpatialAwarenessSystem The MixedRealitySpatialAwarenessSurfaceFindingHandler class provides the default implementation of the IMixedRealitySpatialAwarenessSurfaceFindingHandler interface. OnSurfaceAdded( MixedRealitySpatialAwarenessEventData eventData) Called when a new planar surface has been identified by the spatial awareness system. OnSurfaceUpdated( MixedRealitySpatialAwarenessEventData eventData) Called when an existing planar surface has been modified by the spatial awareness system. OnSurfaceDeleted( MixedRealitySpatialAwarenessEventData eventDatawhat do ) Called when an existing planar surface has been discarded by the spatial awareness system. See Also Mixed Reality Spatial Awareness System Architecture IMixedRealitySpatialAwarenessSurfaceFindingHandler Class"
  },
  "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessProfile.html": {
    "href": "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessProfile.html",
    "title": "MixedRealitySpatialAwarenessProfile Class | Mixed Reality Toolkit Documentation",
    "keywords": "MixedRealitySpatialAwarenessProfile Class Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem The MixedRealitySpatialAwarenessProfile derives from Unity’s ScriptableObject and enables the developer to configure the spatial awareness system. The following settings map one-to-one to properties of the same name defined in the IMixedRealitySpatialAwarenessSystem interface. The data types, default values and the supported range of values, if appropriate, are detailed. General Configuration Settings StartupBehavior Type Default Value Range AutoStartBehavior AutoStart AutoStart, Manual ObservationExtents Type Default Value Range Vector3 Vector.one * 10 (10x10x10 meter cube) TBD UpdateInterval Type Default Value Range Single 3.5 (seconds) 0.0 - 5.0 (seconds) Setting 0.0 indicates that the data should be updated at the platform's highest available frequency. Mesh Handler Configuration Settings UseMeshSystem Type Default Value Range Boolean True n/a MeshPhysicsLayer Type Default Value Range Int32 31 0 - 31 MeshLevelOfDetail Type Default Value Range SpatialAwarenessMeshLevelOfDetail Coarse Custom, Coarse, Fine MeshTrianglesPerCubicMeter Type Default Value Range Int32 0 0 - Int32.MaxValue MeshRecalculateNormals Type Default Value Range Boolean True n/a MeshDisplayOption Type Default Value Range SpatialAwarenessMeshDisplayOptions None None, Visible, Occlusion MeshVisibleMaterial Type Default Value Range Material n/a n/a MeshOcclusionMaterial Type Default Value Range Material n/a n/a Surface Finding Handler Configuration Settings UseSurfaceFindingSystem Type Default Value Range Boolean False n/a SurfaceFindingPhysicsLayer Type Default Value Range Int32 31 0 - 31 SurfaceFindingMinimumArea Type Default Value Range Single 0.025 (square meters) TBD (square meters) DisplayFloorSurfaces Type Default Value Range Boolean False n/a FloorSurfaceMaterial Type Default Value Range Material TBD n/a DisplayCeilingSurfaces Type Default Value Range Boolean False n/a CeilingSurfaceMaterial Type Default Value Range Material TBD n/a DisplayWallSurfaces Type Default Value Range Boolean False n/a FloorWallMaterial Type Default Value Range Material TBD n/a DisplayPlatformSurfaces Type Default Value Range Boolean False n/a FloorPlatformMaterial Type Default Value Range Material TBD n/a See Also Mixed Reality Spatial Awareness System Architecture IMixedRealitySpatialAwarenessSystem Interface MixedRealitySpatialAwarenessProfileInspector Class SpatialAwarenessMeshDisplayOptions Enumeration SpatialAwarenessMeshLevelOfDetail Enumeration"
  },
  "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessProfileInspector.html": {
    "href": "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessProfileInspector.html",
    "title": "MixedRealitySpatialAwarenessProfileInspector Class | Mixed Reality Toolkit Documentation",
    "keywords": "MixedRealitySpatialAwarenessProfileInspector Class Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Inspectors.Profiles The MixedRealitySpatialAwarenessProfileInspector derives from MixedRealityBaseConfigurationProfileInspector to provide a visual means of modifying the spatial awareness profile using the Unity Inspector. Each of the properties defined under MixedRealitySpatialAwarenessProfile are represented as elements in the user interface and are persisted when the user saves. See Also Mixed Reality Spatial Awareness System Architecture MixedRealitySpatialAwarenessProfile"
  },
  "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessSystem.html": {
    "href": "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessSystem.html",
    "title": "MixedRealitySpatialAwarenessSystem Class | Mixed Reality Toolkit Documentation",
    "keywords": "MixedRealitySpatialAwarenessSystem Class Toolkit Layer Namespace SDK - Surface Awareness Package Microsoft.MixedReality.Toolkit.SDK.SpatialAwarenessSystem The MixedRealitySpatialAwarenessSystem class provides the default implementation of the spatial awareness system. Implements the IMixedRealitySpatialAwarenessSystem interface. General System Controls The spatial awareness system contains data and methods that configure and control the overall spatial awareness system. StartupBehavior Gets or sets a value that indicates that the developer intends for the spatial observer to start automatically or wait until explicitly resumed. This allows the application to decide precisely when it wishes to begin receiving spatial data notifications. ObservationExtents Gets or sets the size of the volume from which individual observations will be made. This is not the total size of the observable space. UpdateInterval Gets or sets the frequency, in seconds, at which the spatial observer updates. IsObserverRunning Indicates the current running state of the spatial observer. This is a read-only property, set by the spatial awareness system. void ResumeObserver() Starts / restarts the spatial observer. This will cause spatial observation events (ex: MeshAddedEvent) to resume being sent. void SuspendObserver() Stops / pauses the spatial observer. This will cause spatial observation events to be suspended until ResumeObserver is called. Mesh Handling Controls The mesh handling section contains the data and methods that configure and control the representation of data as a collection of meshes. For platforms that do not natively support returning observation data as a mesh, implementations can optionally process the native data before providing it to the caller. Use Mesh System Gets or sets a value that indicates if the spatial mesh subsystem is in use by the application. Turning this off will suspend all mesh events and cause the subsystem to return an empty collection when the GetMeshes method is called. MeshPhysicsLayer Get or sets the desired Unity Physics Layer on which to set the spatial mesh. MeshPhysicsLayerMask Gets the bit mask that corresponds to the value specified in MeshPhysicsLayer. This is a read-only property set by the spatial awareness system. MeshLevelOfDetail Gets or sets the level of detail, as a SpatialAwarenessMeshLevelOfDetail value, for the returned spatial mesh. Setting this value to Custom, implies that the developer is specifying a custom value for MeshTrianglesPerCubicMeter. Specifying any other value will cause MeshTrianglesPerCubicMeter to be overwritten. MeshTrianglesPerCubicMeter Gets or sets the level of detail, in triangles per cubic meter, for the returned spatial mesh. When specifying Coarse or Fine for the MeshLevelOfDetail, this value will be automatically overwritten. MeshRecalculateNormals Gets or sets the value indicating if the spatial awareness system to generate normal for the returned meshes as some platforms may not support returning normal along with the spatial mesh. MeshDisplayOption Gets or sets a value indicating how the mesh subsystem is to display surface meshes within the application. Applications that wish to process the Meshes should set this value to None. MeshVisibleMaterial Gets or sets the material to be used when displaying spatial meshes. MeshOcclusionMaterial Gets or sets the material to be used when spatial meshes should occlude other objects. Dictionary<uint, GameObject> GetMeshes() Returns the collection of GameObjects being managed by the spatial awareness mesh subsystem. Surface Finding Controls The surface finding section contains the data and methods that configure and control the representation of data as a collection of planar surfaces. UseSurfaceFindingSystem Indicates if the surface finding subsystem is in use by the application. Turning this off will suspend all surface events. SurfacePhysicsLayer Get or sets the desired Unity Physics Layer on which to set spatial surfaces. SurfacePhysicsLayerMask Gets the bit mask that corresponds to the value specified in SurfacePhysicsLayer. This is a read-only property set by the spatial awareness system. SurfaceFindingMinimumArea Gets or sets the minimum surface area, in square meters, that must be satisfied before a surface is identified. DisplayFloorSurfaces Gets or sets a value indicating if the surface subsystem is to automatically display floor surfaces within the application. When enabled, the surfaces will be added to the scene and displayed using the configured FloorSurfaceMaterial. FloorSurfaceMaterial Gets or sets the material to be used when displaying planar surface(s) identified as a floor. DisplayCeilingSurfaces Gets or sets a value indicating if the surface subsystem is to automatically display ceiling surfaces within the application. When enabled, the surfaces will be added to the scene and displayed using the configured CeilingSurfaceMaterial. CeilingSurfaceMaterial Gets or sets the material to be used when displaying planar surface(s) identified as a ceiling. DisplayWallSurfaces Gets or sets a value indicating if the surface subsystem is to automatically display wall surfaces within the application. When enabled, the surfaces will be added to the scene and displayed using the configured WallSurfaceMaterial. WallSurfaceMaterial Gets or sets the material to be used when displaying planar surface(s) identified as a wall. DisplayPlatformSurfaces Gets or sets a value indicating if the surface subsystem is to automatically display raised horizontal platform surfaces within the application. When enabled, the surfaces will be added to the scene and displayed using the configured PlatformSurfaceMaterial. PlatformSurfaceMaterial Gets or sets the material to be used when displaying planar surface(s) identified as a raised horizontal platform. Dictionary<uint, GameObject> GetSurfaceObjects() Returns the collection of GameObjects managed by the surface finding subsystem. Handlers The spatial awareness system raises events on the following handler types to indicate when spatial data is added, updated and removed. IMixedRealitySpatialAwarenessMeshHandler IMixedRealitySpatialAwarenessSurfaceFindingHandler See Also Mixed Reality Spatial Awareness System Architecture IMixedRealitySpatialAwarenessSystem Interface SpatialAwarenessMeshDisplayOptions Enumeration SpatialAwarenessMeshLevelOfDetail Enumeration"
  },
  "BreakingChanges.html": {
    "href": "BreakingChanges.html",
    "title": "Breaking Changes | Mixed Reality Toolkit Documentation",
    "keywords": "Breaking Changes"
  },
  "CodingGuidelines.html": {
    "href": "CodingGuidelines.html",
    "title": "Coding Guidelines | Mixed Reality Toolkit Documentation",
    "keywords": "Coding Guidelines This document outlines the recommended coding guidelines for the Mixed Reality Toolkit. The majority of these suggestions follow the recommended standards from MSDN . Script license information headers All scripts posted to the MRTK should have the standard License header attached, exactly as shown below: // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See LICENSE in the project root for license information. Any script files submitted without the license header will be rejected Function / Method summary headers All public classes, structs, enums, functions, properties, fields posted to the MRTK should be described as to it's purpose and use, exactly as shown below: /// <summary> /// The Controller definition defines the Controller as defined by the SDK / Unity. /// </summary> public struct Controller { /// <summary> /// The ID assigned to the Controller /// </summary> public string ID; } This ensures documentation is properly generated and disseminated for all all classes, methods, and properties. Any script files submitted without proper summary tags will be rejected. MRTK namespace rules The vNext structure adheres to a strict namespace culture of mapping the namespace 1-1 with the folder structure of the project. This ensures that classes are easy to discover and maintain. It also ensures the dependencies of any class are laid out in the beginning using definitions of the file. Do: // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See LICENSE in the project root for license information. namespace Microsoft.MixedReality.Toolkit.Core.Definitions { /// <summary> /// The ButtonAction defines the set of actions exposed by a controller. /// Denoting the available buttons / interactions that a controller supports. /// </summary> public enum ButtonAction { } } Absolutely no class / struct / enum or other definition should be entered in to the project without the appropriate namespace definition. Spaces vs Tabs Please be sure to use 4 spaces instead of tabs when contributing to this project. Additionally, ensure that spaces are added for conditional / loop functions like if / while / for Don't: private Foo () // < - space between Foo and () { if(Bar==null) // <- no space between if and () { DoThing(); } while(true) // <- no space between while and () { Do(); } } Do: private Foo() { if (Bar==null) { DoThing(); } while (true) { Do(); } } Spacing Do not to add additional spaces between square brackets and parenthesis: Don't: private Foo() { int[ ] var = new int [ 9 ]; Vector2 vector = new Vector2 ( 0f, 10f ); } Do: private Foo() { int[] var = new int[9]; Vector2 vector = new Vector2(0f, 10f); } Naming Conventions Always use PascalCase for public / protected / virtual properties, and camelCase for private properties and fields. The only exception to this is for data structures that require the fields to be serialized by the JsonUtility . Don't: public string myProperty; // <- Starts with a lower case letter private string MyProperty; // <- Starts with an uppercase case letter Do: public string MyProperty; protected string MyProperty; private string myProperty; Access Modifiers Always declare an access modifier for all fields, properties and methods. All Unity API Methods should be private by default, unless you need to override them in a derived class. In this case protected should be used. Fields should always be private , with public or protected property accessors. Use expression-bodied members and auto properties where possible Don't: // protected field should be private protected int myVariable = 0; // property should have protected setter public int MyVariable { get { return myVariable; } } // No public / private access modifiers void Foo() { } void Bar() { } Do: public int MyVariable { get; protected set; } = 0; private void Foo() { } public void Bar() { } protected virtual void FooBar() { } Use Braces Always use braces after each statement block, and place them on the next line. Don't: private Foo() { if (Bar==null) // <- missing braces surrounding if action DoThing(); else DoTheOtherThing(); } Don't: private Foo() { // <- Open bracket on same line if (Bar==null) DoThing(); <- if action on same line with no surrounding brackets else DoTheOtherThing(); } Do: private Foo() { if (Bar==true) { DoThing(); } else { DoTheOtherThing(); } } Public classes, structs, and enums should all go in their own files. If the class, struct, or enum can be made private then it's okay to be included in the same file. This avoids compilations issues with Unity and ensure that proper code abstraction occurs, it also reduces conflicts and breaking changes when code needs to change. Don't: public class MyClass { public struct MyStruct() { } public enum MyEnumType() { } public class MyNestedClass() { } } Do: // Private references for use inside the class only public class MyClass { private struct MyStruct() { } private enum MyEnumType() { } private class MyNestedClass() { } } Do: MyStruct.cs // Public Struct / Enum definitions for use in your class. Try to make them generic for reuse. public struct MyStruct { public string Var1; public string Var2; } MyEnumType.cs public enum MuEnumType { Value1, Value2 // <- note, no \",\" on last value to denote end of list. } MyClass.cs public class MyClass { private MyStruct myStructreference; private MyEnumType myEnumReference; } Initialize Enums. To ensure all Enum's are initialized correctly starting at 0, .NET gives you a tidy shortcut to automatically initialize the enum by just adding the first (starter) value. E.G. Value 1 = 0 (Remaining values are not required) Don't: public enum Value { Value1, <- no initializer Value2, Value3 } Do: public enum ValueType { Value1 = 0, Value2, Value3 } Order Enums for appropriate extension. It is critical that if an Enum is likely to be extended in the future, to order defaults at the top of the Enum, this ensures Enum indexes are not affected with new additions. Don't: public enum SDKType { WindowsMR, OpenVR, OpenXR, None, <- default value not at start Other <- anonymous value left to end of enum } Do: /// <summary> /// The SDKType lists the VR SDK's that are supported by the MRTK /// Initially, this lists proposed SDK's, not all may be implemented at this time (please see ReleaseNotes for more details) /// </summary> public enum SDKType { /// <summary> /// No specified type or Standalone / non-VR type /// </summary> None = 0, /// <summary> /// Undefined SDK. /// </summary> Other, /// <summary> /// The Windows 10 Mixed reality SDK provided by the Universal Windows Platform (UWP), for Immersive MR headsets and HoloLens. /// </summary> WindowsMR, /// <summary> /// The OpenVR platform provided by Unity (does not support the downloadable SteamVR SDK). /// </summary> OpenVR, /// <summary> /// The OpenXR platform. SDK to be determined once released. /// </summary> OpenXR } End Enum names with \"Type\" Enum names should clearly indicate their nature by using the Type suffix. Don't: public enum Ordering { First, Second, Third } public enum OrderingEnum { First, Second, Third } Do: public enum OrderingType { First = 0, Second, Third } Review Enum use for Bitfields. If there is a possibility for an enum to require multiple states as a value, e.g. Handedness = Left & Right. Then the Enum needs to be decorated correctly with BitFlags to enable it to be used correctly The Handedness.cs file has a concrete implementation for this Don't: public enum Handedness { None, Left, Right } Do: [flags] public enum HandednessType { None = 0 << 0, Left = 1 << 0, Right = 1 << 1, Both = Left | Right } Best Practices, including Unity recommendations Some of the target platforms of this project require us to take performance into consideration. With this in mind we should always be careful of allocating memory in frequently called code in tight update loops or algorithms. Encapsulation Always use private fields and public properties if access to the field is needed from outside the class or struct. Be sure to co-locate the private field and the public property. This makes it easier to see, at a glance, what backs the property and that the field is modifiable by script. If you need to have the ability to edit your field in the inspector, it's best practice to follow the rules for Encapsulation and serialize your backing field. The only exception to this is for data structures that require the fields to be serialized by the JsonUtility , where a data class is required to have all public fields for the serialization to work. Don't: public float MyValue; Do: // private field, only accessible within script (field is not serialized in Unity) private float myValue; Do: // Enable private field to be configurable only in editor (field is correctly serialized in Unity) [SerializeField] private float myValue; Don't: private float myValue1; private float myValue2; public float MyValue1 { get{ return myValue1; } set{ myValue1 = value } } public float MyValue2 { get{ return myValue2; } set{ myValue2 = value } } Do: // Enable field to be configurable in the editor and available externally to other scripts (field is correctly serialized in Unity) [SerializeField] [ToolTip(\"If using a tooltip, the text should match the public property's summary documentation, if appropriate.\")] private float myValue; // <- Notice we co-located the backing field above our corresponding property. /// <summary> /// If using a tooltip, the text should match the public property's summary documentation, if appropriate. /// </summary> public float MyValue { get{ return myValue; } set{ myValue = value } } Use for instead of foreach when possible. In some cases a foreach is required, e.g. when looping over an IEnumerable. But for performance benefit, avoid foreach when you can. Don't: foreach(var item in items) Do: int length = items.length; // cache reference to list/array length for(int i=0; i < length; i++) Cache values and serialize them in the scene/prefab whenever possible. With the HoloLens in mind, it's best to optimize for performance and cache references in the scene or prefab to limit runtime memory allocations. Don't: void Update() { gameObject.GetComponent<Renderer>().Foo(Bar); } Do: [SerializeField] // To enable setting the reference in the inspector. private Renderer myRenderer; private void Awake() { // If you didn't set it in the inspector, then we cache it on awake. if (myRenderer == null) { myRenderer = gameObject.GetComponent<Renderer>(); } } private void Update() { myRenderer.Foo(Bar); } Cache references to materials, do not call the \".material\" each time. Unity will create a new material each time you use \".material\", which will cause a memory leak if not cleaned up properly. Don't: public class MyClass { void Update() { Material myMaterial = GetComponent<Renderer>().material; myMaterial.SetColor(\"_Color\", Color.White); } } Do: // Private references for use inside the class only public class MyClass { private Material cachedMaterial; private void Awake() { cachedMaterial = GetComponent<Renderer>().material; } void Update() { cachedMaterial.SetColor(\"_Color\", Color.White); } private void OnDestroy() { Destroy(cachedMaterial); } } Alternatively, use Unity's \"SharedMaterial\" property which does not create a new material each time it is referenced. Use platform dependent compilation to ensure the Toolkit won't break the build on another platform Use WINDOWS_UWP in order to use UWP-specific, non-Unity APIs. This will prevent them from trying to run in the Editor or on unsupported platforms. This is equivalent to UNITY_WSA && !UNITY_EDITOR and should be used in favor of. Use UNITY_WSA to use UWP-specific Unity APIs, such as the UnityEngine.XR.WSA namespace. This will run in the Editor when the platform is set to UWP, as well as in built UWP apps. This chart can help you decide which #if to use, depending on your use cases and the build settings you expect. UWP IL2CPP UWP .NET Editor UNITY_EDITOR False False True UNITY_WSA True True True WINDOWS_UWP True True False UNITY_WSA && !UNITY_EDITOR True True False ENABLE_WINMD_SUPPORT True True False NETFX_CORE False True False"
  },
  "MRTK-vNext.html": {
    "href": "MRTK-vNext.html",
    "title": "Mixed Reality Toolkit – Multi-VR approach (High level) | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit – Multi-VR approach (High level) Objective To rearchitect the current Mixed Reality Toolkit to provide: An abstractable base interface that will support multiple VR platforms, predominately HL/MR/OpenVR/OpenXR A Building block style front end interface that is easy for new users to construct new Mixed Reality solutions easily, whilst still providing an open framework for intensive developers to consume. Outline Architecture Figure 1 : Draft High-Level architecture The internal side of the MRTK, is internal / private, not something a user would need to use / access. We can debate whether we still allow some of it to be “open” for customization. But I feel that should be through users creating “extensions” rather than modifying base code. The SDK side is what the users will be consuming, either through a constructed set of prefabs or adding the management scripts. The obvious aim being to enable (as much as possible) for a consumer to drag and drop the MRTK in to their existing scene and enable behaviors / movement and interactions. High-Level Architecture breakdown The architecture approach lends from many different sources (VRTK, OpenXR, EditorVR) to provide a structure that aligns to the aims for the Multi-VR approach proposed for the Mixed Reality Toolkit. In all cases, the framework should follow the 80/20 rule, providing core mechanisms to deliver common use cases whilst also being open enough to allow for extension or even replacement of key components (for advanced users) Device Abstraction Layer The DAL creates a bridge layer between an external provider SDK and conforms the outputs / inputs of those devices to the MRTK construct definitions. Ideally, these interfaces should be at the script level consuming the vendor SDK directly rather than relying on vendor prefab definitions. MRTK Constructs A coordinated set of specifications that define a generalized system for describing and interacting with multiple VR/AR platforms. The specifications detail the inner workings for the toolkit and define extendable contracts for the SDK to expose to both providers (devices) and consumers (SDK). MRTK Interface Layer The interface layer provides an extensible bridge to map and coordinate inputs coming from VR devices and controllers as well as providing an abstracted mechanism to output to VR systems (e.g. Haptics). It also defines preset interactions that can be composited for use by the SDK. MRTK User Abstraction layer This is the frontend of the entire SDK, providing pre-built components for the most used implementations for Mixed Reality. This should be provided through a set of easy to use components / scripts that can be “Drag and Dropped” to build a project. Like the Unity UI System, this does not preclude users building their own components and potentially submitting back to the project for inclusion. Key Principles Following the feedback we’ve received both internally and through current consumers, I propose the following key principles we should follow building this new architecture: The new framework needs to provide “out of the box” components to enable rapid prototyping and development. Future internal changes should not break these components or cause them to degrade in functionality. Every component / feature provided by the framework (either prefab or script) should have corresponding unit tests to validate its functionality. Any future merge to the framework will have to validate these test before merging to ensure there is no degradation of service. The new framework should provide a programmatic interface along side the SDK components, to enable advanced users to extend or replace any component within the framework. Each new interface / component should be fully documented (where possible). These should detail all interactions and intended uses. For the advanced cases, we’ll need to review how we explain how to replace components (e.g. replacing the input system with another, like InControl) Working examples / demos should be created for any specific system, these should have purpose and not just be a “test”. All testing components / scripts / prefabs / scenes should only be retained in the dev branch. The master branch should only contain the “ToolKit” and working examples. Master is for consumers only. Simulator options need to be provided as another device. This will also form the template for new MR/XR/VR devices / SDKs. Reference Material Notable components in VRTK Pointer (VRTK Example Basic Pointer)(Pointer with Area Collision) Line type (Straight, Bezier)(VRTK Example Bezier Pointer) Tip type (teleport target, sphere, dot, none…) Color Thickness Pointer Interaction, Menu Selection with Pointer (VRTK Example) Grab, Move, Rotate, Scale with Pointer (Shell behavior) Teleporting (VRTK Example) Pointer style Transition type Transition fade speed Exclude teleport location (VRTK Example) Object Touching / Grabbing (VRTK Example) Object touched event Highlight / Outline on touched InteractableObject: Object grabbable, Highlight on touch Throwing Grab and Trigger (VRTK Example) Grab and Trigger Multiple (VRTK Example) Grab rotation snapping (VRTK Example) Grab attach mechanics: Fixed Joint / Spring Joint / Track Object (VRTK Example) Grab Force hold object (VRTK Example) Child on Grab: Bow and Arrow (VRTK Example) Controller Ghost or Physical (ghost passes through objects while) Menu System (available in MRDL) Radial menu Grid menu Touchpad Axis Control (VRTK Example) Radial touchpad menu (VRTK Example) Tooltips (available in MRDL) Tip Connector Spawner Manager (tutorials, spaces) Headset collision fading (VRTK Example) (James) Open XR references TBC The new MRTK approach would span across the Application and SDK/Device layers, seeing how OpenXR is a Device to the new architecture. Figure 2 : OpenXR architecture Expected Experience reference (starter for 10) Interaction Highlighting Pressing (e.g. buttons and a way to execute actions like UI Buttons) Activation (similar to pressing but an on/off state) Holding Raw Input (exposing individual inputs in a managed way) Speech Manipulation Grabbing Transforming Alteration (e.g. scaling, animation) Experiences Controller menus / actions Climbing / Moving with Controllers Pointers and Cursors (linked to each controller input) Doors and Interactions Motion Free Teleportation Restricted Teleportation Locomotion Twitch movement Extended Experiences FPS Bow and Arrow Common use cases"
  },
  "MRTK-WorkRoadmap.html": {
    "href": "MRTK-WorkRoadmap.html",
    "title": "Work Roadmap for early vNext development | Mixed Reality Toolkit Documentation",
    "keywords": "Work Roadmap for early vNext development Here are some of the goals and tasks we're pursuing during the Alpha/Beta and early release stages of MRTK vNext. Please create github issues for specific tasks, but if there's a general area that needs planning and development, feel free to add it here. Fringe thoughts (dumping ground for ideas :D) Defining headset gameplay, allowing for sitting / standing or free roaming play. Has to be easy enough to enable single projects to handle both behaviors Defining headset movement, is it free roam, shifting or teleporting? With Teleporting specifically, is it cursor based or zone based (something we don’t have). After watching the Rick and Morty retrospective, they struggled with this and movement space, something an SDK should be able to provide a starter experience for. Adding interaction mechanics to objects in the scene easily. Is it grabbable, moveable, altered by gravity etc. Helpers for 3d’ifying scene objects, 2 sided drawing or best practices Examples, Examples, Examples – Ensuring our examples are bigger than current based off the latest examples scene that came from VRTK which was well received. (showed ALL interaction options within a small house) Videos – a YT / FB video channel with educational snippets dedicated to MRTK Proposed Tasks To ensure we have a smooth transition, we need several key tasks to be completed and ensure we limit (as much as possible) any future breaking changes: Build the new front-end architecture, enabling both new and existing users to start building from. Comprising of an initial set of interactable prefabs / components: Grabbing Touching Basic interaction Teleporting A single example scene to demonstrate the use of the new components Short video demonstration of example Followed up with further front end components. This will enable users to start using the new style approach for building new solutions. Either in parallel (or following), we should focus on building the new underlying Multi-vr framework and stitching components together. Define the underlying interfaces for the Multi-vr approach which abstracts the work Stephen has started in the Input system In a feature branch, align the existing input and interaction systems to adopt the new interfaces Update the current MR implementation to the new interfaces It will be key to further understand any gaps we currently have in the toolkit to align to this new approach. Once ready, the above prefabs/components will be updated to use the new underlying framework with little to no impact on their designed scenes."
  },
  "NOTICE.html": {
    "href": "NOTICE.html",
    "title": "| Mixed Reality Toolkit Documentation",
    "keywords": "NOTICES AND INFORMATION Do Not Translate or Localize This software incorporates material from third parties. Microsoft makes certain open source code available at http://3rdpartysource.microsoft.com , or you may send a check or money order for US $5.00, including the product name, the open source component name, and version number, to: Source Code Compliance Team Microsoft Corporation One Microsoft Way Redmond, WA 98052 USA Notwithstanding any other terms, you may reverse engineer this software to the extent required to debug changes to any libraries licensed under the GNU Lesser General Public License. Oculus Controller Images Copyright (c) Facebook Technologies, LLC and its affiliates. All rights reserved. Art Attribution License 1.0 You may use these images solely for referring to the corresponding product in your video game or VR experience (including manuals for users). Otherwise, you may not use these images, or any trademarks, logos or other intellectual property owned by Facebook Technologies, LLC formerly known as Oculus VR, LLC (“Oculus”), including but not limited to use on merchandise or other product such as clothing, hats, or mugs. Do not use the Oculus images in a way that implies a partnership, sponsorship or endorsement; or features Oculus on materials associated with pornography, illegal activities, or other materials that violate Oculus Terms. THE IMAGES ARE PROVIDED TO YOU ON AN “AS IS” BASIS AND YOU ARE SOLELY RESPONSIBLE FOR YOUR USE OF THE IMAGES. OCULUS DISCLAIMS ALL WARRANTIES REGARDING THE IMAGES, INCLUDING WARRANTIES OF NON-INFRINGEMENT. OCULUS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR PUNITIVE DAMAGES ARISING FROM OR RELATED TO YOUR USE OF THE IMAGES. For the avoidance of doubt, this license shall not apply to the Oculus name, trademark or service mark, logo or design OpenVR Copyright (c) 2015 Valve Corporation. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Unity 3D Async Await Util Copyright (c) 2016 Modest Tree Media Inc Licensed under the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Visual Profiler Copyright (c) Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE"
  },
  "README.html": {
    "href": "README.html",
    "title": "What is MixedRealityToolkit-vNext | Mixed Reality Toolkit Documentation",
    "keywords": "What is MixedRealityToolkit-vNext The V1 Mixed Reality Toolkit is a collection of scripts and components intended to accelerate development of applications targeting Microsoft HoloLens and Windows Mixed Reality headsets. For details on the different branches used in the Mixed Reality Toolkit repositories, check this Branch Guide here . This new version of the MixedRealityToolkit aims to further extend the capabilities of the toolkit and also introduce new features, including the capability to support more VR/AR/XR platforms beyond Microsoft's own Mixed Reality setup. The vNext branch is taking all the best lessons learned from the original Mixed Reality Toolkit and refactoring / restructuring it to both: Support a wider audience, allowing solutions to be built that will run on multiple VR / AR / XR platforms such as Mixed Reality, Steam/Open VR and OpenXR (initially) Provide an easier to use SDK, to enable rapid prototyping and ease adoption for new users (or users of previous frameworks) Ensure an extensive framework for advanced integrators, with the ability to swap out core components with their own should they wish to, or simply extend the framework to add new capabilities. Learn more about Windows Mixed Reality here. Learn more about the architecture behind Windows Mixed Reality - vNext here. Learn more about the approach behind the Windows Mixed Reality - vNext SDK here. Feature areas The Mixed Reality Toolkit vNext will includes many APIs to accelerate the development of MR / XR / VR / AR projects for a range of supported devices, including (but not limited to) Microsoft HoloLens Microsoft Immersive headsets (IHMD) Steam VR (HTC Vive / Oculus Rift) OpenXR platforms Required Software Windows 10 FCU Unity 3D Visual Studio 2017 Simulator (optional) To develop apps for mixed reality headsets, you need the Windows 10 Fall Creators Update The Unity 3D engine provides support for building mixed reality projects in Windows 10 Visual Studio is used for code editing, deploying and building UWP app packages The Emulators allow you test your app without the device in a simulated environment Getting started with MRTK-vNext MRTK-vNext is currently under heavy development. To determine the best branch for starting out, please view the Branch Guide wiki page. The Mixed Reality team have prepared a few guides for getting up to speed on using the new Mixed Reality Toolkit, which can be found here: Downloading the Mixed Reality Toolkit Getting Started with the Mixed Reality Toolkit Mixed Reality Toolkit configuration guide More guides to follow. Any queries, questions or feedback on using the Mixed Reality Toolkit should be raised as Issues on the site. let us know what you like / dislike or think is incredibly awesome! Alternatively, reach out to us on the HoloDevelopers slack channels Examples and QuickStart scenes One radical change to the Mixed Reality Toolkit vNext, will be the standards and approaches to real world example scenes. New examples will follow strict guidelines, such as: Each example must have a use and demonstrate a real world test case (no tests). Each example will use a standardized template, so all examples have the same look and feel. Each sample will be fully documented, detailing both the use case it is demonstrating and how to implement the features demonstrated. Check the \"Work In Progress\" section of the Windows Mixed Reality - vNext SDK for a peek at the first new example. External\\How To docs folder is meant to help everyone with migrating forward or any simple doubts they might have about the process. Please feel free to grow all these sections. We can't wait to see your additions! This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Useful resources on Microsoft Windows Dev Center Academy Design Development Community See code examples. Do a coding tutorial. Watch guest lectures. Get design guides. Build user interface. Learn interactions and input. Get development guides. Learn the technology. Understand the science. Join open source projects. Ask questions on forums. Attend events and meetups. How to Contribute View the How To Contribute wiki page for the most up to date instructions on contributing to the Mixed Reality Toolkit!"
  },
  "Assets/MixedRealityToolkit/Definitions/README.html": {
    "href": "Assets/MixedRealityToolkit/Definitions/README.html",
    "title": "Mixed Reality Toolkit - Internal - Definitions | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - Internal - Definitions This folder contains all the MRTK Internal description definitions and enums. Struct / Enum Definitions The list of definitions for Internal MRTK structures and enums are listed below. BaseManager The BaseManager is the base class for all Mixed Reality Toolkit manager classes. This minimises the use of MonoBehaviour's and provides a faster framework. ButtonAction The ButtonAction defines the set of actions exposed by a controller. Denoting the available buttons / interactions that a controller supports. ButtonDefinition A Button Definition maps the capabilities of a selected controllers buttons, one definition should exist for each button profile. Controller The Controller definition defines the Controller as defined by the SDK / Unity. ControllerInputType The ControllerInputType identifies the type of button or input being sent to the framework from a controller. This is mainly information only or for advanced users to understand the input coming directly from the controller. ControllerState The Controller State defines whether a controller or headset is currently being tracker or not. This enables developers to be able to handle non-tracked situations and react accordingly Handedness The Handedness defines which hand a controller is currently operating in. It is up to the developer to determine whether this affects the use of a controller or not. Headset The headset definition defines the headset as defined by the SDK / Unity. InputActions InputActions defines the set of actions consumed internally within the MRTK. Denoting the available buttons / interactions that MRTK supports and exposed as events from the InputSystem. MixedRealityConfigurationProfile The MixedRealityConfigurationProfile is a Scriptable Object definition for creating profiles for the Mixed Reality Toolkit. This will instruct the toolkit how to operate and which managers to use within a project, centralizing all the configuration required for the project. SDKType The SDKType lists the VR SDK's that are supported by the MRTK Initially, this lists proposed SDK's, not all may be implemented at this time (please see ReleaseNotes for more details) Relationships For specific constructs, the following information details the relationships between each component. Controllers The controller definition relationships are defined as shown below: Headsets The headset definition relationships are defined as shown below: Internal MRTK InputActions Input Actions are those internal mapped actions available to the MRTK. Each controller button would be dynamically mapped to an MRTK action for use in the SDK or output from the InputSystem. These are listed as follows: Additional Information For additional information, please see the MRTK vNext architecture outline and the vNext SDK Outline"
  },
  "Assets/MixedRealityToolkit/EventDatum/README.html": {
    "href": "Assets/MixedRealityToolkit/EventDatum/README.html",
    "title": "Mixed Reality Toolkit - EventDatum | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - EventDatum Data model classes for the inner workings of the Mixed Reality Toolkit and it's supported Core systems. All data models required for system use within the MRTK should be recorded here."
  },
  "Assets/MixedRealityToolkit/Interfaces/README.html": {
    "href": "Assets/MixedRealityToolkit/Interfaces/README.html",
    "title": "Mixed Reality Toolkit - Internal - Interfaces | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - Internal - Interfaces This folder contains all the Interface definitions for MRTK operation Interface Definitions The list of definitions for Internal MRTK Interfaces are listed below. IMixedRealityManager The IManager interface ensures that all Manager components comply with the requirements of all Mixed Reality Toolkit managers. IMixedRealityBoundarySystem The IMixedRealityBoundarySystem interface is the base interface to identify a component as an Boundary System Manager. This is used to register an Boundary system in the Mixed Reality Toolkit, any replacement Boundary Systems should inherit from this interface for registration. IMixedRealityInputSystem The IMixedRealityBoundarySystem interface is the base interface to identify a component as an Input System Manager. This is used to register an Input system in the Mixed Reality Toolkit, any replacement Input Systems should inherit from this interface for registration."
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing | Mixed Reality Toolkit Documentation",
    "keywords": "Contributing The Mixed Reality Toolkit (MRTK) welcomes contributions from the community. Whether it is for a minor change like fixing typos and small bug fixes, or a new feature or component. For larger submissions, we have drafted contribution guidelines to ensure a smooth process and a good quality of code and documentation, so please be sure to review the Feature Contribution guidelines / Process . All changes be they small or large, need to adhere to the MRTK Coding Standards , so please ensure you are familiar with these while developing to avoid delays when the change is being reviewed. If you have any questions, please reach out on the HoloLens forums or the HoloDevelopers slack . You can easily be granted access to the Slack community via the automatic invitation sender . Submission process We provide several paths to enable developers to contribute to the Mixed Reality Toolkit, all starting with creating a new Issue From here you can either: Open a new issue - telling of us a bug or issue with the project you are facing. We recommend discussing issues in the HoloDevelopers slack channel first to ensure it's an issue with the MRTK. Raise a new Feature request - some missing feature that you really need, or have even implemented your self that you would like to see added to the project Create a new Task for the Mixed Reality vNext project - defining a new feature or component for the next generation of the Mixed Reality Toolkit Creating proposals To ensure a smooth process when contributing new fixes or features, it's key that you start your journey by creating one of the issue types listed above. Start by opening a proposal describing the change you want to make and how your proposed implementation, or simply the issue you are facing. This will enable us have a brief discussion about the proposal and, hopefully, identify some potential pitfalls before any work is started. If you're proposing a completely new feature (or a new platform support) please follow the Feature Contribution Process . Note: If you wish to work on something that already exists on our backlog, you can use that work item as your proposal. Be sure to also comment on the task notifying maintainers that you're working towards completing it. Beginning development Working with Git, the contribution process is quite simple (provided you have installed a good Git Client such as TortoiseGit or SourceTree) If you are new to to the Git workflow, check out this tutorial on Pluralsight To get started, simply follow these steps Fork the repository. Click on the \"Fork\" button on the top right of the page and follow the flow. Create a branch in your fork (off of the mrtk_development branch) to make it easier for you to isolate your fork. for the legacy HoloToolkit use the htk_development branch 3. Instructions for getting the project building and running the tests are in the README . 4. Make small and frequent commits that include tests which could be a unity scene showing usage of your feature. 5. Make sure that all the tests continue to pass. 6. Follow the Coding Guidelines . 7. Ensure the code and feature(s) are documented as described in the Documentation Guidelines . 8. Ensure the code works as intended on all platforms . - For Windows UWP projects, your code must be WACK compliant . To do this, generate a Visual Studio solution, right click on project; Store -> Create App Packages. Follow the prompts and run WACK tests. Make sure they all succeed. 9. Update the documentation with additional information as needed. Pull request Once you have created your change, it's time to submit a Pull Request (PR) back to the project. Please ensure all PR's are small and concise, DO NOT include other files / changes not related to the subject of the PR e.g. Don't update the projectversion.txt when you are making changes or adding a button If you haven't contributed to a Microsoft project before, you may be asked to sign a contribution license agreement . A comment in the PR will let you know if you do. If you are a Microsoft employee and are not a member of the Microsoft organization on GitHub , please link your Microsoft and GitHub accounts on corpnet by visiting Open Source at Microsoft before you start your pull request. There's some process stuff you'll need to do ahead of time. When you are ready: Start a GitHub pull request to merge your topic branch targetting the mrtk_development branch. Ensure you fill in all details required by the Pull Request template, ensuring you reference any Issue / Feature Request or Task the PR relates to. Validate that you are only checking in files / changes related to the PR Check your documentation is up to date and included (unless submitted in a previous PR) The project maintainers will review your changes. We aim to review all changes within three business days. Please address any review comments, push to your topic branch, and post a comment letting us know that there's new stuff to review. All PR's submitted to the project will also be vetted according to the MRTK coding standards guide , so please review these before submitting your PR to ensure a smooth process. Merge If the pull request review goes well, a project maintainer will merge your changes. Thank you for helping improve the Mixed Reality Toolkit! Documentation Requirements The Mixed Reality Toolkit requires the following forms of documentation for any new feature or component. Also ensure if you are simply patching / fixing an existing feature that the documentation is also updated to match. APIs This documentation is generated from the product code and is reviewed as part of all pull requests. Conceptual Conceptual documentation is hosted on https://docs.microsoft.com/en-us/windows/mixed-reality . Please submit your changes via Pull Request at https://github.com/MicrosoftDocs/mixed-reality . Readme files As part of your pull request, please update (or create) the Readme markdown file in the appropriate feature folder. This will allow GitHub users to gain a high-level understanding of your new feature. Supported Platforms The Mixed Reality Toolkit supports the following mixed reality (AR/VR/XR) platforms: Windows Standalone OpenVR Universal Windows Platform Standalone PC Windows Mixed Reality Immersive devices Microsoft HoloLens"
  },
  "DocumentationGuide.html": {
    "href": "DocumentationGuide.html",
    "title": "Documentation Guidelines | Mixed Reality Toolkit Documentation",
    "keywords": "Documentation Guidelines This document outlines the documentation guidelines and standards for the Mixed Reality Toolkit (MRTK). Herein you will find the standards for the following formsfs of the MRTK documentation: Source Conceptual Design Performance Notes Breaking Changes Source Documentation API documentation will be generated automatically from the MRTK source files. To facilitate this, source files are required to contain the following: Class, Struct, Enum Summary Blocks Property, Method, Event Summary Blocks Feature Introduction Version and Dependencies Serialized Fields Enumeration Values In addition to the above, the code should be well commented to allow for maintenance, bug fixes and ease of customization. Class, Struct, Enum Summary Blocks If a class, struct or enum is being added to the MRTK, it's purpose must be described. This is to take the form of a summary block above the class. /// <summary> /// AudioOccluder implements IAudioInfluencer to provide an occlusion effect. /// </summary> If there are any class level dependencies, they should be documented in a remarks block, immediately below the summary. /// <remarks> /// Ensure that all sound emitting objects have an attached AudioInfluencerController. /// Failing to do so will result in the desired effect not being applied to the sound. /// </remarks> Pull Requests submitted without summaries for classes, strutures or enums will not be approved. Property, Method, Event Summary Blocks Properties, methods and events (PMEs) as well as fields are to be documented with summary blocks, regardless of code visibility (public, private, protected and internal). The documentation generation tool is responsible for filtering out and publishing only the public and protected features. NOTE: A summary block is not required for Unity methods (ex: Awake, Start, Update). PME documentation is required for a Pull Request to be approved. As part of a PME summary block, the meaning and purpose of parameters and returned data is required. /// <summary> /// Sets the cached native cutoff frequency of the attached low pass filter. /// </summary> /// <param name=\"frequency\">The new low pass filter cutoff frequency.</param> /// <returns>The new cutoff frequency value.</returns> Go Up Feature Introduction Version and Dependencies As part of the API summary documentation, information regarding the MRTK version in which the feature was introduced and any dependencies should be documented in a remarks block. Dependencies should include extension and/or platform dependencies. /// <remarks> /// Introduced in MRTK version: 2018.06.0 /// Minimum Unity version: 2018.0.0f1 /// Minimum Operating System: Windows 10.0.11111.0 /// Requires installation of: ImaginarySDK v2.1 /// </remarks> Go Up Serialized Fields It is a good practice to use Unity's Tooltip attribute to provide runtime documentation for a script's fields in the Inspector. So that configuration options are included in the API documentation, scripts are required to include at least the tooltip contents in a summary block. /// <summary> /// The quality level of the simulated audio source (ex: AM radio). /// </summary> [Tooltip(\"The quality level of the simulated audio source.\")] Go Up Enumeration Values When defining and enumeration, code must also document the meaning of the enum values using a summary block. Remarks blocks can optionally be used to provide additional details to enhance understanding. /// <summary> /// Full range of human hearing. /// </summary> /// <remarks> /// The frequency range used is a bit wider than that of human /// hearing. It closely resembles the range used for audio CDs. /// </remarks> Go Up Go to Top Conceptual Documentation Many users of the Mixed Reality Toolkit may not need to use the API documentation. These users will take advantage of our pre-made, reusable prefabs and scripts to create their experiences. Each feature area will contain one or more markdown (.md) files that describe at a fairly high level, what is provided. Depending on the size and/or complexity of a given feature area, there may be a need for additional files, up to one per feature provided. When a feature is added (or the usage is changed), overview documentation must be provided. As part of this documentation, how-to sections, including illustrations, should be provided to assist customers new to a featur or concept in getting started. Go to Top Design Documentation Mixed Reality provides an opportunity to create entirely new worlds. Part of this is likely to involve the creation of custom assets for use with the MRTK. To make this as friction free as possible for customers, components should provide design documentation describing any formatting or other requirements for art assets. Some examples where design documentation can be helpful: Cursor models Spatial Mapping visualizations Sound effect files This type of documentation is strongly recommended, and may be requested as part of a Pull Request review. Go to Top Performance Notes Some important features come at a performance cost. Often this code will very depending how they are configured. For example: When using the Spatial Mapping component, the performance impact will increase with the level of detail requested. It is recommended to use the least detail possible for your experience. Performance notes are recommended for CPU and/or GPU heavy components and may be requested as part of a Pull Request review. Any applicable performance notes are to be included in API and overiew documentation. Go to Top Breaking Changes Breaking changes documentation is to consist of a top level file which links to each feature area's individual BreakingChanges.md. The feature area BreakingChanges.md files are to contain the list of all known breaking changes for a given release as well as the history of breaking changes from past releases. For example: Spatial Sound Breaking Changes 2018.07.2 * Spatialization of the imaginary effect is now required. * Management of randomized AudioClip files requires an entropy value in the manager node. 2018.07.1 No known breaking changes 2018.07.0 ... The information contained within the feature level BreakingChanges.md files will be aggregated to the release notes for each new MRTK release. Any breaking changes that are part of a change must be documented as part of a Pull Request. Go to Top"
  },
  "Feature_Contribution_Process.html": {
    "href": "Feature_Contribution_Process.html",
    "title": "Feature Contribution Process | Mixed Reality Toolkit Documentation",
    "keywords": "Feature Contribution Process Adding features to the Mixed Reality Toolkit (MRTK) is split up into a few iteration steps, so maintainers can have time to review and and ensure the process goes smoothly. Please be sure to review the list of feature requirements before you get started. Process The following process has been drafted to ensure all new work complies to the updated standards and architecture defined for the MRTK, this has been defined as: Open a new Proposal and related Tasks Submit an Architecture Draft or Outline Review and finalize the Architecture documentation Submit a PR implementing the Core feature interfaces and event datum (if applicable) Submit a PR Implementing any required SDK components Submit a PR Implementing feature demos or full scale Examples New Proposal Start by opening a new Proposal or Task describing the feature or the problem you want to solve. Describe the approach and how it fits into the version of the Mixed Reality Toolkit you're targeting. This will enable everyone have a discussion about the proposal and, hopefully, identify some potential pitfalls before any work is started. New Proposals will be reviewed and discussed during our weekly ship room meetings and if a proposal is accepted, supplemental tasks will then be created and assigned. Architecture Draft The first task once the initial proposal has been accepted, will be to draft the initial architecture document for the feature or work to be done. This document should typically be one or two pages long and include a high level overview of the feature and how it will relate to other parts of the Mixed Reality Toolkit. The draft must be easy to consume with key areas highlighted. The draft must include a list of the proposed core interfaces, configuration profiles, and event datum. The draft must include a simple graphic of the proposed architecture. Ensure that the architecture of the feature complies with the New Feature Requirements set out by the Core MRTK architecture. TODO: Add link to architecture draft template Once the draft is completed, this can be appended to the Proposal / Task issue on GitHub for final public review. Architecture Documentation Once the draft architecture is accepted, additional pull requests can be made to submit the final full architecture documents to the repository. TODO: Add link to the full architecture template Once the architecture document is approved, only then can the first code submissions can be made. Development can begin in your own private branch and complete as normal, however, the PR's submitted back to the core MRTK project should be submitted in stages to ensure the review and approval is as smooth as it can be (and ensure core changes do not impact other features) Core Implementation The initial work that should be submitted, is to implement: Definitions Interfaces Configuration profiles Event data If needed, the architectural document can be updated to align with any changes to the implementation. Please ensure that all existing Unit Tests and any new tests are all passing prior to submission. SDK Implementation Once the core interfaces and events are merged in to development, work can then be submitted for the SDK components. Adding the concrete implementation of the feature and testing against the supported platforms and unit tests. Example Implementation Once the SDK components are merged, then any demo scenes or updates to the example scenes can be submitted. Demos are for specific feature highlighting and demonstration Examples are full working scene learning examples New Feature Requirements Most feature implementations can be broken down into 3 main parts: The Feature Manager The Event Data (Optional) The Feature Handler (Optional) Manager Implementation Requirements Assembly Definitions for code outside of the MixedRealityToolkit/_Core folder. This ensures features are self-contained and have no dependencies to other features. This only applies to MixedRealityToolkit folder. Be defined using an interface found in MixedRealityToolkit/_Core/definitions/<FeatureName>System . A feature's concrete manager implementation should inherit directly from BaseManager or MixedRealityEventManager if they will raise events. A feature's concrete manager implementation should setup and verify scene is ready for that system to use in Initialize . A feature's concrete manager should also clean up after themselves removing anything created in the scene in Destroy . Be registered with the Mixed Reality Manager. If the feature is a core feature, this should be hard coded into the MixedRealityManager and added to the MixedRealityConfigurationProfile . This includes being able to specify a concrete implementation via dropdown using SystemType . Features should have a configuration profile that derives from a scriptable object. A default configuration profile located in MixedRealityToolkit-SDK/Profiles and be assigned in the default configuration profile for the Mixed Reality Manager If this feature is not a core feature, then it must be registered using the component configuration profile and implement IMixedRealityComponent . Have a default implementation located in MixedRealityToolkit-SDK/Features/<FeatureName> Events that can be raised with the system should be defined in the interface, with all the required parameters for initializing the event data. Event Data Implementation Requirements The Event Data defines exactly what data the handler is expected to receive from the event. All Event Datum for the feature should be defined in MixedRealityToolkit/_Core/EventDatum/<FeatureName> . All new Event Data classes should inherit from GenericBaseEventData Handler Implementation Requirements The Handler Interface defines each event a component should be listening for and the types of data passed. End users will implement the interface to execute logic based on the event data received. Handler interfaces should be defined in MixedRealityToolkit/_Core/Interfaces/<FeatureName>System/Handlers . Handler interfaces should inherit from UnityEngine.EventSystems.IEventSystemHandler Opt-in by default. To receive events from the system, the handler will need to register itself with the system to receive those events."
  },
  "MRTK-SDK.html": {
    "href": "MRTK-SDK.html",
    "title": "Mixed Reality Toolkit – User SDK approach (High level) | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit – User SDK approach (High level) Problem Statement Current examples / implementations are far too involved and require users to build new scripts / behaviours to build their project. Users complain the project is too hard to pick up and the current examples are not conducive to implementation (only demonstration) Objective To rearchitect the generic consumption of the Mixed Reality Toolkit to enable users to build scenes through easy to use “drag and drop” components. An example workflow should resemble: Consumer builds a 3D scene MRTK is added to the project Add a simple way to define walkable areas (Either through locomotion, free teleportation or restricted teleportation) Enable selecting of an object in a scene and configuring it for interaction (pickup, push, throw, etc) Enable animation interactions, e.g. opening doors Enable passive interactions, interacting one object with another that is in control by the player Quickly add Speech / Gesture / Focus / Controller services (purely a working set, needs refining) The ultimate goal is to deliver new users (and existing) with a rapid way to build projects / scenes, trying to cover the 80/20 rule. The simple promise for users building with these controls, is that they should always work, regardless of our plans under the hood for MRTK and preserve the projects they build. High Level required components In transforming the frontend of the MRTK for consumers to construct their projects / scenes with, we need to define and develop a simple set of prefabs / scripts / Editor options to quickly and easily add MRTK activities / behaviors to a 3D scene (or virtual scene in the case of HoloLens) These can be categorized as: Scene elements Scene elements relate to management style components / configuration to activate core components for the MRTK. Current elements would include: Camera (current MRCP) Managers (focus / gaze / controllers / motion controllers / etc) Controllers (scene object collections, interactions) Interaction controls Controls from how the user moves and interacts in the scene, ranging from: Locomotion / Teleportation control Locomotion / Teleportation boundaries / targets Speech commands Gestures Pointers / Hands Reaction Controls These components relate to things the user will interact with in a scene, enabling the player to affect the scene, ranging from: Grabbing Pushing Opening Pointer targets Buttons / UX Hot Zones (reaction-based events from either the player or an interaction control collision) Highlighting UX Systems In any project the user will need a friendly UX system to assist in their scenes, for example: Menu Systems (Grid / Radial) Layout components (Grid / Radial / Curved / Layered) Controller systems (menu overlays for hands / controllers) Tooltips Fade Assist This is not an extensive list and subject to debate. Initial Plans The proposal is to build a small subset of controls that utilize the current functionality of the MRTK, applying the above objectives and principles to define some of the high-Level components. An initial scene which should support both HL & Immersive (subject to discussion, separate may be easier for now), should walk a user in a common room style scenario. The example (lending from the Cliffhouse setup) should display a simple room, with hot spot teleport zones and activities that can be performed at each location, something akin to Rick and Morty VR or Job Simulator: Figure 1 : Reference examples (Rick and Morty / Job Simulator) The example should include a walk-through example for building the scene in Unity that any consumer can follow, starting from the empty room populated with some simple elements, e.g. Buttons that show text on a wall – showing button interaction Mugs that you can pick up (stretch and empty liquid :P) – showing grabbing / dropping A puzzle where you slide tiles around a maze – showing pushing constrained objects around More examples can be added to the same room, building from a simple start. We ensure we build the components to meet these objectives and refine as necessary. The example scene and starter components should then be added to the existing MRTK solution for testing / consumption whilst more are built. Work in progress The team have been working on the initial SDK setup scene with the first components, aims to have (as a start): A starting workroom with defined workplaces An area to pick up and interact with objects An area to push objects around, possibly pick up An area with buttons and UX interactive elements A UX panel display area Current working scene Figure 2 : Work in progress example scene 1 Elements being built in to the scene: Alcove for object to pick up, thinking a cube, cylinder, cup, picture frame A contained bin where balls will be dropped from *5 when buttons are pressed. Balls can be pushed around and possibly picked up and thrown Button table for push interaction UX items Display frame and information box area. Should also have some switchable indicators Drop points for adding new spheres For HoloLens, the room would not be displayed, and objects should interact with the environment, e.g. Window or shelf for the Alcove (1) Table for buttons (3) with Display elements in 4 floating Elements dropped from (5) will just drop and interact with the Spatial Mesh Reference Example VRTK are refactoring / rebuilding their new example scenes for their next release, which show an interesting path for example scenes: Figure 3 : Reference, VRTK new samples These do look cleaner and easier to digest, this doesn’t change how VRTK is currently implemented which is part of the work detailed here. But it is a great showcase for the quality level we should be aiming for which has started with Yoon’s updates to the examples."
  },
  "Assets/MixedRealityToolkit/StandardAssets/README.html": {
    "href": "Assets/MixedRealityToolkit/StandardAssets/README.html",
    "title": "Mixed Reality Toolkit - Resources | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - Resources A unique set of critical resources to the Mixed Reality Toolkit's operation. Note This should contain standard or reusable assets, as they should be catered for within the SDK project's \"Standard Assets\" Folder"
  },
  "Assets/MixedRealityToolkit/Utilities/README.html": {
    "href": "Assets/MixedRealityToolkit/Utilities/README.html",
    "title": "Mixed Reality Toolkit - Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - Utilities This folder contains all the MRTK reusable / comment functionality"
  },
  "Assets/MixedRealityToolkit/Utilities/Async/License.html": {
    "href": "Assets/MixedRealityToolkit/Utilities/Async/License.html",
    "title": "| Mixed Reality Toolkit Documentation",
    "keywords": "MIT License Copyright (c) 2016 Modest Tree Media Inc Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Assets/MixedRealityToolkit/Utilities/Async/ReadMe.html": {
    "href": "Assets/MixedRealityToolkit/Utilities/Async/ReadMe.html",
    "title": "| Mixed Reality Toolkit Documentation",
    "keywords": "Adapted from https://github.com/svermeulen/Unity3dAsyncAwaitUtil For details on usage see the associated blog post here ."
  },
  "Assets/MixedRealityToolkit.Examples/Demos/StandardShader/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/Demos/StandardShader/README.html",
    "title": "What is the \"MixedRealityToolkit/Standard\" shader? | Mixed Reality Toolkit Documentation",
    "keywords": "What is the \"MixedRealityToolkit/Standard\" shader? The MixedRealityToolkit/Standard shader is a collection of shading techniques for mimicking Microsoft's Fluent Design System within Unity 3D. The goal of this shader is to have a single, flexible shader that can achieve visuals similar to Unity's Standard Shader, implement Fluent Design System principles, and remain performant on mixed reality devices. Example Scenes To explore a Unity scene demonstrating materials which use many of the MixedRealityToolkit/Standard's features open Scenes\\MaterialGallery.unity within Unity's editor, or deploy to a mixed reality device. To compare the Unity Standard shader to the MRTK Standard shader open Scenes\\StandardMaterialComparison.unity within Unity's editor, or deploy to a mixed reality device. For a gallery of common MRTK materials open Scenes\\StandardMaterials.unity within Unity's editor, or deploy to a mixed reality device. Limitations Only one light source is supported, the directional light (additional light can be achieved using lightmapping)."
  },
  "Assets/MixedRealityToolkit.Examples/SDK/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/SDK/README.html",
    "title": "Mixed Reality Toolkit - SDK - Example Scenes | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Example Scenes This folder contains all the examples scenes user to demonstrate use of the MRTK in solutions. *Note, this are currently still a work in progress during the Mixed Reality Toolkit Beta."
  },
  "Assets/MixedRealityToolkit.Examples/SDK/Example01-BasicIntroduction/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/SDK/Example01-BasicIntroduction/README.html",
    "title": "Mixed Reality Toolkit - SDK - Example Scenes - Example Scene 01 | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Example Scenes - Example Scene 01 A most enlightening solution that really demonstrates the power of inspiration"
  },
  "Assets/MixedRealityToolkit.Examples/StandardAssets/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/StandardAssets/README.html",
    "title": "Mixed Reality Toolkit Examples - Standard Assets | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Examples - Standard Assets This folder contains general use assets only used in the example and demonstration scenes. These are simply a small subset of the larger gallery of standard assets provided in the MRTK SDK library."
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Controllers/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Controllers/README.html",
    "title": "Mixed Reality Toolkit - SDK - UX - Controller support | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - UX - Controller support As part of the Mixed Reality Toolkit SDK, we provide scripts / controls for managing and implementing controllers in your Mixed Reality project. Currently we provide components for: AttachToController Manages child gameobjects that are bound to a controller and enables / disables them when controllers are attached or removed. Ensures controller UI is only available when there is a controller. Controller Visualizer Provides a singular function for rendering controller models in a scene, whether it's a generic model for all controller, or controller specific models. The framework is flexible enough to allow you to provide offsets to rotate and reposition the model as it's drawn Scaling isn't affected, it's up to you to pre-scale models appropriate to use in your Mixed Reality Scene Controller Visualizer usage Using the visualizer is extremely simple, just add it to an existing GameObject in your scene and provided you have configured your controller correctly, they will simply be instantiated into the scene at runtime when controllers are detected. Check the documentation on configuring Controller Profiles for more details: MixedReality Controller Configuration Profile configuration Controller Visualizer notes The controller visualizer is still in active development, new features that will be added in the future include: Ability to interrogate a given model to extract attachment nodes Ability to use Animation configuration for a given model Configuration to be able to animate models from actions by animation or change in pose"
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Tooltips/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Tooltips/README.html",
    "title": "Mixed Reality Toolkit - SDK - UX - Tooltips support | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - UX - Tooltips support As part of the Mixed Reality Toolkit SDK, we provide scripts / controls for managing and implementing tooltips in your Mixed Reality project. Currently we provide components for: Tooltips Manages the bulk of the tooltip display, content sizing and anchor behaviors. Also contains the text field for what a tooltip's text field should convey. Provides a field to show the connected Line Data Provider (see Lines section) Lines Mixed Reality Toolkit has a line concept built on top of Unity's LineRenderer concept allowing for more expressive lines. Begin with a LineDataProvider (Such as SimpleLine, Spline, or Parabola). A tooltip will look for a LineDataProvider automatically and then attempt to use it to connect the tooltip to the indicated Anchor. The line appearance and behavior can be styled and controlled in a MixedRealityLineRenderer component. Note: Not all LineDataProviders will work with Tooltips in a predictable manner. SimpleLine, Spline, ParabolaConstrainted are the reasonable examples (and a prefab for each exists) Ellipse, Rectangle, ParabolaLine and ParabolaPhysicalLine tend to be less reliable or produce non-useful results. TooltipSpawner A TooltipSpawner is a mostly standalone script that receives Focus or Input events (assuming it has a collider) that can be used to instantiate a tooltip at a particular location with certain behaviors. You can control the appear and vanish conditions as well as how it responds to input. If you are using a TooltipSpawner, customize the tooltip prefab in the [Tool Tip Prefab] field to change the line/tooltip appearance."
  },
  "Assets/MixedRealityToolkit.SDK/Profiles/MixedRealityControllerConfigurationProfile.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Profiles/MixedRealityControllerConfigurationProfile.html",
    "title": "Mixed Reality Controller Configuration Profile | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Controller Configuration Profile When you need to use input controllers for your Mixed Reality project, they are registered and configured centrally within the Controller configuration profile as you can see here: This enables you to very quickly define which SDK's / controllers you want to support in your project and configure how each are intended to work. The configuration is broken down in to several key components, as detailed below: Main Controller Template definition In the first section of the configuration, the options are detailed as follows: Render Motion Controllers This defines whether or not controllers should be rendered or not. By not adding a ControllerVisualizer in to the scene also has the same effect. This also disabled the Global Model options below. Use Default Models (for future implementation) This option will use the models for the controller direct from the SDK (where available), so that you don't have to configure a custom model. Global Left / Right hand models These allow you at the top level to define the default model that will be drawn for each controlling hand. If no hand is available, the Left most model will be used by default. To alter the position and rotation of the displayed model in relation to the Controller pose, then update the controllers Model Prefab transform values. See the \"Example Models\" section below for the controller models and their recommended transform settings provided in the SDK's \" Standard Assets \" folder. Add a New Controller Template This enables you to add a new controller definition (detailed below) to the profile to add another supported SDK. Controller Template Each controller template allows you to configure any of the supported controllers for the various SDK's that have been enabled through the Mixed Reality Toolkit. Each controller is added by SDK and the prevailing hand. Any SDK Controller types or hands NOT configured will not be detected or used in a running project. The options for configuring a template are detailed as follows: Controller Your custom name for the controller, just for easy reference Controller Type (Work in progress, see list for enabled devices) A drop down list of supported controllers by the Mixed Reality Toolkit, namely: Windows Mixed Reality Motion Controllers OpenVR Default (fallback) controllers Oculus Touch Vive Wand Vive Knuckles (experimental as no one has any, using Unity spec) OpenXR To be supported when there is an OpenXR specification Windows Gaming (these are coming soon*) Arcade stick Gamepad Joystick Racing Wheel Simulator (coming soon) Handedness Which hand is configured for this controller definition Both does not configure all controllers at this time. Use Default model For this controller only, use the model for the controller direct from the SDK (where available), so that you don't have to configure a custom model. This overrides the Global Model setting Override Model Like the Global Model options, allows you to provide a model to be drawn for this specific controller. This overrides the Global Model setting Interaction Mappings The interaction mappings allow you to map logical input actions for use in your project to the various controller inputs available from the physical device. These are different for each controller type, as shown below: Motion Controller Oculus Touch Vive Wand In the future custom mappings may become available, for now they are defined per the devices own specification according to the input definitions set out by Unity The Action each input can perform, is completely up to you. See the Input Action configuration profile for more information. Example Models The models provided in the Mixed Reality Toolkit \"Standard Assets\" folder are as follows: These can be found in \"Mixed Reality Toolkit SDK / Standard Assets / Controllers\" Debug Controllers The Mixed Reality Toolkit provides a set of basic Gizmo style controllers, used to help align your models to the controller position output by the SDK, to help with offset settings. Note, the ability to display BOTH the Gizmo and the controller models isn't supported as yet. This will be included in a future release. We recommend applying the following Prefab transform values to align the controller model when using to align with the users view: Position - no change Rotation - X 90 (left) -90 (right), Y 0 , Z 0 Additional models available to download Oculus Hands (provided via the Oculus Opensource project) Oculus provide two basic hand models, including animation (although not available through the visualizer currently). Source -> Oculus Hand Package download We recommend applying the following Prefab transform values to align the controller model with the users view: Position - no change Rotation - X 0, Y 0 , Z 90 (left) -90 (right) Oculus Rift touch controllers (provided via the Oculus Opensource project) Oculus also provide animated controller models for their touch controllers. Source -> Oculus Sample Framework for Unity Project We recommend applying the following Prefab transform values to align the controller model when using to align with the users view: Position - no change Rotation - no change HTC Vive wand controllers (available in the SteamVR SDK) Steam provide basic models for the HTC Vive Wand controllers. Source -> Included as part of the Unity SteamVR SDK, or the Steam VR Client \"(Steam Install Folder)\\Steam\\steamapps\\common\\SteamVR\\resources\\rendermodels\" If you use Steams Models, we recommend applying the following Prefab transform values to align the controller model when using to align with the users view: Position - no change Rotation - no change"
  },
  "Assets/MixedRealityToolkit.SDK/Profiles/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Profiles/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Profiles | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Profiles This folder contains example MRTK profiles used to configure your solution. This includes: MixedRealityConfigurationProfile The main configuration profile for the Mixed Reality Toolkit, hosting the start up and manager initialization options for the framework. MixedRealityInputActionsProfile Input Actions catalogue for your project, defining the logical actions your project will perform for any given input / axis type MixedRealityControllerConfigurationProfile Central configuration file for controllers to be used in your project. Allows the registration of controllers for various SDK's and map the inputs of those controllers to the logical actions used in your project. Additionally, allows you to set the models to be used for those controllers, whether they are the SDK's default, a single generic model per hand or specific models for each controller type. MixedRealityCameraProfile Camera profile options for the project, including clipping and skybox settings. MixedRealitySpeechCommandsProfile Similar to the Input Actions, allows you to define a set of recognised keywords and assign them to logical Input actions in your project. MixedRealityDiagnosticsProfile Configuration for showing diagnostic data while using your project."
  },
  "Documentation/Architecture/SpatialAwareness/SpatialAwarenessMeshDisplayOptions.html": {
    "href": "Documentation/Architecture/SpatialAwareness/SpatialAwarenessMeshDisplayOptions.html",
    "title": "SpatialAwarenessMeshDisplayOptions Enumeration | Mixed Reality Toolkit Documentation",
    "keywords": "SpatialAwarenessMeshDisplayOptions Enumeration Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.Defintitions.SpatialAwareness public enum SpatialMeshDisplayOptions { /// <summary> /// Do not display the spatial mesh /// </summary> None = 0, /// <summary> /// Display the spatial mesh using the configured material /// </summary> Visible, /// <summary> /// Display the spatial mesh using the configured occlusion material /// </summary> Occlusion } See Also Mixed Reality Spatial Awareness System Architecture"
  },
  "Documentation/Architecture/SpatialAwareness/SpatialAwarenessMeshLevelOfDetail.html": {
    "href": "Documentation/Architecture/SpatialAwareness/SpatialAwarenessMeshLevelOfDetail.html",
    "title": "SpatialAwarenessMeshLevelOfDetail Enumeration | Mixed Reality Toolkit Documentation",
    "keywords": "SpatialAwarenessMeshLevelOfDetail Enumeration Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.Defintitions.SpatialAwareness public enum SpatialAwarenessMeshLevelOfDetail { /// <summary> /// The custom level of detail allows specifying a custom value for /// MeshTrianglesPerCubicMeter. /// </summary> Custom = -1, /// <summary> /// The coarse level of detail is well suited for identifying large /// environmental features, such as floors and walls. /// </summary> Coarse = 0, /// <summary> /// The fine level of detail is well suited for using as an occlusion /// mesh. /// </summary> Fine = 2000 } See Also Mixed Reality Spatial Awareness System Architecture"
  },
  "Documentation/Architecture/SpatialAwareness/SpatialAwarenessSurfaceTypes.html": {
    "href": "Documentation/Architecture/SpatialAwareness/SpatialAwarenessSurfaceTypes.html",
    "title": "SpatialAwarenessSurfaceTypes Enumeration | Mixed Reality Toolkit Documentation",
    "keywords": "SpatialAwarenessSurfaceTypes Enumeration Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.Defintitions.SpatialAwareness The SpatialAwarenessSurfaceTypes enumeration is defined as a set of flags that enable applications to request only specific types of surfaces (ex: Floors and Walls) as well as providing the ability to create generalized requests (ex: all horizontal surfaces) [System.Flags] public enum SpatialAwarenessSurfaceTypes { /// <summary> /// An unknown / unsupported type of surface. /// </summary> Unknown = 1 << 0, /// <summary> /// The environment’s floor. /// </summary> Floor = 1 << 1, /// <summary> /// The environment’s ceiling. /// </summary> Ceiling = 1 << 2, /// <summary> /// A wall within the user’s space. /// </summary> Wall = 1 << 3, /// <summary> /// A raised, horizontal surface such as a shelf. /// </summary> /// <remarks> /// Platforms, like floors, that can be used for placing objects /// requiring a horizontal surface. /// </remarks> Platform = 1 << 4 } See Also Mixed Reality Spatial Awareness System Architecture"
  },
  "Documentation/Architecture/SpatialAwareness/SpatialAwarenessSystemArchitecture.html": {
    "href": "Documentation/Architecture/SpatialAwareness/SpatialAwarenessSystemArchitecture.html",
    "title": "Mixed Reality Toolkit Spatial Awareness System Architecture | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Spatial Awareness System Architecture The Mixed Reality Spatial Awareness System is intended to abstract the specific implementation details of platforms, such as the Microsoft HoloLens, that provide support for mapping the real-world and providing the data to Mixed Reality experiences. Where possible, we are designing for common functionality (ex: identification of planar surfaces) well as access to the lowest level of available data (ex: mesh or point data). It is expected that many platforms may not support one or more of the interfaces defined herein. In fact, some may not support spatial awareness at all. On those platforms, the system must gracefully fail and provide the developer with appropriate data (null, empty collections, etc.) in return. Each interface defined will implement one or more Properties, Methods and/or Events (PMEs) that can be accessed by application code. Interfaces IMixedRealitySpatialAwarenessSystem IMixedRealitySpatialAwarenessMeshHandler IMixedRealitySpatialAwarenessSurfaceFindingHandler IMixedRealitySpatialObserver Classes MixedRealitySpatialAwarenessSystem MixedRealitySpatialAwarenessMeshHandler MixedRealitySpatialAwarenessPlanarSurfaceHandler Enumerations SpatialAwarenessMeshDisplayOptions SpatialAwarenessMeshLevelOfDetail SpatialAwarenessSurfaceTypes Event Data Types MixedRealitySpatialAwarenessEventData Configuration Profile MixedRealitySpatialAwarenessProfile MixedRealitySpatialAwarenessProfileInspector Example Implementation The Mixed Reality Toolkit's default implementation of the spatial awareness system can be found in the Assets/MixedRealityToolkit/SDK/Features/SpatialAwarenessSystem folder. This implementation can be used as an example of how to build your own spatial awareness system. It is well documented and demonstrates each of the features described in this architecture specification."
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Models/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Models/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Models | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Models This folder contains all the individual model assets used to build MRTK solutions"
  },
  "Documentation/MixedRealityConfigurationGuide.html": {
    "href": "Documentation/MixedRealityConfigurationGuide.html",
    "title": "Mixed Reality Toolkit Configuration Guide | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Configuration Guide The Mixed Reality Toolkit centralizes as much of the configuration required to manage the toolkit as possible (except for true runtime \"things\"). This guide is a simple walkthrough for each of the configuration screens currently available for the toolkit, more in-depth guides for each of the features is coming soon. Configuration profiles provide reusable blocks of configuration that can be used and swapped out at runtime (with the exception of the InputActions profile) to meet the demands for most Mixed Reality projects. This allows you to style your configuration for different input types (Driving vs Flying) or different behavior's your project needs. For more details on profile use, please check the Configuration Profile Usage Guide (Coming soon() In some cases, we also allow you to swap out the underlying system that provides a capability with either your own service or an alternate implementation (e.g. swapping out the speech provider from an OS version to one on Azure) For more detail on writing your own compatible systems for use in the toolkit, please see the Guide to building Registered Services (Coming soon) The main Mixed Reality Toolkit Configuration profile The main configuration profile, which is attached to the MixedRealityToolkit GameObject in your Scene, provides the main entry point for the Toolkit in your project. The Mixed Reality Toolkit \"locks\" the default configuration screens to ensure you always have a common start point for your project and we encourage you to start defining your own settings as your project evolves. All the \"default\" profiles for the Mixed Reality Toolkit can be found in the SDK project in the following folder Assets\\MixedRealityToolkit-SDK\\Profiles When you open the main Mixed Reality Toolkit Configuration Profile, you will see the following screen in the inspector: If you select a MixedRealityToolkitConfigurationProfile asset without the MixedRealityToolkit in the scene, it will ask you if you want the MRTK to automatically setup the scene for you. This is optional, however, there must be an active MixedRealityToolkit object in the scene to access all the configuration screens. This houses the current active runtime configuration for the project. Note, almost any profile can be swapped out at runtime, with the exception of the InputActions configuration (see later). The profiles with then automatically adapt to the new configuration / runtime environment automatically. From here you can navigate to all the configuration profiles for the MRTK, including: Experience Settings Camera Settings Input System Settings Boundary Settings Teleporting Settings Spatial Awareness Settings Diagnostics Settings Additional Services Settings Input Actions Settings Input Actions Rules Pointer Configuration Gestures Configuration Speech Commands Controller Mapping Configuration Controller Visualization Settings These configuration profiles are detailed below in their relevant sections: From here you can navigate to all the configuration profiles for the MRTK, including: Experience Settings Located on the main Mixed Reality Toolkit configuration page, this setting defines the default operation for the Mixed Reality environment for your project. Camera Settings The camera settings define how the camera will be setup for your Mixed Reality project, defining the generic clipping, quality and transparency settings. Clicking on the \"Back to Configuration Profile\" button will take you back to the main Mixed Reality Toolkit Configuration screen. Input System Settings The Mixed Reality Project provides a robust and well-trained input system for routing all the input events around the project which is selected by default. The MRTK also allows you to write your own Input System and you can use the selection below to switch the system used without rewriting the toolkit. For more information on writing your own systems, please see this guide to building Registered Services (Coming soon) Behind the Input System provided by the MRTK are several other systems, these help to drive and manage the complex inter-weavings required to abstract out the complexities of a multi-platform / mixed reality framework. Each of the individual profiles are detailed below: Focus Settings Input Actions Settings Input Actions Rules Pointer Configuration Gestures Configuration Speech Commands Controller Mapping Configuration Controller Visualization Settings Clicking on the \"Back to Configuration Profile\" button will take you back to the main Mixed Reality Toolkit Configuration screen. Boundary Visualization Settings The boundary system translates the perceived boundary reported by the underlying platforms boundary / guardian system. The Boundary visualizer configuration gives you the ability to automatically show the recorded boundary within your scene relative to the user's position. The boundary will also react / update based on where the user teleports within the scene. Clicking on the \"Back to Configuration Profile\" button will take you back to the main Mixed Reality Toolkit Configuration screen. Teleportation System Selection The Mixed Reality Project provides a full featured Teleportation system for managing teleportation events in the project which is selected by default. The MRTK also allows you to write your own Teleportation System and you can use the selection below to switch the system used without rewriting the toolkit. For more information on writing your own systems, please see this guide to building Registered Services (Coming soon) Spatial Awareness Settings The Mixed Reality Project provides a rebuilt Spatial Awareness system for working with spatial scanning systems in the project which is selected by default. You can view the architecture behind the MRTK Spatial Awareness system here . The MRTK also allows you to write your own Spatial Awareness System and you can use the selection below to switch the system used without rewriting the toolkit. For more information on writing your own systems, please see this guide to building Registered Services (Coming soon) The Mixed Reality Toolkit Spatial Awareness configuration lets you tailor how the system starts, whether it is automatically when the application starts or later programmatically as well as setting the extents for the Field of View. It also lets you configure the Mesh and surface settings, further customizing how your project understands the environment around you. This is only applicable for devices that can provide a scanned environment, such as the HoloLens (and other devices in the future) Note, the Spatial Awareness system is still in active development, please report any issues or requests in the MRTK Issues section on GitHub Clicking on the \"Back to Configuration Profile\" button will take you back to the main Mixed Reality Toolkit Configuration screen. Diagnostics Settings An optional but highly useful feature of the MRTK is the plugin Diagnostics functionality. This presents a style of debug log in to the scene The MRTK also allows you to write your own Diagnostic System and you can use the selection below to switch the system used without rewriting the toolkit. For more information on writing your own systems, please see this guide to building Registered Services (Coming soon) The diagnostics profile provides several simple systems to monitor whilst the project is running, including a handy On/Off switch to enable / disable the display pane in the scene. Clicking on the \"Back to Configuration Profile\" button will take you back to the main Mixed Reality Toolkit Configuration screen. Additional Services Settings One of the more advanced areas of the Mixed Reality Toolkit is its service locator pattern implementation which allows the registering of any \"Service\" with the framework. This allows the framework to be both extended with new features / systems easily but also allows for projects to take advantage of these capabilities to register their own runtime components. You can read more about the underlying framework and it's implementation in Stephen Hodgson's article on the Mixed Reality Framework Any registered service still gets the full advantage of all of the Unity events, without the overhead and cost of implementing a MonoBehaviour or clunky singleton patterns. This allows for pure C# components with no scene overhead for running both foreground and background processes, e.g. spawning systems, runtime gamelogic, or practically anything else. Check out the Guide to building Registered Services (Coming Soon) for more details about creating your own services Clicking on the \"Back to Configuration Profile\" button will take you back to the main Mixed Reality Toolkit Configuration screen. Input Actions Settings Input Actions provide a way to abstract any physical interactions and input from a runtime project. All physical input (from Controllers / hands / mouse / etc) is translated in to a logical Input Action for use in your runtime project. This ensures no matter where the input comes from, your project simply implements these actions as \"Things to do\" or \"Interact with\" in your scenes. To create a new Input Action, simply click the \"Add a new Action\" button and enter a friendly text name for what it represents. You then only need select an Axis (the type of data) the action is meant to convey, or in the case of physical controllers, the physical input type it can be attached to, for example: Axis Constraint Data Type Description Example use None No data Used for an empty action or event Event Trigger Raw (reserved) object Reserved for future use N/A Digital bool A boolean on or off type data A controller button Single Axis float A single precision data value A ranged input, e.g. a trigger Dual Axis Vector2 A dual float type date for multiple axis A Dpad or Thumbstick Three Dof Position Vector3 Positional type data from with 3 float axis 3D position style only controller Three Dof Rotation Quaternion Rotational only input with 4 float axis A Three degrees style controller, e.g. Oculus Go controller Six Dof Mixed Reality Pose (Vector3, Quaternion) A position and rotation style input with both Vector3 and Quaternion components A motion controller or Pointer Events utilizing Input Actions are not limited to physical controllers and can still be utilized within the project to have runtime effects generate new actions. Input Actions are one of the few components which is not editable at runtime, they are a design time configuration only. This profile should not be swapped out whilst the project is running due to the framework (and your projects) dependency on the ID's generated for each action. Clicking on the \"Back to Configuration Profile\" button will take you back to the Mixed Reality Toolkit Input System Settings screen. Input Actions Rules Input Action Rules provide a way to automatically translate an event raised for one Input Action in to different actions based on its data value. These are managed seamlessly within the framework and do not incur any performance costs. For example, converting the single Dual Axis input event from a DPad in to the 4 corresponding Dpad Up / DPad Down / Dpad Left / Dpad Right actions. (as shown in the image below) This could also be done i your own code, but seeing as this was a very common patter, the framework provides a mechanism to do this \"out of the box\" Input Action Rules can be configured for any of the available input axis. However, Input actions from one Axis type can be translated to another Input Action of the same Axis type. You can map a Dual Axis action to another Dual Axis action, but not to a Digital or None action. Clicking on the \"Back to Configuration Profile\" button will take you back to the Mixed Reality Toolkit Input System Settings screen. Pointer Configuration Pointers are used to drive interactivity in the scene from any input device, giving both a direction and hit test with any object in a scene (that has a collider attached, or is a UI component). Pointers are by default automatically configured for controllers, headsets (gaze/focus) and mouse/touch input. Pointers can also be visualized within the active scene using one of the many Line components provided by the Mixed Reality Toolkit, or any of your own if they implement the MRTK IMixedRealityPointer interface. See the Guide to Pointers documentation Coming Soon for more information on creating your own pointers. Clicking on the \"Back to Configuration Profile\" button will take you back to the Mixed Reality Toolkit Input System Settings screen. Pointing Extent: Determines the global pointing extent for all pointers, including gaze. Pointing Raycast Layer Masks: Determines which layers pointers will raycast against. Debug Draw Pointing Rays: A debug helper for visualizing the rays used for raycasting. Debug Draw Pointing Rays Colors: A set of colors to use for visualizing. Gaze cursor prefab: Makes it easy to specify a global gaze cursor for any scene. There's an additional helper button to quickly jump to the Gaze Provider to override some specific values for Gaze if needed. Gestures Configuration Gestures are a system specific implementation allowing you to assign Input Actions to the various \"Gesture\" input methods provided by various SDK's (e.g. HoloLens). Note, the current implementation is for the HoloLens only and will be enhanced for other systems as they are added to the Toolkit in the future (no dates yet). Clicking on the \"Back to Configuration Profile\" button will take you back to the Mixed Reality Toolkit Input System Settings screen. Speech Commands Like Gestures, some runtime platforms also provide intelligent Speech to Text functionality with the ability to generate \"Commands\" that can be received by a Unity project. This configuration profile allows you to configure registered \"words\" and translate them in to Input Actions that can be received by your project. (they can also be attached to keyboard actions if required) The system currently only supports speech when running on Windows 10 platforms, e.g. HoloLens and Windows 10 desktop and will be enhanced for other systems as they are added to the Toolkit in the future (no dates yet). Clicking on the \"Back to Configuration Profile\" button will take you back to the Mixed Reality Toolkit Input System Settings screen. Controller Mapping Configuration One of the core configuration screens for the Mixed Reality Toolkit is the ability to configure and map the various types of controllers that can be utilized by your project. The configuration screen below allows you to configure any of the controllers currently recognized by the toolkit. The MRTK provides a default configuration for the following controllers / systems: Mouse (including 3D spatial mouse support) Touch Screen Xbox controllers Windows Mixed Reality controllers HoloLens Gestures HTC Vive wand controllers Oculus Touch controllers Oculus Remote controller Generic OpenVR devices (advanced users only) Clicking on the Image for any of the pre-built controller systems allows you to configure a single Input Action for all its corresponding inputs, for example, see the Oculus Touch controller configuration screen below: There is also an advanced screen for configuring other OpenVR or Unity input controllers that are not identified above. Clicking on the \"Back to Configuration Profile\" button will take you back to the Mixed Reality Toolkit Input System Settings screen. Controller Visualization Settings In addition to the Controller mapping, a separate configuration profile is provided to customize how your controllers are presented within your scenes. This can be configured at a \"Global\" (all instances of a controller for a specific hand) or specific to an individual controller type / hand. The MRTK does not currently support native SDK's controller models as Unity does not yet provide the capability to load / render gLTF models, which is the default type of models provided by most SDKs. This will be enhanced when this is available. If your controller representation in the scene needs to be offset from the physical controller position, then simply set that offset against the controller model's prefab. (e.g. setting the transform position of the controller prefab with an offset position) Clicking on the \"Back to Configuration Profile\" button will take you back to the Mixed Reality Toolkit Input System Settings screen."
  },
  "Documentation/Architecture/SpatialAwareness/IMixedRealitySpatialAwarenessMeshHandler.html": {
    "href": "Documentation/Architecture/SpatialAwareness/IMixedRealitySpatialAwarenessMeshHandler.html",
    "title": "IMixedRealitySpatialAwarenessMeshHandler Interface | Mixed Reality Toolkit Documentation",
    "keywords": "IMixedRealitySpatialAwarenessMeshHandler Interface Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers void OnMeshAdded( MixedRealitySpatialEventData eventData) Called when a new surface mesh has been identified by the spatial awareness system. void OnMeshUpdated( MixedRealitySpatialEventData eventData) Called when an existing surface mesh has been modified by the spatial awareness system. OnMeshDeleted( MixedRealitySpatialEventData eventData) Called when an existing surface mesh has been discarded by the spatial awareness system. See Also Mixed Reality Spatial Awareness System Architecture MixedRealitySpatialAwarenessMeshHandler Class IMixedRealitySpatialAwarenessSystem"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.AnimatedCursorData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.AnimatedCursorData.html",
    "title": "Struct AnimatedCursorData | Mixed Reality Toolkit Documentation",
    "keywords": "Struct AnimatedCursorData Data struct for cursor state information for the Animated Cursor, which leverages the Unity animation system. This defines a modification to an Unity animation parameter, based on cursor state. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct AnimatedCursorData Constructors AnimatedCursorData(String, CursorStateEnum, AnimatorParameter) Constructor. Declaration public AnimatedCursorData(string name, CursorStateEnum cursorState, AnimatorParameter parameter) Parameters Type Name Description String name Name of the animation state for the cursor. CursorStateEnum cursorState The enum state for the cursor's animation. AnimatorParameter parameter The linked animation parameter to used for the cursor state. Properties CursorState The Cursor State for this specific animation. Declaration public CursorStateEnum CursorState { get; } Property Value Type Description CursorStateEnum Name The name of this specific cursor state. Declaration public string Name { get; } Property Value Type Description String Parameter Animator parameter definition for this cursor state. Declaration public AnimatorParameter Parameter { get; } Property Value Type Description AnimatorParameter"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers.IMixedRealitySpatialAwarenessObservationHandler-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers.IMixedRealitySpatialAwarenessObservationHandler-1.html",
    "title": "Interface IMixedRealitySpatialAwarenessObservationHandler<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessObservationHandler<T> Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessObservationHandler<T> : IEventSystemHandler Type Parameters Name Description T Methods OnObservationAdded(MixedRealitySpatialAwarenessEventData<T>) Called when a spatial observer adds a new observation. Declaration void OnObservationAdded(MixedRealitySpatialAwarenessEventData<T> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData <T> eventData Data describing the event. OnObservationRemoved(MixedRealitySpatialAwarenessEventData<T>) Called when a spatial observer removes a previous observation. Declaration void OnObservationRemoved(MixedRealitySpatialAwarenessEventData<T> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData <T> eventData Data describing the event. OnObservationUpdated(MixedRealitySpatialAwarenessEventData<T>) Called when a spatial observer updates a previous observation. Declaration void OnObservationUpdated(MixedRealitySpatialAwarenessEventData<T> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData <T> eventData Data describing the event."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessPlanarObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessPlanarObject.html",
    "title": "Class SpatialAwarenessPlanarObject | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialAwarenessPlanarObject Inheritance Object BaseSpatialAwarenessObject SpatialAwarenessPlanarObject Inherited Members BaseSpatialAwarenessObject.Id BaseSpatialAwarenessObject.GameObject BaseSpatialAwarenessObject.Renderer BaseSpatialAwarenessObject.Filter BaseSpatialAwarenessObject.CleanObject() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public class SpatialAwarenessPlanarObject : BaseSpatialAwarenessObject Constructors SpatialAwarenessPlanarObject() constructor Declaration public SpatialAwarenessPlanarObject() Properties Collider Declaration public BoxCollider Collider { get; set; } Property Value Type Description BoxCollider Methods CreateSpatialObject(Vector3, Int32, String, Int32) Creates a SpatialAwarenessPlanarObject . Declaration public static SpatialAwarenessPlanarObject CreateSpatialObject(Vector3 size, int layer, string name, int planeId) Parameters Type Name Description Vector3 size Int32 layer String name Int32 planeId Returns Type Description SpatialAwarenessPlanarObject SpatialAwarenessPlanarObject containing the fields that describe the plane."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.RayExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.RayExtensions.html",
    "title": "Class RayExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class RayExtensions Extension methods for Unity's Ray struct Inheritance Object RayExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class RayExtensions Methods IsValid(Ray) Determines whether or not a ray is valid. Declaration public static bool IsValid(this Ray ray) Parameters Type Name Description Ray ray The ray being tested. Returns Type Description Boolean True if the ray is valid, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityInputSystemProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityInputSystemProfileInspector.html",
    "title": "Class MixedRealityInputSystemProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputSystemProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityInputSystemProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputSystemProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.EventSystemExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.EventSystemExtensions.html",
    "title": "Class EventSystemExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class EventSystemExtensions Extension methods for Unity's EventSystem Inheritance Object EventSystemExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class EventSystemExtensions Methods Raycast(EventSystem, PointerEventData, LayerMask[]) Executes a raycast all and returns the closest element. Fixes the current issue with Unity's raycast sorting which does not consider separate canvases. Declaration public static RaycastResult Raycast(this EventSystem eventSystem, PointerEventData pointerEventData, LayerMask[] layerMasks) Parameters Type Name Description EventSystem eventSystem PointerEventData pointerEventData LayerMask [] layerMasks Returns Type Description RaycastResult RaycastResult if hit, or an empty RaycastResult if nothing was hit"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.FloatExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.FloatExtensions.html",
    "title": "Class FloatExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class FloatExtensions Extension methods for the .Net Float struct Inheritance Object FloatExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class FloatExtensions Methods Approximately(Single, Single, Single) Checks if two numbers are approximately equal. Similar to , but the tolerance can be specified. Declaration public static bool Approximately(this float number, float other, float tolerance) Parameters Type Name Description Single number One of the numbers to compare. Single other The other number to compare. Single tolerance The amount of tolerance to allow while still considering the numbers approximately equal. Returns Type Description Boolean True if the difference between the numbers is less than or equal to the tolerance, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.IpConfigInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.IpConfigInfo.html",
    "title": "Class IpConfigInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class IpConfigInfo Inheritance Object IpConfigInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class IpConfigInfo Fields Adapters Declaration public AdapterInfo[] Adapters Field Value Type Description AdapterInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.MixedRealityControllerAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.MixedRealityControllerAttribute.html",
    "title": "Class MixedRealityControllerAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerAttribute Attach to a controller device class to make it show up in the controller mapping profile. Inheritance Object Attribute MixedRealityControllerAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class MixedRealityControllerAttribute : Attribute, _Attribute Constructors MixedRealityControllerAttribute(SupportedControllerType, Handedness[], String, MixedRealityControllerConfigurationFlags) Declaration public MixedRealityControllerAttribute(SupportedControllerType supportedControllerType, Handedness[] supportedHandedness, string texturePath = \"\", MixedRealityControllerConfigurationFlags flags = null) Parameters Type Name Description SupportedControllerType supportedControllerType Handedness [] supportedHandedness String texturePath MixedRealityControllerConfigurationFlags flags Properties Flags Additional flags for configuring controller capabilities. Declaration public MixedRealityControllerConfigurationFlags Flags { get; } Property Value Type Description MixedRealityControllerConfigurationFlags SupportedControllerType The SupportedControllerType to which the controller device belongs to. Declaration public SupportedControllerType SupportedControllerType { get; } Property Value Type Description SupportedControllerType SupportedHandedness List of handedness values supported by the respective controller. Declaration public Handedness[] SupportedHandedness { get; } Property Value Type Description Handedness [] TexturePath Path to image file used when displaying an icon in the UI. Declaration public string TexturePath { get; } Property Value Type Description String Methods Find(Type) Convenience function for retrieving the attribute given a certain class type. Declaration public static MixedRealityControllerAttribute Find(Type type) Parameters Type Name Description Type type Returns Type Description MixedRealityControllerAttribute Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.MixedRealityCameraProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.MixedRealityCameraProfile.html",
    "title": "Class MixedRealityCameraProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityCameraProfile This Scriptable Object tells you if your head mounted display (HMD) is a transparent device or an occluded device. Based on those values, you can customize your camera and quality settings. Inheritance Object BaseMixedRealityProfile MixedRealityCameraProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions Assembly : cs.temp.dll.dll Syntax public class MixedRealityCameraProfile : BaseMixedRealityProfile Properties IsCameraPersistent Should the camera be reused in each scene? If so, then the camera's root will be flagged so it is not destroyed when the scene is unloaded. Declaration public bool IsCameraPersistent { get; } Property Value Type Description Boolean IsOpaque Is the current camera displaying on an Opaque (AR) device or a VR / immersive device Declaration public bool IsOpaque { get; } Property Value Type Description Boolean Methods ApplySettingsForOpaqueDisplay() Declaration public void ApplySettingsForOpaqueDisplay() ApplySettingsForTransparentDisplay() Declaration public void ApplySettingsForTransparentDisplay()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.BaseSpatialAwarenessObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.BaseSpatialAwarenessObject.html",
    "title": "Class BaseSpatialAwarenessObject | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseSpatialAwarenessObject Inheritance Object BaseSpatialAwarenessObject SpatialAwarenessMeshObject SpatialAwarenessPlanarObject Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public class BaseSpatialAwarenessObject : IMixedRealitySpatialAwarenessObject Constructors BaseSpatialAwarenessObject() constructor Declaration protected BaseSpatialAwarenessObject() Properties Filter Declaration public MeshFilter Filter { get; set; } Property Value Type Description MeshFilter GameObject Declaration public GameObject GameObject { get; set; } Property Value Type Description GameObject Id Declaration public int Id { get; set; } Property Value Type Description Int32 Renderer Declaration public MeshRenderer Renderer { get; set; } Property Value Type Description MeshRenderer Methods CleanObject() Declaration public virtual void CleanObject()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.CreateProfileMenuItemIndices.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.CreateProfileMenuItemIndices.html",
    "title": "Enum CreateProfileMenuItemIndices | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CreateProfileMenuItemIndices Defines the display order of the Assets > Create > Mixed Reality Toolkit > Profiles menu items. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum CreateProfileMenuItemIndices Fields Name Description Assembly BoundaryVisualization Camera Configuration ControllerMapping ControllerVisualization Diagnostics Gestures Input InputActionRules InputActions Pointer RegisteredServiceProviders SpatialAwareness SpatialAwarenessMeshObserver SpatialAwarenessSurfaceObserver Speech"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.RecognitionConfidenceLevel.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.RecognitionConfidenceLevel.html",
    "title": "Enum RecognitionConfidenceLevel | Mixed Reality Toolkit Documentation",
    "keywords": "Enum RecognitionConfidenceLevel Indicates the confidence level of a recognized event. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum RecognitionConfidenceLevel Fields Name Description High Low Medium Unknown"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsApiChecker.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsApiChecker.html",
    "title": "Class WindowsApiChecker | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsApiChecker Helper class for determining if a Windows API contract is available. See https://docs.microsoft.com/en-us/uwp/extension-sdks/windows-universal-sdk for a full list of contracts. Inheritance Object WindowsApiChecker Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class WindowsApiChecker Properties UniversalApiContractV3_IsAvailable Is the Universal API Contract v3.0 Available? Declaration public static bool UniversalApiContractV3_IsAvailable { get; } Property Value Type Description Boolean UniversalApiContractV4_IsAvailable Is the Universal API Contract v4.0 Available? Declaration public static bool UniversalApiContractV4_IsAvailable { get; } Property Value Type Description Boolean UniversalApiContractV5_IsAvailable Is the Universal API Contract v5.0 Available? Declaration public static bool UniversalApiContractV5_IsAvailable { get; } Property Value Type Description Boolean UniversalApiContractV6_IsAvailable Is the Universal API Contract v6.0 Available? Declaration public static bool UniversalApiContractV6_IsAvailable { get; } Property Value Type Description Boolean Methods CheckApiContracts() Declaration public static void CheckApiContracts()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.IMixedRealityEventSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.IMixedRealityEventSystem.html",
    "title": "Interface IMixedRealityEventSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEventSystem Interface used to implement an Event System that is compatible with the Mixed Reality Toolkit. Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Events Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEventSystem : IMixedRealityService, IDisposable Properties EventListeners List of event listeners that are registered to this Event System. Declaration List<GameObject> EventListeners { get; } Property Value Type Description List < GameObject > Methods HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) The main function for handling and forwarding all events to their intended recipients. See: https://docs.unity3d.com/Manual/MessagingSystem.html Declaration void HandleEvent<T>(BaseEventData eventData, ExecuteEvents.EventFunction<T> eventHandler) where T : IEventSystemHandler Parameters Type Name Description BaseEventData eventData Event Data ExecuteEvents.EventFunction <T> eventHandler Event Handler delegate Type Parameters Name Description T Event Handler Interface Type Register(GameObject) Registers a to listen for events from this Event System. Declaration void Register(GameObject listener) Parameters Type Name Description GameObject listener to add to EventListeners . Unregister(GameObject) Unregisters a from listening for events from this Event System. Declaration void Unregister(GameObject listener) Parameters Type Name Description GameObject listener to remove from EventListeners ."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.QuaternionExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.QuaternionExtensions.html",
    "title": "Class QuaternionExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class QuaternionExtensions Extension methods for Unity's Quaternion struct. Inheritance Object QuaternionExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class QuaternionExtensions Methods IsValidRotation(Quaternion) Declaration public static bool IsValidRotation(this Quaternion rotation) Parameters Type Name Description Quaternion rotation Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingPrimitive.Side.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingPrimitive.Side.html",
    "title": "Enum ClippingPrimitive.Side | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ClippingPrimitive.Side Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public enum Side Fields Name Description Inside Outside"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Classes BaseMixedRealityLineDataProvider Base class that provides data about a line. EllipseLineDataProvider Creates an elliptical line shape. ParabolaConstrainedLineDataProvider Generates a parabolic line between two points. ParabolaLineDataProvider Base Parabola line data provider. ParabolaPhysicalLineDataProvider Creates a parabolic line based on physics. RectangleLineDataProvider Defines a line in the shape of a rectangle. SimpleLineDataProvider A simple line with two points. SplineDataProvider Creates a spline based on control points."
  },
  "api/Microsoft.MixedReality.Toolkit.Inspectors.Profiles.MixedRealityInputActionRulesInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Inspectors.Profiles.MixedRealityInputActionRulesInspector.html",
    "title": "Class MixedRealityInputActionRulesInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputActionRulesInspector Inheritance Object MixedRealityInputActionRulesInspector Namespace : Microsoft.MixedReality.Toolkit.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputActionRulesInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Inspectors.Profiles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Inspectors.Profiles.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Inspectors.Profiles | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Inspectors.Profiles Classes MixedRealityInputActionRulesInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.StepMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.StepMode.html",
    "title": "Enum StepMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum StepMode Defines how to generate points in a line renderer Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Lines Assembly : cs.temp.dll.dll Syntax public enum StepMode Fields Name Description FromSource Draw only the points available in the source - use this for hard edges Interpolated Draw points based on LineStepCount"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessMeshDisplayOptions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessMeshDisplayOptions.html",
    "title": "Enum SpatialAwarenessMeshDisplayOptions | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SpatialAwarenessMeshDisplayOptions Options for how the spatial mesh is to be displayed by the spatial awareness system. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public enum SpatialAwarenessMeshDisplayOptions Fields Name Description None Do not display the spatial mesh Occlusion Display the spatial mesh using the configured occlusion material Visible Display the spatial mesh using the configured material"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.html",
    "title": "Class MixedRealityStandardShaderGUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityStandardShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/Standard\" shader. Inheritance Object MixedRealityStandardShaderGUI Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class MixedRealityStandardShaderGUI : ShaderGUI Fields albedoAlphaMode Declaration protected MaterialProperty albedoAlphaMode Field Value Type Description MaterialProperty albedoAssignedAtRuntime Declaration protected MaterialProperty albedoAssignedAtRuntime Field Value Type Description MaterialProperty albedoColor Declaration protected MaterialProperty albedoColor Field Value Type Description MaterialProperty albedoMap Declaration protected MaterialProperty albedoMap Field Value Type Description MaterialProperty alphaCutoff Declaration protected MaterialProperty alphaCutoff Field Value Type Description MaterialProperty blendOperation Declaration protected MaterialProperty blendOperation Field Value Type Description MaterialProperty borderLight Declaration protected MaterialProperty borderLight Field Value Type Description MaterialProperty borderLightOpaque Declaration protected MaterialProperty borderLightOpaque Field Value Type Description MaterialProperty borderLightUsesHoverColor Declaration protected MaterialProperty borderLightUsesHoverColor Field Value Type Description MaterialProperty borderMinValue Declaration protected MaterialProperty borderMinValue Field Value Type Description MaterialProperty borderWidth Declaration protected MaterialProperty borderWidth Field Value Type Description MaterialProperty channelMap Declaration protected MaterialProperty channelMap Field Value Type Description MaterialProperty clippingBorder Declaration protected MaterialProperty clippingBorder Field Value Type Description MaterialProperty clippingBorderColor Declaration protected MaterialProperty clippingBorderColor Field Value Type Description MaterialProperty clippingBorderWidth Declaration protected MaterialProperty clippingBorderWidth Field Value Type Description MaterialProperty clippingBox Declaration protected MaterialProperty clippingBox Field Value Type Description MaterialProperty clippingPlane Declaration protected MaterialProperty clippingPlane Field Value Type Description MaterialProperty clippingSphere Declaration protected MaterialProperty clippingSphere Field Value Type Description MaterialProperty colorWriteMask Declaration protected MaterialProperty colorWriteMask Field Value Type Description MaterialProperty cullMode Declaration protected MaterialProperty cullMode Field Value Type Description MaterialProperty customRenderingMode Declaration protected MaterialProperty customRenderingMode Field Value Type Description MaterialProperty depthTest Declaration protected MaterialProperty depthTest Field Value Type Description MaterialProperty depthWrite Declaration protected MaterialProperty depthWrite Field Value Type Description MaterialProperty destinationBlend Declaration protected MaterialProperty destinationBlend Field Value Type Description MaterialProperty directionalLight Declaration protected MaterialProperty directionalLight Field Value Type Description MaterialProperty edgeSmoothingValue Declaration protected MaterialProperty edgeSmoothingValue Field Value Type Description MaterialProperty emissiveColor Declaration protected MaterialProperty emissiveColor Field Value Type Description MaterialProperty enableChannelMap Declaration protected MaterialProperty enableChannelMap Field Value Type Description MaterialProperty enableEmission Declaration protected MaterialProperty enableEmission Field Value Type Description MaterialProperty enableHoverColorOpaqueOverride Declaration protected MaterialProperty enableHoverColorOpaqueOverride Field Value Type Description MaterialProperty enableHoverColorOverride Declaration protected MaterialProperty enableHoverColorOverride Field Value Type Description MaterialProperty enableLocalSpaceTriplanarMapping Declaration protected MaterialProperty enableLocalSpaceTriplanarMapping Field Value Type Description MaterialProperty enableNormalMap Declaration protected MaterialProperty enableNormalMap Field Value Type Description MaterialProperty enableTriplanarMapping Declaration protected MaterialProperty enableTriplanarMapping Field Value Type Description MaterialProperty environmentColoring Declaration protected MaterialProperty environmentColoring Field Value Type Description MaterialProperty environmentColorIntensity Declaration protected MaterialProperty environmentColorIntensity Field Value Type Description MaterialProperty environmentColorThreshold Declaration protected MaterialProperty environmentColorThreshold Field Value Type Description MaterialProperty environmentColorX Declaration protected MaterialProperty environmentColorX Field Value Type Description MaterialProperty environmentColorY Declaration protected MaterialProperty environmentColorY Field Value Type Description MaterialProperty environmentColorZ Declaration protected MaterialProperty environmentColorZ Field Value Type Description MaterialProperty fadeBeginDistance Declaration protected MaterialProperty fadeBeginDistance Field Value Type Description MaterialProperty fadeCompleteDistance Declaration protected MaterialProperty fadeCompleteDistance Field Value Type Description MaterialProperty hoverColorOverride Declaration protected MaterialProperty hoverColorOverride Field Value Type Description MaterialProperty hoverColorOverrideOpaque Declaration protected MaterialProperty hoverColorOverrideOpaque Field Value Type Description MaterialProperty hoverLight Declaration protected MaterialProperty hoverLight Field Value Type Description MaterialProperty hoverLightOpaque Declaration protected MaterialProperty hoverLightOpaque Field Value Type Description MaterialProperty initialized Declaration protected bool initialized Field Value Type Description Boolean innerGlow Declaration protected MaterialProperty innerGlow Field Value Type Description MaterialProperty innerGlowColor Declaration protected MaterialProperty innerGlowColor Field Value Type Description MaterialProperty instancedColor Declaration protected MaterialProperty instancedColor Field Value Type Description MaterialProperty metallic Declaration protected MaterialProperty metallic Field Value Type Description MaterialProperty nearPlaneFade Declaration protected MaterialProperty nearPlaneFade Field Value Type Description MaterialProperty normalMap Declaration protected MaterialProperty normalMap Field Value Type Description MaterialProperty normalMapScale Declaration protected MaterialProperty normalMapScale Field Value Type Description MaterialProperty reflections Declaration protected MaterialProperty reflections Field Value Type Description MaterialProperty refraction Declaration protected MaterialProperty refraction Field Value Type Description MaterialProperty refractiveIndex Declaration protected MaterialProperty refractiveIndex Field Value Type Description MaterialProperty renderingMode Declaration protected MaterialProperty renderingMode Field Value Type Description MaterialProperty renderQueueOverride Declaration protected MaterialProperty renderQueueOverride Field Value Type Description MaterialProperty rimColor Declaration protected MaterialProperty rimColor Field Value Type Description MaterialProperty rimLight Declaration protected MaterialProperty rimLight Field Value Type Description MaterialProperty rimPower Declaration protected MaterialProperty rimPower Field Value Type Description MaterialProperty roundCornerMargin Declaration protected MaterialProperty roundCornerMargin Field Value Type Description MaterialProperty roundCornerRadius Declaration protected MaterialProperty roundCornerRadius Field Value Type Description MaterialProperty roundCorners Declaration protected MaterialProperty roundCorners Field Value Type Description MaterialProperty smoothness Declaration protected MaterialProperty smoothness Field Value Type Description MaterialProperty sourceBlend Declaration protected MaterialProperty sourceBlend Field Value Type Description MaterialProperty specularHighlights Declaration protected MaterialProperty specularHighlights Field Value Type Description MaterialProperty sphericalHarmonics Declaration protected MaterialProperty sphericalHarmonics Field Value Type Description MaterialProperty stencil Declaration protected MaterialProperty stencil Field Value Type Description MaterialProperty stencilComparison Declaration protected MaterialProperty stencilComparison Field Value Type Description MaterialProperty stencilOperation Declaration protected MaterialProperty stencilOperation Field Value Type Description MaterialProperty stencilReference Declaration protected MaterialProperty stencilReference Field Value Type Description MaterialProperty triplanarMappingBlendSharpness Declaration protected MaterialProperty triplanarMappingBlendSharpness Field Value Type Description MaterialProperty vertexColors Declaration protected MaterialProperty vertexColors Field Value Type Description MaterialProperty Methods AdvancedOptions(MaterialEditor, Material) Declaration protected void AdvancedOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material AssignNewShaderToMaterial(Material, Shader, Shader) Declaration public override void AssignNewShaderToMaterial(Material material, Shader oldShader, Shader newShader) Parameters Type Name Description Material material Shader oldShader Shader newShader FindProperties(MaterialProperty[]) Declaration protected void FindProperties(MaterialProperty[] props) Parameters Type Name Description MaterialProperty [] props FluentOptions(MaterialEditor, Material) Declaration protected void FluentOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material GetColorProperty(Material, String) Declaration protected static Color? GetColorProperty(Material material, string propertyName) Parameters Type Name Description Material material String propertyName Returns Type Description Nullable < Color > GetFloatProperty(Material, String) Declaration protected static float? GetFloatProperty(Material material, string propertyName) Parameters Type Name Description Material material String propertyName Returns Type Description Nullable < Single > GetVectorProperty(Material, String) Declaration protected static Vector4? GetVectorProperty(Material material, string propertyName) Parameters Type Name Description Material material String propertyName Returns Type Description Nullable < Vector4 > Initialize(Material) Declaration protected void Initialize(Material material) Parameters Type Name Description Material material MainMapOptions(MaterialEditor, Material) Declaration protected void MainMapOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material MaterialChanged(Material) Declaration protected void MaterialChanged(Material material) Parameters Type Name Description Material material OnGUI(MaterialEditor, MaterialProperty[]) Declaration public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] props) Parameters Type Name Description MaterialEditor materialEditor MaterialProperty [] props PropertyEnabled(MaterialProperty) Declaration protected static bool PropertyEnabled(MaterialProperty property) Parameters Type Name Description MaterialProperty property Returns Type Description Boolean RenderingModeOptions(MaterialEditor) Declaration protected void RenderingModeOptions(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor RenderingOptions(MaterialEditor, Material) Declaration protected void RenderingOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material SetColorProperty(Material, String, Nullable<Color>) Declaration protected static void SetColorProperty(Material material, string propertyName, Color? propertyValue) Parameters Type Name Description Material material String propertyName Nullable < Color > propertyValue SetFloatProperty(Material, String, String, Nullable<Single>) Declaration protected static void SetFloatProperty(Material material, string keywordName, string propertyName, float? propertyValue) Parameters Type Name Description Material material String keywordName String propertyName Nullable < Single > propertyValue SetupMaterialWithAlbedo(Material, MaterialProperty, MaterialProperty, MaterialProperty) Declaration protected static void SetupMaterialWithAlbedo(Material material, MaterialProperty albedoMap, MaterialProperty albedoAlphaMode, MaterialProperty albedoAssignedAtRuntime) Parameters Type Name Description Material material MaterialProperty albedoMap MaterialProperty albedoAlphaMode MaterialProperty albedoAssignedAtRuntime SetupMaterialWithRenderingMode(Material, MixedRealityStandardShaderGUI.RenderingMode, MixedRealityStandardShaderGUI.CustomRenderingMode, Int32) Declaration protected static void SetupMaterialWithRenderingMode(Material material, MixedRealityStandardShaderGUI.RenderingMode mode, MixedRealityStandardShaderGUI.CustomRenderingMode customMode, int renderQueueOverride) Parameters Type Name Description Material material MixedRealityStandardShaderGUI.RenderingMode mode MixedRealityStandardShaderGUI.CustomRenderingMode customMode Int32 renderQueueOverride SetVectorProperty(Material, String, Nullable<Vector4>) Declaration protected static void SetVectorProperty(Material material, string propertyName, Vector4? propertyValue) Parameters Type Name Description Material material String propertyName Nullable < Vector4 > propertyValue"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Classes EnumFlagsAttributeDrawer Renders enum flags on fields with the attribute. From https://answers.unity.com/questions/486694/default-editor-enum-as-flags-.html InputActionPropertyDrawer MixedRealityPosePropertyDrawer PhysicsLayerAttributeDrawer Renders the physics layer dropdown based on the current layers set in the Tag Manager. PrefabPropertyDrawer Custom property drawer for decorated values rendered in the inspector. SpeechCommandPropertyDrawer SystemTypeReferencePropertyDrawer Custom property drawer for properties. Vector3RangePropertyDrawer Custom property drawer for decorated values rendered in the inspector."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Interfaces IMixedRealityDictationHandler Interface to implement dictation events. IMixedRealityFocusChangedHandler Interface to implement to react to focus changed events. IMixedRealityFocusHandler Interface to implement to react to focus enter/exit. IMixedRealityGestureHandler Interface to implement for generic gesture input. IMixedRealityGestureHandler<T> Interface to implement for generic gesture input. IMixedRealityInputHandler Interface to implement for simple generic input. IMixedRealityInputHandler<T> Interface to implement for more complex generic input. IMixedRealityPointerHandler Interface to implement to react to simple pointer input. IMixedRealitySourcePoseHandler Interface to implement to react to source IMixedRealitySourceStateHandler Interface to implement to react to source state changes, such as when an input source is detected or lost. IMixedRealitySpatialInputHandler Interface to implement for spatial input position and rotation. IMixedRealitySpeechHandler Interface to implement to react to speech recognition."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Services.MixedRealityToolkit.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Services.MixedRealityToolkit.html",
    "title": "Class MixedRealityToolkit | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkit This class is responsible for coordinating the operation of the Mixed Reality Toolkit. It is the only Singleton in the entire project. It provides a service registry for all active services that are used within a project as well as providing the active configuration profile for the project. The Profile can be swapped out at any time to meet the needs of your project. Inheritance Object MixedRealityToolkit Namespace : Microsoft.MixedReality.Toolkit.Core.Services Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkit : MonoBehaviour Properties ActiveProfile The public property of the Active Profile, ensuring events are raised on the change of the configuration Declaration public MixedRealityToolkitConfigurationProfile ActiveProfile { get; set; } Property Value Type Description MixedRealityToolkitConfigurationProfile ActiveSystems Current active systems registered with the MixedRealityToolkit. Declaration public static IReadOnlyDictionary<Type, IMixedRealityService> ActiveSystems { get; } Property Value Type Description IReadOnlyDictionary < Type , IMixedRealityService > Remarks Systems can only be registered once by Type BoundarySystem The current Boundary System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityBoundarySystem BoundarySystem { get; } Property Value Type Description IMixedRealityBoundarySystem DiagnosticsSystem The current Diagnostics System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityDiagnosticsSystem DiagnosticsSystem { get; } Property Value Type Description IMixedRealityDiagnosticsSystem HasActiveProfile Checks if there is a valid instance of the MixedRealityToolkit, then checks if there is there a valid Active Profile. Declaration public static bool HasActiveProfile { get; } Property Value Type Description Boolean InputSystem The current Input System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityInputSystem InputSystem { get; } Property Value Type Description IMixedRealityInputSystem Instance Returns the Singleton instance of the classes type. If no instance is found, then we search for an instance in the scene. If more than one instance is found, we log an error and no instance is returned. Declaration public static MixedRealityToolkit Instance { get; } Property Value Type Description MixedRealityToolkit IsInitialized Returns whether the instance has been initialized or not. Declaration public static bool IsInitialized { get; } Property Value Type Description Boolean MixedRealityComponents Local service registry for the Mixed Reality Toolkit, to allow runtime use of the . Declaration [Obsolete(\"Use RegisteredMixedRealityServices instead.\")] public List<Tuple<Type, IMixedRealityExtensionService>> MixedRealityComponents { get; } Property Value Type Description List < Tuple < Type , IMixedRealityExtensionService >> MixedRealityPlayspace Returns the MixedRealityPlayspace for the local player Declaration public Transform MixedRealityPlayspace { get; } Property Value Type Description Transform RegisteredMixedRealityServices Local service registry for the Mixed Reality Toolkit, to allow runtime use of the . Declaration public static IReadOnlyList<Tuple<Type, IMixedRealityService>> RegisteredMixedRealityServices { get; } Property Value Type Description IReadOnlyList < Tuple < Type , IMixedRealityService >> SpatialAwarenessSystem The current Spatial Awareness System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealitySpatialAwarenessSystem SpatialAwarenessSystem { get; } Property Value Type Description IMixedRealitySpatialAwarenessSystem TeleportSystem The current Teleport System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityTeleportSystem TeleportSystem { get; } Property Value Type Description IMixedRealityTeleportSystem Methods AssertIsInitialized() Expose an assertion whether the MixedRealityToolkit class is initialized. Declaration public static void AssertIsInitialized() ConfirmInitialized() Static function to determine if the MixedRealityToolkit class has been initialized or not. Declaration public static bool ConfirmInitialized() Returns Type Description Boolean DisableAllServicesByType(Type) Disable all services in the Mixed Reality Toolkit active service registry for a given type Declaration public static void DisableAllServicesByType(Type interfaceType) Parameters Type Name Description Type interfaceType The interface type for the system to be removed. E.G. InputSystem, BoundarySystem DisableAllServicesByTypeAndName(Type, String) Disable all services in the Mixed Reality Toolkit active service registry for a given type and name Declaration public static void DisableAllServicesByTypeAndName(Type interfaceType, string serviceName) Parameters Type Name Description Type interfaceType The interface type for the system to be disabled. E.G. InputSystem, BoundarySystem String serviceName Name of the specific service DisableService(Type, String) Declaration [Obsolete(\"Use DisableAllServicesByType instead.\")] public void DisableService(Type interfaceType, string serviceName) Parameters Type Name Description Type interfaceType String serviceName EnableAllServicesByType(Type) Enable all services in the Mixed Reality Toolkit active service registry for a given type Declaration public static void EnableAllServicesByType(Type interfaceType) Parameters Type Name Description Type interfaceType The interface type for the system to be enabled. E.G. InputSystem, BoundarySystem EnableAllServicesByTypeAndName(Type, String) Enable all services in the Mixed Reality Toolkit active service registry for a given type and name Declaration public static void EnableAllServicesByTypeAndName(Type interfaceType, string serviceName) Parameters Type Name Description Type interfaceType The interface type for the system to be enabled. E.G. InputSystem, BoundarySystem String serviceName Name of the specific service EnableService(Type, String) Declaration [Obsolete(\"Use EnableAllServicesByType instead.\")] public void EnableService(Type interfaceType, string serviceName) Parameters Type Name Description Type interfaceType String serviceName GetActiveServices(Type) Retrieve all services from the Mixed Reality Toolkit active service registry for a given type and an optional name Declaration public List<IMixedRealityService> GetActiveServices(Type interfaceType) Parameters Type Name Description Type interfaceType The interface type for the system to be retrieved. E.G. InputSystem, BoundarySystem Returns Type Description List < IMixedRealityService > An array of services that meet the search criteria GetActiveServices(Type, String) Retrieve all services from the Mixed Reality Toolkit active service registry for a given type and name Declaration public List<IMixedRealityService> GetActiveServices(Type interfaceType, string serviceName) Parameters Type Name Description Type interfaceType The interface type for the system to be retrieved. E.G. InputSystem, BoundarySystem String serviceName Name of the specific service Returns Type Description List < IMixedRealityService > An array of services that meet the search criteria GetService(Type, Boolean) Retrieve a service from the Mixed Reality Toolkit active service registry Declaration public IMixedRealityService GetService(Type interfaceType, bool showLogs = true) Parameters Type Name Description Type interfaceType The interface type for the system to be retrieved. E.G. InputSystem, BoundarySystem Boolean showLogs Should the logs show when services cannot be found? Returns Type Description IMixedRealityService The Mixed Reality Toolkit of the specified type GetService(Type, String, Boolean) Retrieve a service from the Mixed Reality Toolkit active service registry Declaration public IMixedRealityService GetService(Type interfaceType, string serviceName, bool showLogs = true) Parameters Type Name Description Type interfaceType The interface type for the system to be retrieved. E.G. InputSystem, BoundarySystem String serviceName Name of the specific service Boolean showLogs Should the logs show when services cannot be found? Returns Type Description IMixedRealityService The Mixed Reality Toolkit of the specified type GetService<T>(Boolean) Generic function used to retrieve a service from the Mixed Reality Toolkit active service registry Declaration public T GetService<T>(bool showLogs = true) where T : IMixedRealityService Parameters Type Name Description Boolean showLogs Should the logs show when services cannot be found? Returns Type Description T The instance of the service class that is registered with the selected Interface Type Parameters Name Description T The interface type for the system to be retrieved. E.G. InputSystem, BoundarySystem. *Note type should be the Interface of the system to be retrieved and not the class itself IsServiceRegistered<T>() Generic function used to interrogate the Mixed Reality Toolkit registered services registry for the existence of a service. Declaration public bool IsServiceRegistered<T>() where T : class Returns Type Description Boolean True, there is a service registered with the selected interface, False, no service found for that interface Type Parameters Name Description T The interface type for the service to be retrieved. Remarks Note: type should be the Interface of the system to be retrieved and not the concrete class itself. IsSystemRegistered<T>() Generic function used to interrogate the Mixed Reality Toolkit active system registry for the existence of a core system. Declaration public bool IsSystemRegistered<T>() where T : class Returns Type Description Boolean True, there is a system registered with the selected interface, False, no system found for that interface Type Parameters Name Description T The interface type for the system to be retrieved. E.G. InputSystem, BoundarySystem. Remarks Note: type should be the Interface of the system to be retrieved and not the concrete class itself. RegisterService(Type, IMixedRealityService) Add a new service to the Mixed Reality Toolkit active service registry. Declaration public bool RegisterService(Type interfaceType, IMixedRealityService serviceInstance) Parameters Type Name Description Type interfaceType The interface type for the system to be registered. E.G. InputSystem, BoundarySystem IMixedRealityService serviceInstance The Instance of the service class to register Returns Type Description Boolean RegisterService<T>(Type, SupportedPlatforms, Object[]) Create and register a new service to the Mixed Reality Toolkit service registry. Declaration public bool RegisterService<T>(Type interfaceType, SupportedPlatforms supportedPlatforms = null, params object[] args) Parameters Type Name Description Type interfaceType The concrete type to instantiate. SupportedPlatforms supportedPlatforms The runtime platform to check against when registering. Object [] args Optional arguments used when instantiating the concrete type. Returns Type Description Boolean True, if the service was successfully registered. Type Parameters Name Description T The interface type for the system to be registered. ResetConfiguration(MixedRealityToolkitConfigurationProfile) When a configuration Profile is replaced with a new configuration, force all services to reset and read the new values Declaration public void ResetConfiguration(MixedRealityToolkitConfigurationProfile profile) Parameters Type Name Description MixedRealityToolkitConfigurationProfile profile UnregisterService(Type) Remove all services from the Mixed Reality Toolkit active service registry for a given type Declaration public bool UnregisterService(Type interfaceType) Parameters Type Name Description Type interfaceType The interface type for the system to be removed. E.G. InputSystem, BoundarySystem Returns Type Description Boolean UnregisterService(Type, String) Remove services from the Mixed Reality Toolkit active service registry for a given type and name Name is only supported for Mixed Reality runtime services Declaration public static bool UnregisterService(Type interfaceType, string serviceName) Parameters Type Name Description Type interfaceType The interface type for the system to be removed. E.G. InputSystem, BoundarySystem String serviceName The name of the service to be removed. (Only for runtime services) Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorUIUtility.ListButtonEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorUIUtility.ListButtonEvent.html",
    "title": "Delegate InspectorUIUtility.ListButtonEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate InspectorUIUtility.ListButtonEvent Delegate for button callbacks, single index Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities Assembly : cs.temp.dll.dll Syntax public delegate void ListButtonEvent(int index, SerializedProperty prop = null); Parameters Type Name Description Int32 index location of item in a serialized array SerializedProperty prop A serialize property containing information needed if the button was clicked"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.MathUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.MathUtilities.html",
    "title": "Class MathUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class MathUtilities Math Utilities class. Inheritance Object MathUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class MathUtilities Methods Add(Matrix4x4, Matrix4x4) Element-wise addition of two Matrix4x4s - extension method Declaration public static Matrix4x4 Add(Matrix4x4 a, Matrix4x4 b) Parameters Type Name Description Matrix4x4 a matrix Matrix4x4 b matrix Returns Type Description Matrix4x4 element-wise (a+b) ClosestPointOnLineSegmentToPoint(Vector3, Vector3, Vector3) Declaration public static Vector3 ClosestPointOnLineSegmentToPoint(Vector3 point, Vector3 lineStart, Vector3 lineEnd) Parameters Type Name Description Vector3 point Vector3 lineStart Vector3 lineEnd Returns Type Description Vector3 ClosestPointOnLineToPoint(Vector3, Vector3, Vector3) Declaration public static Vector3 ClosestPointOnLineToPoint(Vector3 point, Vector3 linePointA, Vector3 linePointB) Parameters Type Name Description Vector3 point Vector3 linePointA Vector3 linePointB Returns Type Description Vector3 DegreesToRadians(Double) Convert degrees to radians. Declaration public static float DegreesToRadians(double degrees) Parameters Type Name Description Double degrees Angle, in degrees. Returns Type Description Single Angle, in radians. DistanceOfPointToLine(Ray, Vector3) find unsigned distance of 3D point to an infinite line Declaration public static float DistanceOfPointToLine(Ray ray, Vector3 point) Parameters Type Name Description Ray ray ray that specifies an infinite line Vector3 point 3D point Returns Type Description Single unsigned perpendicular distance from point to line DistanceOfPointToLine(Vector3, Vector3, Vector3) Returns the distance between a point and an infinite line defined by two points; linePointA and linePointB Declaration public static float DistanceOfPointToLine(Vector3 point, Vector3 linePointA, Vector3 linePointB) Parameters Type Name Description Vector3 point Vector3 linePointA Vector3 linePointB Returns Type Description Single DistanceOfPointToLineSegment(Vector3, Vector3, Vector3) Declaration public static float DistanceOfPointToLineSegment(Vector3 point, Vector3 lineStart, Vector3 lineEnd) Parameters Type Name Description Vector3 point Vector3 lineStart Vector3 lineEnd Returns Type Description Single GetAngleBetween(Vector2, Vector2) Calculates the angle (at pointA) between two, two-dimensional points. Declaration public static float GetAngleBetween(Vector2 pointA, Vector2 pointB) Parameters Type Name Description Vector2 pointA The first point. Vector2 pointB The second point. Returns Type Description Single The angle between the two points. InRange(Vector2, Vector2, Vector2) Tests component-wise if a Vector2 is in a given range Declaration public static bool InRange(Vector2 vec, Vector2 lower, Vector2 upper) Parameters Type Name Description Vector2 vec The vector to test Vector2 lower The lower bounds Vector2 upper The upper bounds Returns Type Description Boolean true if in range, otherwise false InRange(Vector3, Vector3, Vector3) Tests component-wise if a Vector3 is in a given range Declaration public static bool InRange(Vector3 vec, Vector3 lower, Vector3 upper) Parameters Type Name Description Vector3 vec The vector to test Vector3 lower The lower bounds Vector3 upper The upper bounds Returns Type Description Boolean true if in range, otherwise false NearestPointToLines(Ray, Ray) Find 3D point that minimizes distance to 2 lines, midpoint of the shortest perpendicular line segment between them Declaration public static Vector3 NearestPointToLines(Ray p, Ray q) Parameters Type Name Description Ray p ray that specifies a line Ray q ray that specifies a line Returns Type Description Vector3 point nearest to the lines NearestPointToLinesLeastSquares(IEnumerable<Ray>) Find 3D point that minimizes distance to a set of 2 or more lines Declaration public static Vector3 NearestPointToLinesLeastSquares(IEnumerable<Ray> rays) Parameters Type Name Description IEnumerable < Ray > rays each ray specifies an infinite line Returns Type Description Vector3 point nearest to the set of lines NearestPointToLinesRANSAC(List<Ray>, Int32, Single, out Int32) Find 3D point that minimizes distance to a set of 2 or more lines, ignoring outliers Declaration public static Vector3 NearestPointToLinesRANSAC(List<Ray> rays, int ransac_iterations, float ransac_threshold, out int numActualInliers) Parameters Type Name Description List < Ray > rays list of rays, each specifying a line, must have at least 1 Int32 ransac_iterations number of iterations: log(1-p)/log(1-(1-E)^s) where p is probability of at least one sample containing s points is all inliers E is proportion of outliers (1-ransac_ratio) e.g. p=0.999, ransac_ratio=0.54, s=2 ==> log(0.001)/(log(1-0.54^2) = 20 Single ransac_threshold minimum distance from point to line for a line to be considered an inlier Int32 numActualInliers return number of inliers: lines that are within ransac_threshold of nearest point Returns Type Description Vector3 point nearest to the set of lines, ignoring outliers QuaternionFromMatrix(Matrix4x4) Creates a quaternion containing the rotation from the input matrix. Declaration public static Quaternion QuaternionFromMatrix(Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Input matrix to convert to quaternion Returns Type Description Quaternion RadiansToDegrees(Single) Convert radians to degrees. Declaration public static float RadiansToDegrees(float radians) Parameters Type Name Description Single radians Angle, in radians. Returns Type Description Single Angle, in degrees. Subtract(Matrix4x4, Matrix4x4) Element-wise subtraction of two Matrix4x4s - extension method Declaration public static Matrix4x4 Subtract(Matrix4x4 a, Matrix4x4 b) Parameters Type Name Description Matrix4x4 a matrix Matrix4x4 b matrix Returns Type Description Matrix4x4 element-wise (a-b) TestPlanesAABB(Plane[], Int32, Bounds, out Boolean) Declaration public static bool TestPlanesAABB(Plane[] planes, int planeMask, Bounds bounds, out bool entirelyInside) Parameters Type Name Description Plane [] planes Int32 planeMask Bounds bounds Boolean entirelyInside Returns Type Description Boolean ToTranslationRotation(Matrix4x4, out Vector3, out Quaternion) Extract the translation and rotation components of a Unity matrix Declaration public static void ToTranslationRotation(Matrix4x4 unityMtx, out Vector3 translation, out Quaternion rotation) Parameters Type Name Description Matrix4x4 unityMtx Vector3 translation Quaternion rotation TransformDirectionFromTo(Transform, Transform, Vector3) Takes a direction in the coordinate space specified by the \"from\" transform and transforms it to be the correct direction in the coordinate space specified by the \"to\" transform applies rotation only, no translation or scale Declaration public static Vector3 TransformDirectionFromTo(Transform from, Transform to, Vector3 fromDirection) Parameters Type Name Description Transform from Transform to Vector3 fromDirection Returns Type Description Vector3 Direction to. TransformPointFromTo(Transform, Transform, Vector3) Takes a point in the coordinate space specified by the \"from\" transform and transforms it to be the correct point in the coordinate space specified by the \"to\" transform applies rotation, scale and translation. Declaration public static Vector3 TransformPointFromTo(Transform from, Transform to, Vector3 fromPoint) Parameters Type Name Description Transform from Transform to Vector3 fromPoint Returns Type Description Vector3 Point to. TransformRayFromTo(Transform, Transform, Ray) Takes a ray in the coordinate space specified by the \"from\" transform and transforms it to be the correct ray in the coordinate space specified by the \"to\" transform Declaration public static Ray TransformRayFromTo(Transform from, Transform to, Ray rayToConvert) Parameters Type Name Description Transform from Transform to Ray rayToConvert Returns Type Description Ray TransformVectorFromTo(Transform, Transform, Vector3) Takes a vector in the coordinate space specified by the \"from\" transform and transforms it to be the correct direction in the coordinate space specified by the \"to\" transform applies rotation and scale, no translation Declaration public static Vector3 TransformVectorFromTo(Transform from, Transform to, Vector3 vecInFrom) Parameters Type Name Description Transform from Transform to Vector3 vecInFrom Returns Type Description Vector3 XYProject(Vector3) Project vector onto XY plane Declaration public static Vector3 XYProject(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 result of projecting v onto XY plane XZProject(Vector3) Project vector onto XZ plane Declaration public static Vector3 XZProject(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 result of projecting v onto XZ plane YZProject(Vector3) Project vector onto YZ plane Declaration public static Vector3 YZProject(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 result of projecting v onto YZ plane"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityInputActionsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityInputActionsProfile.html",
    "title": "Class MixedRealityInputActionsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputActionsProfile Configuration profile settings for setting up and consuming Input Actions. Inheritance Object BaseMixedRealityProfile MixedRealityInputActionsProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputActionsProfile : BaseMixedRealityProfile Properties InputActions The list of actions users can do in your application. Input Actions are device agnostic and can be paired with any number of device inputs across all platforms. Declaration public MixedRealityInputAction[] InputActions { get; } Property Value Type Description MixedRealityInputAction [] Methods LoadMixedRealityToolKitDefaults() Reset the current InputActions definitions to the Mixed Reality Toolkit defaults If existing mappings exist, they will be preserved and pushed to the end of the array Declaration public MixedRealityInputAction[] LoadMixedRealityToolKitDefaults() Returns Type Description MixedRealityInputAction [] Default MRTK Actions plus any custom actions (if already configured)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.LineRotationMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.LineRotationMode.html",
    "title": "Enum LineRotationMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum LineRotationMode Defines how to calculate the line's rotation at any given point. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Lines Assembly : cs.temp.dll.dll Syntax public enum LineRotationMode Fields Name Description None Don't rotate RelativeToOrigin Rotate relative to direction from origin point Velocity Use velocity to calculate the line's rotation"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterSimplex.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterSimplex.html",
    "title": "Class DistorterSimplex | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterSimplex Inheritance Object Distorter DistorterSimplex Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters Assembly : cs.temp.dll.dll Syntax public class DistorterSimplex : Distorter, IComparable<Distorter> Properties AxisOffset Declaration public Vector3 AxisOffset { get; set; } Property Value Type Description Vector3 AxisSpeed Declaration public Vector3 AxisSpeed { get; set; } Property Value Type Description Vector3 AxisStrength Declaration public Vector3 AxisStrength { get; set; } Property Value Type Description Vector3 ScaleDistort Declaration public float ScaleDistort { get; set; } Property Value Type Description Single ScaleMultiplier Declaration public float ScaleMultiplier { get; set; } Property Value Type Description Single StrengthMultiplier Declaration public float StrengthMultiplier { get; set; } Property Value Type Description Single UniformScaleDistort Declaration public bool UniformScaleDistort { get; set; } Property Value Type Description Boolean Methods DistortPointInternal(Vector3, Single) Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) Implements System.IComparable<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.MachineName.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.MachineName.html",
    "title": "Class MachineName | Mixed Reality Toolkit Documentation",
    "keywords": "Class MachineName Inheritance Object MachineName Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class MachineName Fields ComputerName Declaration public string ComputerName Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.NetworkInterfaces.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.NetworkInterfaces.html",
    "title": "Class NetworkInterfaces | Mixed Reality Toolkit Documentation",
    "keywords": "Class NetworkInterfaces Inheritance Object NetworkInterfaces Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class NetworkInterfaces Fields Interfaces Declaration public InterfaceInfo[] Interfaces Field Value Type Description InterfaceInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem Classes InscribedRectangle The InscribedRectangle class defines the largest rectangle within an arbitrary shape. MixedRealityBoundaryVisualizationProfile Configuration profile settings for setting up boundary visualizations. Structs Edge The BoundaryEdge structure defines the points of a line segment that are used to construct a polygonal boundary."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Physics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Physics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Physics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Physics Interfaces IBaseRayStabilizer"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.Internal.SyncContextUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.Internal.SyncContextUtility.html",
    "title": "Class SyncContextUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class SyncContextUtility Utility class to assist in thread and context synchronization. Inheritance Object SyncContextUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Async.Internal Assembly : cs.temp.dll.dll Syntax public static class SyncContextUtility Properties UnitySynchronizationContext This Unity Player's Synchronization Context. Declaration public static SynchronizationContext UnitySynchronizationContext { get; } Property Value Type Description SynchronizationContext UnityThreadId This Unity Player's Thread Id. Declaration public static int UnityThreadId { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.Internal.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.Internal.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Async.Internal | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Async.Internal Classes SyncContextUtility Utility class to assist in thread and context synchronization."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.SplineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.SplineDataProvider.html",
    "title": "Class SplineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class SplineDataProvider Creates a spline based on control points. Inheritance Object BaseMixedRealityLineDataProvider SplineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnValidate() BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.Update() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public class SplineDataProvider : BaseMixedRealityLineDataProvider Properties AlignAllControlPoints Declaration public bool AlignAllControlPoints { get; set; } Property Value Type Description Boolean ControlPoints Declaration public MixedRealityPose[] ControlPoints { get; } Property Value Type Description MixedRealityPose [] PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount Methods ForceUpdateAlignment() Forces all the control points into alignment. Declaration public void ForceUpdateAlignment() GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.MixedRealityExtensionServiceAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.MixedRealityExtensionServiceAttribute.html",
    "title": "Class MixedRealityExtensionServiceAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityExtensionServiceAttribute Attribute that defines the properties of a Mixed Reality Toolkit extension service. Inheritance Object Attribute MixedRealityExtensionServiceAttribute MixedRealityDataProviderAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class MixedRealityExtensionServiceAttribute : Attribute, _Attribute Constructors MixedRealityExtensionServiceAttribute(SupportedPlatforms, String, String) Constructor Declaration public MixedRealityExtensionServiceAttribute(SupportedPlatforms runtimePlatforms, string defaultProfilePath = \"\", string packageFolder = \"MixedRealityToolkit\") Parameters Type Name Description SupportedPlatforms runtimePlatforms The platforms on which the extension service is supported. String defaultProfilePath String packageFolder The package folder to which the path is relative. Properties DefaultProfile The default profile. Declaration public virtual BaseMixedRealityProfile DefaultProfile { get; } Property Value Type Description BaseMixedRealityProfile DefaultProfilePath The file path to the default profile asset relative to the package folder. Declaration public virtual string DefaultProfilePath { get; } Property Value Type Description String PackageFolder The package where the default profile asset resides. Declaration public virtual string PackageFolder { get; } Property Value Type Description String RuntimePlatforms The runtime platform(s) to run this service. Declaration public virtual SupportedPlatforms RuntimePlatforms { get; } Property Value Type Description SupportedPlatforms Methods Find(Type) Convenience function for retrieving the attribute given a certain class type. Declaration public static MixedRealityExtensionServiceAttribute Find(Type type) Parameters Type Name Description Type type Returns Type Description MixedRealityExtensionServiceAttribute Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IInputActionRule-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IInputActionRule-1.html",
    "title": "Interface IInputActionRule<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IInputActionRule<T> Interface for defining Input Action Rules Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IInputActionRule<T> Type Parameters Name Description T Properties BaseAction The Base Action that the rule will listen to. Declaration MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria The criteria to check against for determining if the action should be raised. Declaration T Criteria { get; } Property Value Type Description T RuleAction The Action to raise if the criteria is met. Declaration MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem.IMixedRealityTeleportHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem.IMixedRealityTeleportHandler.html",
    "title": "Interface IMixedRealityTeleportHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTeleportHandler Interface to implement for teleport events. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTeleportHandler : IEventSystemHandler Methods OnTeleportCanceled(TeleportEventData) Raised when a teleport request has been canceled. Declaration void OnTeleportCanceled(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportCompleted(TeleportEventData) Raised when a teleport has successfully completed. Declaration void OnTeleportCompleted(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportRequest(TeleportEventData) Raised when a pointer requests a teleport target, but no teleport has begun. Declaration void OnTeleportRequest(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportStarted(TeleportEventData) Raised when a teleport has started. Declaration void OnTeleportStarted(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ControllerPopupWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ControllerPopupWindow.html",
    "title": "Class ControllerPopupWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerPopupWindow Inheritance Object ControllerPopupWindow Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class ControllerPopupWindow : EditorWindow Methods Show(MixedRealityControllerMapping, SerializedProperty, Handedness) Declaration public static void Show(MixedRealityControllerMapping controllerMapping, SerializedProperty interactionsList, Handedness handedness = null) Parameters Type Name Description MixedRealityControllerMapping controllerMapping SerializedProperty interactionsList Handedness handedness"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityControllerVisualizationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityControllerVisualizationProfileInspector.html",
    "title": "Class MixedRealityControllerVisualizationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerVisualizationProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityControllerVisualizationProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerVisualizationProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityDiagnosticsSystemProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityDiagnosticsSystemProfileInspector.html",
    "title": "Class MixedRealityDiagnosticsSystemProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityDiagnosticsSystemProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityDiagnosticsSystemProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityDiagnosticsSystemProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Interfaces ICursorModifier Interface for cursor modifiers that can modify a 's properties. IInputActionRule<T> Interface for defining Input Action Rules IMixedRealityCursor Cursor Interface for handling input events and setting visibility. IMixedRealityFocusProvider Implements the Focus Provider for handling focus of pointers. IMixedRealityGazeProvider Implements the Gaze Provider for an Input Source. IMixedRealityInputSource Interface for an input source. An input source is the origin of user input and generally comes from a physical controller, sensor, or other hardware device. IMixedRealityInputSystem Manager interface for a Input system in the Mixed Reality Toolkit All replacement systems for providing Input System functionality should derive from this interface IMixedRealityMousePointer Interface for handling mouse pointers. IMixedRealityPointer Interface for handling pointers. IMixedRealityTouchPointer Interface for handling touch pointers. IPointerResult Interface defining a pointer result."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.MouseDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.MouseDeviceManager.html",
    "title": "Class MouseDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class MouseDeviceManager Inheritance Object BaseDeviceManager MouseDeviceManager Implements IMixedRealityDeviceManager IMixedRealityExtensionService Inherited Members BaseDeviceManager.GetActiveControllers() BaseDeviceManager.RequestPointers(SystemType, Handedness, Boolean) Namespace : Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput Assembly : cs.temp.dll.dll Syntax public class MouseDeviceManager : BaseDeviceManager, IMixedRealityDeviceManager, IMixedRealityExtensionService Constructors MouseDeviceManager(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public MouseDeviceManager(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties Controller Current Mouse Controller. Declaration public MouseController Controller { get; } Property Value Type Description MouseController Methods Disable() Declaration public override void Disable() Enable() Declaration public override void Enable() Update() Declaration public override void Update() Implements IMixedRealityDeviceManager IMixedRealityExtensionService"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Diagnostics.MixedRealityDiagnosticsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Diagnostics.MixedRealityDiagnosticsProfile.html",
    "title": "Class MixedRealityDiagnosticsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityDiagnosticsProfile Configuration profile settings for setting up diagnostics. Inheritance Object BaseMixedRealityProfile MixedRealityDiagnosticsProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Diagnostics Assembly : cs.temp.dll.dll Syntax public class MixedRealityDiagnosticsProfile : BaseMixedRealityProfile Properties ShowDiagnostics Show or hide diagnostic visualizations Declaration public bool ShowDiagnostics { get; } Property Value Type Description Boolean ShowProfiler Show or hide the profiler UI Declaration public bool ShowProfiler { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityBaseConfigurationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityBaseConfigurationProfileInspector.html",
    "title": "Class MixedRealityBaseConfigurationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityBaseConfigurationProfileInspector Inheritance Object MixedRealityBaseConfigurationProfileInspector Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Use BaseMixedRealityToolkitConfigurationProfileInspector instead\")] public abstract class MixedRealityBaseConfigurationProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityBoundaryVisualizationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityBoundaryVisualizationProfileInspector.html",
    "title": "Class MixedRealityBoundaryVisualizationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityBoundaryVisualizationProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityBoundaryVisualizationProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityBoundaryVisualizationProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.ControllerMappingLibrary.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.ControllerMappingLibrary.html",
    "title": "Class ControllerMappingLibrary | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerMappingLibrary Helper utility to manage all the required Axis configuration for platforms, where required Inheritance Object ControllerMappingLibrary Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public static class ControllerMappingLibrary Fields AXIS_1 Mouse: Position Horizontal Movement HTC Vive Controller: Left Controller Trackpad (2) Horizontal Movement Oculus Touch Controller: Axis2D.PrimaryThumbstick Horizontal Movement Valve Knuckles Controller: Left Controller Trackpad Horizontal Movement Windows Mixed Reality Motion Controller: Left Thumbstick Horizontal Movement Xbox Controller: Left Thumbstick Horizontal Movement Declaration public const string AXIS_1 = \"AXIS_1\" Field Value Type Description String AXIS_10 HTC Vive Controller: Right Controller Trigger (7) Squeeze Oculus Touch Controller: Axis1D.SecondaryIndexTrigger Movement Squeeze Valve Knuckles Controller: Right Controller Trigger Squeeze Windows Mixed Reality Motion Controller: Right Trigger Squeeze Declaration public const string AXIS_10 = \"AXIS_10\" Field Value Type Description String AXIS_11 HTC Vive Controller: Left Controller Grip Button (8) Squeeze Oculus Touch Controller: Axis1D.PrimaryHandTrigger Squeeze Valve Knuckles Controller: Left Controller Grip Average Squeeze Windows Mixed Reality Motion Controller: Left Grip Squeeze Declaration public const string AXIS_11 = \"AXIS_11\" Field Value Type Description String AXIS_12 HTC Vive Controller: Right Controller Grip Button (8) Squeeze Oculus Touch Controller: Axis1D.SecondaryHandTrigger Squeeze Valve Knuckles Controller: Right Controller Grip Average Squeeze Windows Mixed Reality Motion Controller: Right Grip Squeeze Declaration public const string AXIS_12 = \"AXIS_12\" Field Value Type Description String AXIS_13 Oculus Touch Controller: Axis1D.PrimaryIndexTrigger Near Touch Declaration public const string AXIS_13 = \"AXIS_13\" Field Value Type Description String AXIS_14 Oculus Touch Controller: Axis1D.SecondaryIndexTrigger Near Touch Declaration public const string AXIS_14 = \"AXIS_14\" Field Value Type Description String AXIS_15 Oculus Touch Controller: Touch.PrimaryThumbRest Near Touch Declaration public const string AXIS_15 = \"AXIS_15\" Field Value Type Description String AXIS_16 Oculus Touch Controller: Button.SecondaryThumbstick Near Touch Declaration public const string AXIS_16 = \"AXIS_16\" Field Value Type Description String AXIS_17 Windows Mixed Reality Motion Controller: Left Touchpad Horizontal Movement Declaration public const string AXIS_17 = \"AXIS_17\" Field Value Type Description String AXIS_18 Windows Mixed Reality Motion Controller: Left Touchpad Vertical Movement Declaration public const string AXIS_18 = \"AXIS_18\" Field Value Type Description String AXIS_19 Windows Mixed Reality Motion Controller: Right Touchpad Horizontal Movement Declaration public const string AXIS_19 = \"AXIS_19\" Field Value Type Description String AXIS_2 Mouse: Position Vertical Movement HTC Vive Controller: Left Controller Trackpad (2) Vertical Movement Oculus Touch Controller: Axis2D.PrimaryThumbstick Vertical Movement Valve Knuckles Controller: Left Controller Trackpad Vertical Movement Windows Mixed Reality Motion Controller: Left Thumbstick Vertical Movement Xbox Controller: Left Thumbstick Vertical Movement Declaration public const string AXIS_2 = \"AXIS_2\" Field Value Type Description String AXIS_20 Windows Mixed Reality Motion Controller: Right Touchpad Vertical Movement Valve Knuckles Controller: Left Controller Index Finger Cap Sensor Declaration public const string AXIS_20 = \"AXIS_20\" Field Value Type Description String AXIS_21 Valve Knuckles Controller: Right Controller Index Finger Cap Sensor Declaration public const string AXIS_21 = \"AXIS_21\" Field Value Type Description String AXIS_22 Valve Knuckles Controller: Left Controller Middle Finger Cap Sensor Declaration public const string AXIS_22 = \"AXIS_22\" Field Value Type Description String AXIS_23 Valve Knuckles Controller: Right Controller Middle Finger Cap Sensor Declaration public const string AXIS_23 = \"AXIS_23\" Field Value Type Description String AXIS_24 Valve Knuckles Controller: Left Controller Ring Finger Cap Sensor Declaration public const string AXIS_24 = \"AXIS_24\" Field Value Type Description String AXIS_25 Valve Knuckles Controller: Right Controller Ring Finger Cap Sensor Declaration public const string AXIS_25 = \"AXIS_25\" Field Value Type Description String AXIS_26 Valve Knuckles Controller: Left Controller Pinky Finger Cap Sensor Declaration public const string AXIS_26 = \"AXIS_26\" Field Value Type Description String AXIS_27 Valve Knuckles Controller: Right Controller Pinky Finger Cap Sensor Declaration public const string AXIS_27 = \"AXIS_27\" Field Value Type Description String AXIS_3 Mouse: Scroll Xbox Controller: Shared Trigger Declaration public const string AXIS_3 = \"AXIS_3\" Field Value Type Description String AXIS_4 HTC Vive Controller: Right Controller Trackpad (2) Horizontal Movement Oculus Touch Controller: Axis2D.SecondaryThumbstick Horizontal Movement Valve Knuckles Controller: Right Controller Trackpad Horizontal Movement Windows Mixed Reality Motion Controller: Right Thumbstick Horizontal Movement Xbox Controller: Right Thumbstick Vertical Movement Declaration public const string AXIS_4 = \"AXIS_4\" Field Value Type Description String AXIS_5 HTC Vive Controller: Right Controller Trackpad (2) Vertical Movement Oculus Touch Controller: Axis2D.SecondaryThumbstick Vertical Movement Valve Knuckles Controller: Right Controller Trackpad Vertical Movement Windows Mixed Reality Motion Controller: Right Thumbstick Vertical Movement Xbox Controller: Right Thumbstick Vertical Movement Declaration public const string AXIS_5 = \"AXIS_5\" Field Value Type Description String AXIS_6 None Declaration public const string AXIS_6 = \"AXIS_6\" Field Value Type Description String AXIS_7 Xbox Controller: D-Pad Horizontal Declaration public const string AXIS_7 = \"AXIS_7\" Field Value Type Description String AXIS_8 Xbox Controller: D-Pad Vertical Declaration public const string AXIS_8 = \"AXIS_8\" Field Value Type Description String AXIS_9 HTC Vive Controller: Left Controller Trigger (7) Squeeze Oculus Touch Controller: Axis1D.PrimaryIndexTrigger Squeeze Valve Knuckles Controller: Left Controller Trigger Squeeze Windows Mixed Reality Motion Controller: Left Trigger Squeeze Declaration public const string AXIS_9 = \"AXIS_9\" Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ClippingPlaneEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ClippingPlaneEditor.html",
    "title": "Class ClippingPlaneEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingPlaneEditor Inheritance Object ClippingPlaneEditor Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class ClippingPlaneEditor : Editor"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.DepthWrite.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.DepthWrite.html",
    "title": "Enum MixedRealityStandardShaderGUI.DepthWrite | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityStandardShaderGUI.DepthWrite Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax protected enum DepthWrite Fields Name Description Off On"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.RenderingMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.RenderingMode.html",
    "title": "Enum MixedRealityStandardShaderGUI.RenderingMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityStandardShaderGUI.RenderingMode Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax protected enum RenderingMode Fields Name Description Additive Custom Opaque PremultipliedTransparent Transparent TransparentCutout"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.PrefabPropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.PrefabPropertyDrawer.html",
    "title": "Class PrefabPropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class PrefabPropertyDrawer Custom property drawer for decorated values rendered in the inspector. Inheritance Object PrefabPropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class PrefabPropertyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.UnityJoystickManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.UnityJoystickManager.html",
    "title": "Class UnityJoystickManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityJoystickManager Manages joysticks using unity input system. Inheritance Object BaseDeviceManager UnityJoystickManager Implements IMixedRealityDeviceManager IMixedRealityExtensionService Inherited Members BaseDeviceManager.RequestPointers(SystemType, Handedness, Boolean) Namespace : Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput Assembly : cs.temp.dll.dll Syntax public class UnityJoystickManager : BaseDeviceManager, IMixedRealityDeviceManager, IMixedRealityExtensionService Constructors UnityJoystickManager(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public UnityJoystickManager(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Fields ActiveControllers Declaration protected static readonly Dictionary<string, GenericJoystickController> ActiveControllers Field Value Type Description Dictionary < String , GenericJoystickController > Methods Disable() Declaration public override void Disable() GetActiveControllers() Declaration public override IMixedRealityController[] GetActiveControllers() Returns Type Description IMixedRealityController [] Overrides BaseDeviceManager.GetActiveControllers() GetCurrentControllerType(String) Gets the current controller type for the joystick name provided. Declaration protected virtual SupportedControllerType GetCurrentControllerType(string joystickName) Parameters Type Name Description String joystickName The name of they joystick from Unity's Returns Type Description SupportedControllerType The supported controller type GetOrAddController(String) Gets or adds a controller using the joystick name provided. Declaration protected virtual GenericJoystickController GetOrAddController(string joystickName) Parameters Type Name Description String joystickName The name of they joystick from Unity's Returns Type Description GenericJoystickController A new controller reference. Update() Declaration public override void Update() Implements IMixedRealityDeviceManager IMixedRealityExtensionService"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpPlayerBuildTools.BuildInfoConfigurationMethod.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpPlayerBuildTools.BuildInfoConfigurationMethod.html",
    "title": "Delegate UwpPlayerBuildTools.BuildInfoConfigurationMethod | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate UwpPlayerBuildTools.BuildInfoConfigurationMethod A method capable of configuring BuildInfo settings. Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Build Assembly : cs.temp.dll.dll Syntax public delegate void BuildInfoConfigurationMethod(ref BuildInfo toConfigure); Parameters Type Name Description BuildInfo toConfigure The settings to configure."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpPlayerBuildTools.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpPlayerBuildTools.html",
    "title": "Class UwpPlayerBuildTools | Mixed Reality Toolkit Documentation",
    "keywords": "Class UwpPlayerBuildTools Class containing various utility methods to build a WSA solution from a Unity project. Inheritance Object UwpPlayerBuildTools Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Build Assembly : cs.temp.dll.dll Syntax public static class UwpPlayerBuildTools Fields BuildSymbolDebug Declaration public const string BuildSymbolDebug = \"DEBUG\" Field Value Type Description String BuildSymbolMaster Declaration public const string BuildSymbolMaster = \"MASTER\" Field Value Type Description String BuildSymbolRelease Declaration public const string BuildSymbolRelease = \"RELEASE\" Field Value Type Description String Methods BuildUwpPlayer(BuildInfo) Declaration public static void BuildUwpPlayer(BuildInfo buildInfo) Parameters Type Name Description BuildInfo buildInfo BuildUwpPlayer_CommandLine() Used to trigger a build from the command line for continuous integration. Declaration public static void BuildUwpPlayer_CommandLine() GetProjectPath() Get the Unity Project Root Path. Declaration public static string GetProjectPath() Returns Type Description String RaiseOverrideBuildDefaults(ref BuildInfo) Call this method to give other code an opportunity to override BuildInfo defaults. Declaration public static void RaiseOverrideBuildDefaults(ref BuildInfo toConfigure) Parameters Type Name Description BuildInfo toConfigure The settings to configure. See Also OverrideBuildDefaults Events BuildCompleted Event triggered when a build completes. Declaration public static event Action<BuildInfo, BuildReport> BuildCompleted Event Type Type Description Action < BuildInfo , BuildReport > BuildStarted Event triggered when a build starts. Declaration public static event Action<BuildInfo> BuildStarted Event Type Type Description Action < BuildInfo > OverrideBuildDefaults Add a handler to this event to override BuildInfo defaults before a build. Declaration public static event UwpPlayerBuildTools.BuildInfoConfigurationMethod OverrideBuildDefaults Event Type Type Description UwpPlayerBuildTools.BuildInfoConfigurationMethod See Also RaiseOverrideBuildDefaults(ref BuildInfo)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.ParabolaConstrainedLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.ParabolaConstrainedLineDataProvider.html",
    "title": "Class ParabolaConstrainedLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolaConstrainedLineDataProvider Generates a parabolic line between two points. Inheritance Object BaseMixedRealityLineDataProvider ParabolaLineDataProvider ParabolaConstrainedLineDataProvider Inherited Members ParabolaLineDataProvider.StartPoint ParabolaLineDataProvider.GetUnClampedWorldLengthInternal() ParabolaLineDataProvider.GetUpVectorInternal(Single) BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.Update() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public class ParabolaConstrainedLineDataProvider : ParabolaLineDataProvider Properties EndPoint The point where this line will end. Declaration public MixedRealityPose EndPoint { get; set; } Property Value Type Description MixedRealityPose Height Declaration public float Height { get; set; } Property Value Type Description Single PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount UpDirection Declaration public Vector3 UpDirection { get; set; } Property Value Type Description Vector3 Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) OnValidate() Declaration protected override void OnValidate() Overrides ParabolaLineDataProvider.OnValidate() SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterWiggly.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterWiggly.html",
    "title": "Class DistorterWiggly | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterWiggly Inheritance Object Distorter DistorterWiggly Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters Assembly : cs.temp.dll.dll Syntax public class DistorterWiggly : Distorter, IComparable<Distorter> Properties AxisOffset Declaration public Vector3 AxisOffset { get; set; } Property Value Type Description Vector3 AxisSpeed Declaration public Vector3 AxisSpeed { get; set; } Property Value Type Description Vector3 AxisStrength Declaration public Vector3 AxisStrength { get; set; } Property Value Type Description Vector3 ScaleMultiplier Declaration public float ScaleMultiplier { get; set; } Property Value Type Description Single SpeedMultiplier Declaration public float SpeedMultiplier { get; set; } Property Value Type Description Single StrengthMultiplier Declaration public float StrengthMultiplier { get; set; } Property Value Type Description Single Methods DistortPointInternal(Vector3, Single) Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) Implements System.IComparable<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters Classes Distorter DistorterBulge DistorterGravity DistorterSimplex DistorterSphere DistorterWiggly"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.GazeStabilizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.GazeStabilizer.html",
    "title": "Class GazeStabilizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class GazeStabilizer GazeStabilizer iterates over samples of Raycast data and helps stabilize the user's gaze for precision targeting. Inheritance Object BaseRayStabilizer GazeStabilizer Inherited Members BaseRayStabilizer.UpdateStability(Vector3, Quaternion) Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax [Serializable] public class GazeStabilizer : BaseRayStabilizer Constructors GazeStabilizer() Declaration public GazeStabilizer() Properties StablePosition The stabilized position. Declaration public override Vector3 StablePosition { get; } Property Value Type Description Vector3 Overrides BaseRayStabilizer.StablePosition StableRay The stabilized position. Declaration public override Ray StableRay { get; } Property Value Type Description Ray Overrides BaseRayStabilizer.StableRay StableRotation Declaration public override Quaternion StableRotation { get; } Property Value Type Description Quaternion Overrides BaseRayStabilizer.StableRotation StoredStabilitySamples Number of samples that you want to iterate on. Declaration public int StoredStabilitySamples { get; } Property Value Type Description Int32 Methods UpdateStability(Vector3, Vector3) Updates the StablePosition and StableRotation based on GazeSample values. Call this method with RaycastHit parameters to get stable values. Declaration public override void UpdateStability(Vector3 gazePosition, Vector3 gazeDirection) Parameters Type Name Description Vector3 gazePosition Position value from a RaycastHit point. Vector3 gazeDirection Direction value from a RaycastHit rotation. Overrides BaseRayStabilizer.UpdateStability(Vector3, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.PrefabAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.PrefabAttribute.html",
    "title": "Class PrefabAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class PrefabAttribute Attribute used to ensure that a GameObject inspector slot only accepts prefabs. Inheritance Object PrefabAttribute Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class PrefabAttribute : PropertyAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.Headset.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.Headset.html",
    "title": "Struct Headset | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Headset The headset definition defines the headset as defined by the SDK / Unity. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public struct Headset Properties HeadsetSDKType The designated hand that the controller is managing, as defined by the SDK / Unity. Declaration public SDKType HeadsetSDKType { get; set; } Property Value Type Description SDKType Id The ID assigned to the Headset Declaration public string Id { get; set; } Property Value Type Description String IsOpaque Indicates whether or not the headset display is opaque. As defined by the SDK / Unity. Declaration public bool IsOpaque { get; set; } Property Value Type Description Boolean IsPositionAvailable Indicates whether or not the headset is currently providing position data. Declaration public bool IsPositionAvailable { get; set; } Property Value Type Description Boolean IsRotationAvailable Indicates whether or not the headset is currently providing rotation data. Declaration public bool IsRotationAvailable { get; set; } Property Value Type Description Boolean Position Outputs the current position of the headset, as defined by the SDK / Unity. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 Rotation Outputs the current rotation of the headset, as defined by the SDK / Unity. Declaration public Quaternion Rotation { get; set; } Property Value Type Description Quaternion TrackingState Outputs the current state of the headset, whether it is tracked or not. As defined by the SDK / Unity. Declaration public TrackingState TrackingState { get; set; } Property Value Type Description TrackingState"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.CursorStateEnum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.CursorStateEnum.html",
    "title": "Enum CursorStateEnum | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CursorStateEnum Enum for current cursor state Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax public enum CursorStateEnum Fields Name Description Contextual Allows for external override Interact IsHandDetected AND not IsPointerDown AND TargetedObject is NULL InteractHover IsHandDetected AND not IsPointerDown AND TargetedObject exists None Useful for releasing external override. See CursorStateEnum.Contextual Observe Not IsHandDetected OR HasTeleportIntent ObserveHover Not IsHandDetected AND not IsPointerDown AND TargetedObject exists OR HasTeleportIntent AND Teleport Surface IsValid Release Available for use by classes that extend Cursor. No logic for setting Release state exists in the base Cursor class. Select IsHandDetected AND IsPointerDown"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.RotationConstraintType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.RotationConstraintType.html",
    "title": "Enum RotationConstraintType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum RotationConstraintType Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum RotationConstraintType Fields Name Description None XAxisOnly YAxisOnly ZAxisOnly"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.MixedRealityRegisteredServiceProvidersProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.MixedRealityRegisteredServiceProvidersProfile.html",
    "title": "Class MixedRealityRegisteredServiceProvidersProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityRegisteredServiceProvidersProfile Inheritance Object BaseMixedRealityProfile MixedRealityRegisteredServiceProvidersProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions Assembly : cs.temp.dll.dll Syntax public class MixedRealityRegisteredServiceProvidersProfile : BaseMixedRealityProfile Properties Configurations Currently registered system and manager configurations. Declaration public MixedRealityServiceConfiguration[] Configurations { get; } Property Value Type Description MixedRealityServiceConfiguration []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.LineFollower.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.LineFollower.html",
    "title": "Class LineFollower | Mixed Reality Toolkit Documentation",
    "keywords": "Class LineFollower Synchronizes the follower's transform position with the point along the line. Inheritance Object LineFollower Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines Assembly : cs.temp.dll.dll Syntax public class LineFollower : MonoBehaviour Properties Follower The transform that will follow the point along the line. Declaration public Transform Follower { get; set; } Property Value Type Description Transform NormalizedLength Gets a point along the line at the specified normalized length. Declaration public float NormalizedLength { get; set; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.LineUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.LineUtility.html",
    "title": "Class LineUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class LineUtility Mixed Reality line utility class with helpful math functions for calculation, and other convenience methods. Inheritance Object LineUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines Assembly : cs.temp.dll.dll Syntax public static class LineUtility Methods GetEllipsePoint(Vector2, Single) Calculate the ellipse point at the angle provided. Declaration public static Vector3 GetEllipsePoint(Vector2 radius, float angle) Parameters Type Name Description Vector2 radius The radius of the ellipse. Single angle Angle along the ellipse to find the point. Returns Type Description Vector3 The calculated point at the specified angle. GetPointAlongConstrainedParabola(Vector3, Vector3, Vector3, Single, Single) Gets the point along a constrained parabola. Declaration public static Vector3 GetPointAlongConstrainedParabola(Vector3 origin, Vector3 end, Vector3 upDirection, float height, float normalizedLength) Parameters Type Name Description Vector3 origin The point in space where the parabola starts. Vector3 end The point in space where the parabola ends. Vector3 upDirection The up direction of the arc. Single height The height of the arc. Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. GetPointAlongPhysicalParabola(Vector3, Vector3, Single, Vector3, Single) Gets the point along a physics based parabola. Declaration public static Vector3 GetPointAlongPhysicalParabola(Vector3 origin, Vector3 direction, float velocity, Vector3 gravity, float time) Parameters Type Name Description Vector3 origin The point in space where the parabola starts Vector3 direction The direction the line is intended to go Single velocity Vector3 gravity Single time Returns Type Description Vector3 The calculated point. GetPointAlongSpline(MixedRealityPose[], Single, InterpolationType) Gets the point along the spline. Declaration public static Vector3 GetPointAlongSpline(MixedRealityPose[] points, float normalizedLength, InterpolationType interpolation = null) Parameters Type Name Description MixedRealityPose [] points the points of the whole spline. Single normalizedLength the normalized length along the line to calculate the point. InterpolationType interpolation Optional Interpolation type to use when calculating the point. Returns Type Description Vector3 The calculated point found along the normalized length. GetVectorCollectionBlend(Vector3[], Single, Boolean) Returns a blended value from a collection of vectors Declaration public static Vector3 GetVectorCollectionBlend(Vector3[] vectorCollection, float normalizedLength, bool repeat) Parameters Type Name Description Vector3 [] vectorCollection The collection to use to calculate the blend. Single normalizedLength the normalized length along the line to calculate the point. Boolean repeat Returns Type Description Vector3 The calculated point found along the normalized length. InterpolateBezierPoints(Vector3, Vector3, Vector3, Vector3, Single) Interpolate the provided points using the standard Bezier algorithm. Declaration public static Vector3 InterpolateBezierPoints(Vector3 point1, Vector3 point2, Vector3 point3, Vector3 point4, float normalizedLength) Parameters Type Name Description Vector3 point1 Vector3 point2 Vector3 point3 Vector3 point4 Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. InterpolateCatmullRomPoints(Vector3, Vector3, Vector3, Vector3, Single) Interpolate the provided points using Catmull Rom algorithm. Declaration public static Vector3 InterpolateCatmullRomPoints(Vector3 point1, Vector3 point2, Vector3 point3, Vector3 point4, float normalizedLength) Parameters Type Name Description Vector3 point1 Vector3 point2 Vector3 point3 Vector3 point4 Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. InterpolateHermitePoints(Vector3, Vector3, Vector3, Vector3, Single) Interpolate the provided points using the Hermite algorithm. Declaration public static Vector3 InterpolateHermitePoints(Vector3 point1, Vector3 point2, Vector3 point3, Vector3 point4, float normalizedLength) Parameters Type Name Description Vector3 point1 Vector3 point2 Vector3 point3 Vector3 point4 Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. InterpolateVectorArray(Vector3[], Single) Interpolate a position between the provided points. Declaration public static Vector3 InterpolateVectorArray(Vector3[] points, float normalizedLength) Parameters Type Name Description Vector3 [] points The points to use in the calculation. Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. Invert(Color) Inverts the color Declaration public static Color Invert(this Color color) Parameters Type Name Description Color color Returns Type Description Color"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerVisualizationSetting.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerVisualizationSetting.html",
    "title": "Struct MixedRealityControllerVisualizationSetting | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityControllerVisualizationSetting Used to define a controller's visualization settings. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MixedRealityControllerVisualizationSetting Constructors MixedRealityControllerVisualizationSetting(String, Type, Handedness, GameObject) Constructor. Declaration public MixedRealityControllerVisualizationSetting(string description, Type controllerType, Handedness handedness = null, GameObject overrideModel = null) Parameters Type Name Description String description Description of the Device. Type controllerType Controller Type to instantiate at runtime. Handedness handedness The designated hand that the device is managing. GameObject overrideModel The controller model prefab to be rendered. Properties ControllerType Controller Type to instantiate at runtime. Declaration public SystemType ControllerType { get; } Property Value Type Description SystemType Description Description of the Device. Declaration public string Description { get; } Property Value Type Description String Handedness The designated hand that the device is managing. Declaration public Handedness Handedness { get; } Property Value Type Description Handedness OverrideControllerModel The controller model prefab to be rendered. Declaration public GameObject OverrideControllerModel { get; } Property Value Type Description GameObject UseDefaultModel User the controller model loader provided by the SDK, or provide override models. Declaration public bool UseDefaultModel { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.KeywordAndResponse.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.KeywordAndResponse.html",
    "title": "Struct KeywordAndResponse | Mixed Reality Toolkit Documentation",
    "keywords": "Struct KeywordAndResponse Keyword/UnityEvent pair that ties voice input to UnityEvents wired up in the inspector. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct KeywordAndResponse Constructors KeywordAndResponse(String, UnityEvent) Constructor. Declaration public KeywordAndResponse(string keyword, UnityEvent response) Parameters Type Name Description String keyword The keyword to listen for. UnityEvent response The handler to be invoked when the keyword is recognized. Properties Keyword The keyword to listen for. Declaration public string Keyword { get; } Property Value Type Description String Response The handler to be invoked when the keyword is recognized. Declaration public UnityEvent Response { get; } Property Value Type Description UnityEvent"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.DistortionMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.DistortionMode.html",
    "title": "Enum DistortionMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum DistortionMode How to apply the distortion along the line. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Lines Assembly : cs.temp.dll.dll Syntax public enum DistortionMode Fields Name Description NormalizedLength Use the normalized length of the line plus its distortion strength curve to determine distortion strength Uniform Use a single value to determine distortion strength"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.MixedRealityServiceConfiguration.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.MixedRealityServiceConfiguration.html",
    "title": "Struct MixedRealityServiceConfiguration | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityServiceConfiguration Defines a system, feature, or manager to be registered with as a on startup. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MixedRealityServiceConfiguration Constructors MixedRealityServiceConfiguration(SystemType, String, UInt32, SupportedPlatforms, BaseMixedRealityProfile) Constructor. Declaration public MixedRealityServiceConfiguration(SystemType componentType, string componentName, uint priority, SupportedPlatforms runtimePlatform, BaseMixedRealityProfile configurationProfile) Parameters Type Name Description SystemType componentType The concrete type for the system, feature or manager. String componentName The simple, human readable name for the system, feature, or manager. UInt32 priority The priority this system, feature, or manager will be initialized in. SupportedPlatforms runtimePlatform The runtime platform(s) to run this system, feature, or manager on. BaseMixedRealityProfile configurationProfile The configuration profile for the service. Properties ComponentName The simple, human readable name for the system, feature, or manager. Declaration public string ComponentName { get; } Property Value Type Description String ComponentType The concrete type for the system, feature or manager. Declaration public SystemType ComponentType { get; } Property Value Type Description SystemType ConfigurationProfile The configuration profile for the service. Declaration public BaseMixedRealityProfile ConfigurationProfile { get; } Property Value Type Description BaseMixedRealityProfile Priority The priority this system, feature, or manager will be initialized in. Declaration public uint Priority { get; } Property Value Type Description UInt32 RuntimePlatform The runtime platform(s) to run this service. Declaration public SupportedPlatforms RuntimePlatform { get; } Property Value Type Description SupportedPlatforms"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.SolverOrientationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.SolverOrientationType.html",
    "title": "Enum SolverOrientationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SolverOrientationType Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum SolverOrientationType Fields Name Description CameraAligned Align parallel to the direction the camera is facing CameraFacing Orient toward Camera.main instead of SolverHandler's properties. FaceTrackedObject Face toward the tracked object FollowTrackedObject Use the tracked object's pitch, yaw, and roll Unmodified Leave the object's rotation alone YawOnly Orient towards SolverHandler's tracked object or TargetTransform"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.FocusEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.FocusEventData.html",
    "title": "Class FocusEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusEventData Describes an Input Event associated with a specific pointer's focus state change. Inheritance Object FocusEventData Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class FocusEventData : BaseEventData Constructors FocusEventData(EventSystem) Declaration public FocusEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties NewFocusedObject The new focused object. Declaration public GameObject NewFocusedObject { get; } Property Value Type Description GameObject OldFocusedObject The old focused object. Declaration public GameObject OldFocusedObject { get; } Property Value Type Description GameObject Pointer The pointer associated with this event. Declaration public IMixedRealityPointer Pointer { get; } Property Value Type Description IMixedRealityPointer Methods Initialize(IMixedRealityPointer) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Initialize(IMixedRealityPointer, GameObject, GameObject) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer, GameObject oldFocusedObject, GameObject newFocusedObject) Parameters Type Name Description IMixedRealityPointer pointer GameObject oldFocusedObject GameObject newFocusedObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.BoundsExtensions.Axis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.BoundsExtensions.Axis.html",
    "title": "Enum BoundsExtensions.Axis | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundsExtensions.Axis Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public enum Axis Fields Name Description X Y Z"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.EnumerableExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class EnumerableExtensions Extension methods for the .Net IEnumerable class Inheritance Object EnumerableExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class EnumerableExtensions Methods MaxOrDefault<T>(IEnumerable<T>, IComparer<T>) Returns the max element based on the provided comparer or the default value when the list is empty Declaration public static T MaxOrDefault<T>(this IEnumerable<T> items, IComparer<T> comparer = null) Parameters Type Name Description IEnumerable <T> items IComparer <T> comparer Returns Type Description T Max or default value of T Type Parameters Name Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ClippingSphereEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ClippingSphereEditor.html",
    "title": "Class ClippingSphereEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingSphereEditor Inheritance Object ClippingSphereEditor Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class ClippingSphereEditor : Editor"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.BaseMixedRealityToolkitConfigurationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.BaseMixedRealityToolkitConfigurationProfileInspector.html",
    "title": "Class BaseMixedRealityToolkitConfigurationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityToolkitConfigurationProfileInspector Base class for all Mixed Reality Toolkit specific inspectors to inherit from. Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityBoundaryVisualizationProfileInspector MixedRealityCameraProfileInspector MixedRealityControllerMappingProfileInspector MixedRealityControllerVisualizationProfileInspector MixedRealityDiagnosticsSystemProfileInspector MixedRealityGesturesProfileInspector MixedRealityInputActionsProfileInspector MixedRealityInputSystemProfileInspector MixedRealityPointerProfileInspector MixedRealityRegisteredServiceProviderProfileInspector MixedRealitySpatialAwarenessMeshObserverProfileInspector MixedRealitySpeechCommandsProfileInspector MixedRealityToolkitConfigurationProfileInspector Inherited Members BaseMixedRealityProfileInspector.OnEnable() BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityToolkitConfigurationProfileInspector : BaseMixedRealityProfileInspector Methods Awake() Declaration protected virtual void Awake() CheckProfileLock(Object, Boolean) Checks if the profile is locked and displays a warning. Declaration protected static void CheckProfileLock(object target, bool lockProfile = true) Parameters Type Name Description Object target Boolean lockProfile RenderMixedRealityToolkitLogo() Render the Mixed Reality Toolkit Logo. Declaration protected void RenderMixedRealityToolkitLogo()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealitySpeechCommandsProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealitySpeechCommandsProfileInspector.html",
    "title": "Class MixedRealitySpeechCommandsProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpeechCommandsProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealitySpeechCommandsProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpeechCommandsProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityToolkitConfigurationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityToolkitConfigurationProfileInspector.html",
    "title": "Class MixedRealityToolkitConfigurationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitConfigurationProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityToolkitConfigurationProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitConfigurationProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines Classes BaseLineDataProviderInspector EllipseLineDataProviderInspector ParabolaPhysicalLineDataProviderInspector ParabolicConstrainedLineDataProviderInspector SimpleLineDataProviderInspector SplineDataProviderInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.MixedRealityInspectorUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.MixedRealityInspectorUtility.html",
    "title": "Class MixedRealityInspectorUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInspectorUtility This class has handy inspector utilities and functions. Inheritance Object MixedRealityInspectorUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities Assembly : cs.temp.dll.dll Syntax public static class MixedRealityInspectorUtility Fields DarkColor Declaration public static readonly Color DarkColor Field Value Type Description Color DisabledColor Declaration public static readonly Color DisabledColor Field Value Type Description Color DottedLineScreenSpace Declaration public const float DottedLineScreenSpace = 4.65F Field Value Type Description Single ErrorColor Declaration public static readonly Color ErrorColor Field Value Type Description Color HandleColorAxis Declaration public static readonly Color HandleColorAxis Field Value Type Description Color HandleColorCircle Declaration public static readonly Color HandleColorCircle Field Value Type Description Color HandleColorRotation Declaration public static readonly Color HandleColorRotation Field Value Type Description Color HandleColorSphere Declaration public static readonly Color HandleColorSphere Field Value Type Description Color HandleColorSquare Declaration public static readonly Color HandleColorSquare Field Value Type Description Color HandleColorTangent Declaration public static readonly Color HandleColorTangent Field Value Type Description Color LineVelocityColor Declaration public static readonly Color LineVelocityColor Field Value Type Description Color SectionColor Declaration public static readonly Color SectionColor Field Value Type Description Color SuccessColor Declaration public static readonly Color SuccessColor Field Value Type Description Color WarningColor Declaration public static readonly Color WarningColor Field Value Type Description Color Methods AxisMoveHandle(Object, Vector3, Vector3, Single, Single, Boolean, Boolean) Draw an axis move handle. Declaration public static float AxisMoveHandle(object target, Vector3 origin, Vector3 direction, float distance, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target that is undergoing the transformation. Also used for recording undo. Vector3 origin The initial position of the axis. Vector3 direction The direction the axis is facing. Single distance Distance from the axis. Single handleSize Optional handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Single The new Single value. CenterOnMainWin(EditorWindow) Centers an editor window on the main display. Declaration public static void CenterOnMainWin(this EditorWindow window) Parameters Type Name Description EditorWindow window CheckMixedRealityConfigured(Boolean) Check and make sure we have a Mixed Reality Toolkit and an active profile. Declaration public static bool CheckMixedRealityConfigured(bool showHelpBox = true) Parameters Type Name Description Boolean showHelpBox Returns Type Description Boolean True if the Mixed Reality Toolkit is properly initialized. CircleMoveHandle(Object, Vector3, Single, Single, Single, Single, Boolean, Boolean) Draw a Circle Move Handle. Declaration public static Vector3 CircleMoveHandle(object target, Vector3 position, float xScale = 1F, float yScale = 1F, float zScale = 1F, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 position The position to draw the handle. Single xScale Scale the new value on the x axis by this amount. Single yScale Scale the new value on the x axis by this amount. Single zScale Scale the new value on the x axis by this amount. Single handleSize Optional handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Vector3 The new value. GetEditorMainWindowPos() Found at https://answers.unity.com/questions/960413/editor-window-how-to-center-a-window.html Declaration public static Rect GetEditorMainWindowPos() Returns Type Description Rect RotationHandle(Object, Vector3, Quaternion, Single, Boolean, Boolean) Draw a rotation handle. Declaration public static Quaternion RotationHandle(object target, Vector3 position, Quaternion rotation, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 position The position to draw the handle. Quaternion rotation The rotation to draw the handle. Single handleSize Optional, handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Quaternion The new value. SphereMoveHandle(Object, Vector3, Single, Single, Single, Single, Boolean, Boolean) Draw a sphere move handle. Declaration public static Vector3 SphereMoveHandle(object target, Vector3 position, float xScale = 1F, float yScale = 1F, float zScale = 1F, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 position The position to draw the handle. Single xScale Scale the new value on the x axis by this amount. Single yScale Scale the new value on the x axis by this amount. Single zScale Scale the new value on the x axis by this amount. Single handleSize Optional handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Vector3 The new value. SquareMoveHandle(Object, Vector3, Single, Single, Single, Single, Boolean, Boolean) Draw a square move handle. Declaration public static Vector3 SquareMoveHandle(object target, Vector3 position, float xScale = 1F, float yScale = 1F, float zScale = 1F, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 position The position to draw the handle. Single xScale Scale the new value on the x axis by this amount. Single yScale Scale the new value on the x axis by this amount. Single zScale Scale the new value on the x axis by this amount. Single handleSize Optional handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Vector3 The new value. VectorHandle(Object, Vector3, Vector3, Boolean, Boolean, Single, Single, Boolean, Boolean) Draw a vector handle. Declaration public static Vector3 VectorHandle(object target, Vector3 origin, Vector3 vector, bool normalize = true, bool clamp = true, float handleLength = 1F, float handleSize = 0.1F, bool recordUndo = true, bool autoSize = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 origin Vector3 vector Boolean normalize Optional, Normalize the new vector value. Boolean clamp Optional, Clamp new vector's value based on the distance to the origin. Single handleLength Optional, handle length. Single handleSize Optional, handle size. Boolean recordUndo Optional, records undo state. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Returns Type Description Vector3 The new value."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityFocusHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityFocusHandler.html",
    "title": "Interface IMixedRealityFocusHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityFocusHandler Interface to implement to react to focus enter/exit. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityFocusHandler : IEventSystemHandler Methods OnBeforeFocusChange(FocusEventData) Declaration [Obsolete(\"Use IMixedRealityFocusChangedHandler instead.\")] void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusChanged(FocusEventData) Declaration [Obsolete(\"Use IMixedRealityFocusChangedHandler instead.\")] void OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusEnter(FocusEventData) The Focus Enter event is raised on this whenever a IMixedRealityPointer 's focus enters this 's . Declaration void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) The Focus Exit event is raised on this whenever a IMixedRealityPointer 's focus leaves this 's . Declaration void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Devices | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Classes ControllerMappingLibrary Helper utility to manage all the required Axis configuration for platforms, where required MixedRealityControllerMappingProfile New controller types can be registered by adding the MixedRealityControllerAttribute to the controller class. MixedRealityControllerVisualizationProfile MixedRealityInteractionMapping Maps the capabilities of controllers, linking the Physical inputs of a controller to a Logical construct in a runtime project One definition should exist for each physical device input, such as buttons, triggers, joysticks, dpads, and more. Structs Headset The headset definition defines the headset as defined by the SDK / Unity. MixedRealityControllerMapping Used to define a controller or other input device's physical buttons, and other attributes. MixedRealityControllerVisualizationSetting Used to define a controller's visualization settings. Enums DeviceInputType The InputType defines the types of input exposed by a controller. Denoting the available buttons / interactions that a controller supports. GestureInputType The GestureInputType defines the types of gestures exposed by a controller. MixedRealityControllerConfigurationFlags Flags used by MixedRealityControllerAttribute. SDKType The SDKType lists the XR SDKs that are supported by the Mixed Reality Toolkit. Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) SupportedControllerType The SDKType lists the XR SDKs that are supported by the Mixed Reality Toolkit. Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) TrackingState The Tracking State defines how a device is currently being tracked. This enables developers to be able to handle non-tracked situations and react accordingly."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Boundary.BoundaryEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Boundary.BoundaryEventData.html",
    "title": "Class BoundaryEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundaryEventData The data describing the boundary system event. Inheritance Object GenericBaseEventData BoundaryEventData Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Boundary Assembly : cs.temp.dll.dll Syntax public class BoundaryEventData : GenericBaseEventData Constructors BoundaryEventData(EventSystem) Constructor. Declaration public BoundaryEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties AreBoundaryWallsVisualized Are the boundary walls being visualized by the boundary system. Declaration public bool AreBoundaryWallsVisualized { get; } Property Value Type Description Boolean IsCeilingVisualized Is the ceiling being visualized by the boundary system. Declaration public bool IsCeilingVisualized { get; } Property Value Type Description Boolean Remarks The boundary system defines the ceiling as a plane set at above the floor. IsFloorVisualized Is the floor being visualized by the boundary system. Declaration public bool IsFloorVisualized { get; } Property Value Type Description Boolean IsPlayAreaVisualized Is the play area being visualized by the boundary system. Declaration public bool IsPlayAreaVisualized { get; } Property Value Type Description Boolean IsTrackedAreaVisualized Is the tracked area being visualized by the boundary system. Declaration public bool IsTrackedAreaVisualized { get; } Property Value Type Description Boolean Methods Initialize(IMixedRealityBoundarySystem, Boolean, Boolean, Boolean, Boolean, Boolean) Declaration public void Initialize(IMixedRealityBoundarySystem boundarySystem, bool isFloorVisualized, bool isPlayAreaVisualized, bool isTrackedAreaVisualized, bool areBoundaryWallsVisualized, bool isCeilingVisualized) Parameters Type Name Description IMixedRealityBoundarySystem boundarySystem Boolean isFloorVisualized Boolean isPlayAreaVisualized Boolean isTrackedAreaVisualized Boolean areBoundaryWallsVisualized Boolean isCeilingVisualized"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Classes BaseMixedRealityProfileInspector Base class for all Inspectors to inherit from. BaseMixedRealityToolkitConfigurationProfileInspector Base class for all Mixed Reality Toolkit specific inspectors to inherit from. MixedRealityBaseConfigurationProfileInspector MixedRealityBoundaryVisualizationProfileInspector MixedRealityCameraProfileInspector MixedRealityControllerMappingProfileInspector MixedRealityControllerVisualizationProfileInspector MixedRealityDiagnosticsSystemProfileInspector MixedRealityGesturesProfileInspector MixedRealityInputActionsProfileInspector MixedRealityInputSystemProfileInspector MixedRealityPointerProfileInspector MixedRealityRegisteredServiceProviderProfileInspector MixedRealitySpatialAwarenessMeshObserverProfileInspector MixedRealitySpeechCommandsProfileInspector MixedRealityToolkitConfigurationProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.DataProviders.RectangleLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.DataProviders.RectangleLineDataProviderInspector.html",
    "title": "Class RectangleLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class RectangleLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector RectangleLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public class RectangleLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem Interfaces IMixedRealityBoundaryHandler IMixedRealityBoundarySystem Manager interface for a Boundary system in the Mixed Reality Toolkit All replacement systems for providing Boundary functionality should derive from this interface"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.Handlers Interfaces IMixedRealityEventHandler Interface to implement generic events. IMixedRealityPlacementHandler Interface to implement reacting to placement of objects."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityInputHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityInputHandler.html",
    "title": "Interface IMixedRealityInputHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputHandler Interface to implement for simple generic input. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputHandler : IEventSystemHandler Methods OnInputDown(InputEventData) Input Down updates from Interactions, Keys, or any other simple input. Declaration void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnInputPressed(InputEventData<Single>) Input Pressed updates from Interactions, Keys, buttons, triggers, or any other simple input. Declaration [Obsolete(\"Use IMixedRealityInputHandler<float>.OnInputChanged(InputEventData<float> eventData)\")] void OnInputPressed(InputEventData<float> eventData) Parameters Type Name Description InputEventData < Single > eventData Remarks The is the pressed amount, if available. OnInputUp(InputEventData) Input Up updates from Interactions, Keys, or any other simple input. Declaration void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnPositionInputChanged(InputEventData<Vector2>) Input Position updates from Thumbsticks, Touchpads, or any other dual axis input with a position. Declaration [Obsolete(\"Use IMixedRealityInputHandler<Vector2>.OnInputChanged(InputEventData<Vector2> eventData)\")] void OnPositionInputChanged(InputEventData<Vector2> eventData) Parameters Type Name Description InputEventData < Vector2 > eventData Remarks The is the current input position."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Physics.IBaseRayStabilizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Physics.IBaseRayStabilizer.html",
    "title": "Interface IBaseRayStabilizer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IBaseRayStabilizer Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Physics Assembly : cs.temp.dll.dll Syntax public interface IBaseRayStabilizer Properties StablePosition Declaration Vector3 StablePosition { get; } Property Value Type Description Vector3 StableRay Declaration Ray StableRay { get; } Property Value Type Description Ray StableRotation Declaration Quaternion StableRotation { get; } Property Value Type Description Quaternion Methods UpdateStability(Vector3, Quaternion) Declaration void UpdateStability(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Quaternion rotation UpdateStability(Vector3, Vector3) Declaration void UpdateStability(Vector3 position, Vector3 direction) Parameters Type Name Description Vector3 position Vector3 direction"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.LinePointTransformMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.LinePointTransformMode.html",
    "title": "Enum LinePointTransformMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum LinePointTransformMode Defines how a base line data provider will transform its points Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Lines Assembly : cs.temp.dll.dll Syntax public enum LinePointTransformMode Fields Name Description UseMatrix Use a matrix. Lines that are not active and enabled will not update point positions. UseTransform Use the local line transform. More reliable but with a performance cost."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.FocusDetails.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.FocusDetails.html",
    "title": "Struct FocusDetails | Mixed Reality Toolkit Documentation",
    "keywords": "Struct FocusDetails Contains information about which game object has the focus currently. Also contains information about the normal of that point. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Physics Assembly : cs.temp.dll.dll Syntax public struct FocusDetails Properties LastRaycastHit The last raycast hit info. Declaration public RaycastHit LastRaycastHit { get; set; } Property Value Type Description RaycastHit Normal The normal of the raycast. Declaration public Vector3 Normal { get; set; } Property Value Type Description Vector3 Object The object hit by the last raycast. Declaration public GameObject Object { get; set; } Property Value Type Description GameObject Point The hit point of the raycast. Declaration public Vector3 Point { get; set; } Property Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem Classes BaseSpatialAwarenessObject MixedRealitySpatialAwarenessMeshObserverProfile Configuration profile settings for spatial awareness mesh observers. SpatialAwarenessMeshObject Object encapsulating the components of a spatial awareness mesh object. SpatialAwarenessPlanarObject Enums SpatialAwarenessMeshDisplayOptions Options for how the spatial mesh is to be displayed by the spatial awareness system. SpatialAwarenessMeshLevelOfDetail SpatialAwarenessSurfaceTypes Enumeration defining the types of planar surfaces that are supported by the spatial awareness surface finding subsystem."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Handedness.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Handedness.html",
    "title": "Enum Handedness | Mixed Reality Toolkit Documentation",
    "keywords": "Enum Handedness The Handedness defines which hand a controller is currently operating in. It is up to the developer to determine whether this affects the use of a controller or not. \"Other\" defines potential controllers that will offer a \"third\" hand, e.g. a full body tracking suit. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax [Flags] public enum Handedness : byte Fields Name Description Any Global catchall, used to map actions to any controller (provided the controller supports it) Both The controller is identified as being either left and/or right handed. Left The controller is identified as being provided in a Left hand None No hand specified by the SDK for the controller Other Reserved, for systems that provide alternate hand state. Right The controller is identified as being provided in a Right hand"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Vector3Smoothed.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Vector3Smoothed.html",
    "title": "Struct Vector3Smoothed | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Vector3Smoothed Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public struct Vector3Smoothed Constructors Vector3Smoothed(Vector3, Single) Declaration public Vector3Smoothed(Vector3 value, float smoothingTime) Parameters Type Name Description Vector3 value Single smoothingTime Properties Current Declaration public Vector3 Current { get; set; } Property Value Type Description Vector3 Goal Declaration public Vector3 Goal { get; set; } Property Value Type Description Vector3 SmoothTime Declaration public float SmoothTime { get; set; } Property Value Type Description Single Methods SetGoal(Vector3) Declaration public void SetGoal(Vector3 newGoal) Parameters Type Name Description Vector3 newGoal Update(Single) Declaration public void Update(float deltaTime) Parameters Type Name Description Single deltaTime"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.MixedRealityPointerEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.MixedRealityPointerEventData.html",
    "title": "Class MixedRealityPointerEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPointerEventData Describes an Input Event that involves a tap, click, or touch. Inheritance Object BaseInputEventData InputEventData MixedRealityPointerEventData Inherited Members InputEventData.Handedness InputEventData.Initialize(IMixedRealityInputSource, MixedRealityInputAction) InputEventData.Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction) BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityPointerEventData : InputEventData Constructors MixedRealityPointerEventData(EventSystem) Constructor. Declaration public MixedRealityPointerEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties Count Number of Clicks, Taps, or Presses that triggered the event. Declaration public int Count { get; } Property Value Type Description Int32 Pointer Pointer for the Input Event Declaration public IMixedRealityPointer Pointer { get; } Property Value Type Description IMixedRealityPointer Methods Initialize(IMixedRealityPointer, Handedness, MixedRealityInputAction, Int32) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer, Handedness handedness, MixedRealityInputAction inputAction, int count = 0) Parameters Type Name Description IMixedRealityPointer pointer Handedness handedness MixedRealityInputAction inputAction Int32 count Initialize(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource, Int32) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null, int count = 0) Parameters Type Name Description IMixedRealityPointer pointer MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource Int32 count"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.SourcePoseEventData-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.SourcePoseEventData-1.html",
    "title": "Class SourcePoseEventData<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class SourcePoseEventData<T> Describes a source change event. Source State events do not have an associated MixedRealityInputAction . Inheritance Object BaseInputEventData SourceStateEventData SourcePoseEventData<T> Inherited Members SourceStateEventData.Controller SourceStateEventData.Initialize(IMixedRealityInputSource, IMixedRealityController) BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class SourcePoseEventData<T> : SourceStateEventData Type Parameters Name Description T Constructors SourcePoseEventData(EventSystem) Constructor. Declaration public SourcePoseEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties SourceData The new position of the input source. Declaration public T SourceData { get; } Property Value Type Description T Methods Initialize(IMixedRealityInputSource, IMixedRealityController, T) Populates the event with data. Declaration public void Initialize(IMixedRealityInputSource inputSource, IMixedRealityController controller, T data) Parameters Type Name Description IMixedRealityInputSource inputSource IMixedRealityController controller T data"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ChannelPackerWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ChannelPackerWindow.html",
    "title": "Class ChannelPackerWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class ChannelPackerWindow Inheritance Object ChannelPackerWindow Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class ChannelPackerWindow : EditorWindow"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ClippingBoxEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.ClippingBoxEditor.html",
    "title": "Class ClippingBoxEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingBoxEditor Inheritance Object ClippingBoxEditor Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class ClippingBoxEditor : Editor"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityRegisteredServiceProviderProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityRegisteredServiceProviderProfileInspector.html",
    "title": "Class MixedRealityRegisteredServiceProviderProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityRegisteredServiceProviderProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityRegisteredServiceProviderProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityRegisteredServiceProviderProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealitySpatialAwarenessMeshObserverProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealitySpatialAwarenessMeshObserverProfileInspector.html",
    "title": "Class MixedRealitySpatialAwarenessMeshObserverProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessMeshObserverProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealitySpatialAwarenessMeshObserverProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessMeshObserverProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.SimpleLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.SimpleLineDataProviderInspector.html",
    "title": "Class SimpleLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimpleLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector SimpleLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines Assembly : cs.temp.dll.dll Syntax public class SimpleLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.StripMeshLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.StripMeshLineRenderer.html",
    "title": "Class StripMeshLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class StripMeshLineRenderer Draws a strip of polygons along the line Inheritance Object BaseMixedRealityLineRenderer StripMeshLineRenderer Inherited Members BaseMixedRealityLineRenderer.lineDataSource BaseMixedRealityLineRenderer.LineDataSource BaseMixedRealityLineRenderer.LineColor BaseMixedRealityLineRenderer.LineWidth BaseMixedRealityLineRenderer.WidthMultiplier BaseMixedRealityLineRenderer.ColorOffset BaseMixedRealityLineRenderer.WidthOffset BaseMixedRealityLineRenderer.StepMode BaseMixedRealityLineRenderer.LineStepCount BaseMixedRealityLineRenderer.GetColor(Single) BaseMixedRealityLineRenderer.GetWidth(Single) Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers Assembly : cs.temp.dll.dll Syntax public class StripMeshLineRenderer : BaseMixedRealityLineRenderer Methods GenerateStripMesh(List<Vector3>, List<Color>, List<Single>, Single, List<Vector3>, Mesh, Vector3) Declaration public static void GenerateStripMesh(List<Vector3> positionList, List<Color> colorList, List<float> thicknessList, float uvOffsetLocal, List<Vector3> forwardList, Mesh mesh, Vector3 up) Parameters Type Name Description List < Vector3 > positionList List < Color > colorList List < Single > thicknessList Single uvOffsetLocal List < Vector3 > forwardList Mesh mesh Vector3 up Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.ApplicationInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.ApplicationInfo.html",
    "title": "Class ApplicationInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class ApplicationInfo Inheritance Object ApplicationInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class ApplicationInfo Fields Name Declaration public string Name Field Value Type Description String PackageFamilyName Declaration public string PackageFamilyName Field Value Type Description String PackageFullName Declaration public string PackageFullName Field Value Type Description String PackageOrigin Declaration public int PackageOrigin Field Value Type Description Int32 PackageRelativeId Declaration public string PackageRelativeId Field Value Type Description String Publisher Declaration public string Publisher Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.AvailableWiFiNetworks.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.AvailableWiFiNetworks.html",
    "title": "Class AvailableWiFiNetworks | Mixed Reality Toolkit Documentation",
    "keywords": "Class AvailableWiFiNetworks Inheritance Object AvailableWiFiNetworks Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class AvailableWiFiNetworks Fields AvailableNetworks Declaration public WirelessNetworkInfo[] AvailableNetworks Field Value Type Description WirelessNetworkInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.Vector3RangeAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.Vector3RangeAttribute.html",
    "title": "Class Vector3RangeAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class Vector3RangeAttribute Attribute used to make a float or int variable in a script be restricted to a specific range. Inheritance Object Vector3RangeAttribute Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class Vector3RangeAttribute : PropertyAttribute Constructors Vector3RangeAttribute(Single, Single) Attribute used to make a float or int variable in a script be restricted to a specific range. Declaration public Vector3RangeAttribute(float min, float max) Parameters Type Name Description Single min The minimum allowed value. Single max The maximum allowed value. Fields Max Maximum value. Declaration public readonly float Max Field Value Type Description Single Min Minimum value. Declaration public readonly float Min Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityInteractionMapping.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityInteractionMapping.html",
    "title": "Class MixedRealityInteractionMapping | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInteractionMapping Maps the capabilities of controllers, linking the Physical inputs of a controller to a Logical construct in a runtime project One definition should exist for each physical device input, such as buttons, triggers, joysticks, dpads, and more. Inheritance Object MixedRealityInteractionMapping Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax [Serializable] public class MixedRealityInteractionMapping Constructors MixedRealityInteractionMapping(MixedRealityInteractionMapping) Declaration public MixedRealityInteractionMapping(MixedRealityInteractionMapping mixedRealityInteractionMapping) Parameters Type Name Description MixedRealityInteractionMapping mixedRealityInteractionMapping MixedRealityInteractionMapping(UInt32, String, AxisType, DeviceInputType, KeyCode) The constructor for a new Interaction Mapping definition Declaration public MixedRealityInteractionMapping(uint id, string description, AxisType axisType, DeviceInputType inputType, KeyCode keyCode) Parameters Type Name Description UInt32 id Identity for mapping String description The description of the interaction mapping. AxisType axisType The axis that the mapping operates on, also denotes the data type for the mapping DeviceInputType inputType The physical input device / control KeyCode keyCode Optional KeyCode value to get input from Unity's old input system MixedRealityInteractionMapping(UInt32, String, AxisType, DeviceInputType, MixedRealityInputAction, KeyCode, String, String, Boolean, Boolean) The constructor for a new Interaction Mapping definition Declaration public MixedRealityInteractionMapping(uint id, string description, AxisType axisType, DeviceInputType inputType, MixedRealityInputAction inputAction, KeyCode keyCode = null, string axisCodeX = \"\", string axisCodeY = \"\", bool invertXAxis = false, bool invertYAxis = false) Parameters Type Name Description UInt32 id Identity for mapping String description The description of the interaction mapping. AxisType axisType The axis that the mapping operates on, also denotes the data type for the mapping DeviceInputType inputType The physical input device / control MixedRealityInputAction inputAction The logical MixedRealityInputAction that this input performs KeyCode keyCode Optional KeyCode value to get input from Unity's old input system String axisCodeX Optional horizontal or single axis value to get axis data from Unity's old input system. String axisCodeY Optional vertical axis value to get axis data from Unity's old input system. Boolean invertXAxis Optional horizontal axis invert option. Boolean invertYAxis Optional vertical axis invert option. MixedRealityInteractionMapping(UInt32, String, AxisType, DeviceInputType, String, String, Boolean, Boolean) The constructor for a new Interaction Mapping definition Declaration public MixedRealityInteractionMapping(uint id, string description, AxisType axisType, DeviceInputType inputType, string axisCodeX, string axisCodeY = \"\", bool invertXAxis = false, bool invertYAxis = false) Parameters Type Name Description UInt32 id Identity for mapping String description The description of the interaction mapping. AxisType axisType The axis that the mapping operates on, also denotes the data type for the mapping DeviceInputType inputType The physical input device / control String axisCodeX Optional horizontal or single axis value to get axis data from Unity's old input system. String axisCodeY Optional vertical axis value to get axis data from Unity's old input system. Boolean invertXAxis Optional horizontal axis invert option. Boolean invertYAxis Optional vertical axis invert option. Properties AxisCodeX Optional horizontal or single axis value to get axis data from Unity's old input system. Declaration public string AxisCodeX { get; } Property Value Type Description String AxisCodeY Optional vertical axis value to get axis data from Unity's old input system. Declaration public string AxisCodeY { get; } Property Value Type Description String AxisType The axis type of the button, e.g. Analogue, Digital, etc. Declaration public AxisType AxisType { get; } Property Value Type Description AxisType BoolData The Bool data value. Declaration public bool BoolData { get; set; } Property Value Type Description Boolean Remarks Only supported for a Digital mapping axis type Changed Has the value changed since the last reading. Declaration public bool Changed { get; } Property Value Type Description Boolean Description The description of the interaction mapping. Declaration public string Description { get; } Property Value Type Description String FloatData The Float data value. Declaration public float FloatData { get; set; } Property Value Type Description Single Remarks Only supported for a SingleAxis mapping axis type Id The Id assigned to the Interaction. Declaration public uint Id { get; } Property Value Type Description UInt32 InputType The primary action of the input as defined by the controller SDK. Declaration public DeviceInputType InputType { get; } Property Value Type Description DeviceInputType InvertXAxis Should the X axis be inverted? Declaration public bool InvertXAxis { get; set; } Property Value Type Description Boolean Remarks Only valid for SingleAxis and DualAxis inputs. InvertYAxis Should the Y axis be inverted? Declaration public bool InvertYAxis { get; set; } Property Value Type Description Boolean Remarks Only valid for DualAxis inputs. KeyCode Optional KeyCode value to get input from Unity's old input system. Declaration public KeyCode KeyCode { get; } Property Value Type Description KeyCode MixedRealityInputAction Action to be raised to the Input Manager when the input data has changed. Declaration public MixedRealityInputAction MixedRealityInputAction { get; } Property Value Type Description MixedRealityInputAction PoseData The Pose data value. Declaration public MixedRealityPose PoseData { get; set; } Property Value Type Description MixedRealityPose Remarks Only supported for a SixDof mapping axis type PositionData The ThreeDof Vector3 Position data value. Declaration public Vector3 PositionData { get; set; } Property Value Type Description Vector3 Remarks Only supported for a ThreeDof mapping axis type RawData The Raw (object) data value. Declaration public object RawData { get; set; } Property Value Type Description Object Remarks Only supported for a Raw mapping axis type RotationData The ThreeDof Quaternion Rotation data value. Declaration public Quaternion RotationData { get; set; } Property Value Type Description Quaternion Remarks Only supported for a ThreeDof mapping axis type Vector2Data The Vector2 data value. Declaration public Vector2 Vector2Data { get; set; } Property Value Type Description Vector2 Remarks Only supported for a DualAxis mapping axis type"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityGesturesProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityGesturesProfile.html",
    "title": "Class MixedRealityGesturesProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityGesturesProfile Configuration profile settings for setting up and consuming Input Actions. Inheritance Object BaseMixedRealityProfile MixedRealityGesturesProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealityGesturesProfile : BaseMixedRealityProfile Properties Gestures The currently configured gestures for the application. Declaration public MixedRealityGestureMapping[] Gestures { get; } Property Value Type Description MixedRealityGestureMapping [] ManipulationGestures The recognizable Manipulation Gestures. Declaration public WindowsGestureSettings ManipulationGestures { get; } Property Value Type Description WindowsGestureSettings NavigationGestures The recognizable Navigation Gestures. Declaration public WindowsGestureSettings NavigationGestures { get; } Property Value Type Description WindowsGestureSettings RailsNavigationGestures The recognizable Navigation Gestures. Declaration public WindowsGestureSettings RailsNavigationGestures { get; } Property Value Type Description WindowsGestureSettings UseRailsNavigation Declaration public bool UseRailsNavigation { get; } Property Value Type Description Boolean WindowsGestureAutoStart Declaration public AutoStartBehavior WindowsGestureAutoStart { get; } Property Value Type Description AutoStartBehavior"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.ProcessList.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.ProcessList.html",
    "title": "Class ProcessList | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProcessList Inheritance Object ProcessList Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class ProcessList Fields Processes Declaration public ProcessInfo[] Processes Field Value Type Description ProcessInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem.InscribedRectangle.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem.InscribedRectangle.html",
    "title": "Class InscribedRectangle | Mixed Reality Toolkit Documentation",
    "keywords": "Class InscribedRectangle The InscribedRectangle class defines the largest rectangle within an arbitrary shape. Inheritance Object InscribedRectangle Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem Assembly : cs.temp.dll.dll Syntax public class InscribedRectangle Constructors InscribedRectangle(Edge[], Int32) Finds a large inscribed rectangle. Tries to be maximal but this is best effort. The algorithm used was inspired by the blog post https://d3plus.org/blog/behind-the-scenes/2014/07/08/largest-rect/ Random points within the polygon are chosen, and then 2 lines are drawn through those points. The midpoints of those lines are used as the center of various rectangles, using a binary search to vary the size, until the largest fit-able rectangle is found. This is then repeated for predefined angles (0-180 in steps of 15) and aspect ratios (1 to 15 in steps of 0.5). Declaration public InscribedRectangle(Edge[] geometryEdges, int randomSeed) Parameters Type Name Description Edge [] geometryEdges The boundary geometry. Int32 randomSeed Random number generator seed. Remarks For the most reproducible results, use the same randomSeed value each time this method is called. Properties Angle The rotation angle, in degrees, of the inscribed rectangle. Declaration public float Angle { get; } Property Value Type Description Single Center The center point of the inscribed rectangle. Declaration public Vector2 Center { get; } Property Value Type Description Vector2 Height The height of the inscribed rectangle. Declaration public float Height { get; } Property Value Type Description Single IsValid Is the described rectangle valid? Declaration public bool IsValid { get; } Property Value Type Description Boolean Remarks A rectangle is considered valid if it's center point is valid. Width The width of the inscribed rectangle. Declaration public float Width { get; } Property Value Type Description Single Methods IsInsideBoundary(Vector2) Determine of the provided point lies within the defined rectangle. Declaration public bool IsInsideBoundary(Vector2 point) Parameters Type Name Description Vector2 point The point to check Returns Type Description Boolean True if the point is within the rectangle's bounds, false otherwise. Exceptions Type Condition InvalidOperationException The rectangle is not valid."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerMappingProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerMappingProfile.html",
    "title": "Class MixedRealityControllerMappingProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerMappingProfile New controller types can be registered by adding the MixedRealityControllerAttribute to the controller class. Inheritance Object BaseMixedRealityProfile MixedRealityControllerMappingProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerMappingProfile : BaseMixedRealityProfile Properties ControllerMappingTypes Declaration public static Type[] ControllerMappingTypes { get; } Property Value Type Description Type [] CustomControllerMappingTypes Declaration public static Type[] CustomControllerMappingTypes { get; } Property Value Type Description Type [] MixedRealityControllerMappingProfiles Declaration public MixedRealityControllerMapping[] MixedRealityControllerMappingProfiles { get; } Property Value Type Description MixedRealityControllerMapping [] Methods Awake() Declaration public void Awake()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleVectorAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleVectorAxis.html",
    "title": "Struct InputActionRuleVectorAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleVectorAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Vector3 > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InputActionRuleVectorAxis : IInputActionRule<Vector3> Constructors InputActionRuleVectorAxis(MixedRealityInputAction, MixedRealityInputAction, Vector3) Constructor. Declaration public InputActionRuleVectorAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, Vector3 criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Vector3 criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public Vector3 Criteria { get; } Property Value Type Description Vector3 RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Classes MixedRealityGesturesProfile Configuration profile settings for setting up and consuming Input Actions. MixedRealityInputActionRulesProfile MixedRealityInputActionsProfile Configuration profile settings for setting up and consuming Input Actions. MixedRealityInputSystemProfile Configuration profile settings for setting up controller pointers. MixedRealityPointerProfile Configuration profile settings for setting up controller pointers. MixedRealitySpeechCommandsProfile Configuration profile settings for setting up and consuming Speech Commands. Structs AnimatedCursorData Data struct for cursor state information for the Animated Cursor, which leverages the Unity animation system. This defines a modification to an Unity animation parameter, based on cursor state. InputActionEventPair Data class that maps MixedRealityInputAction s to UnityEvent s wired up in the inspector. InputActionRuleDigital Generic Input Action Rule for raising actions based on specific criteria. InputActionRuleDualAxis Generic Input Action Rule for raising actions based on specific criteria. InputActionRulePoseAxis Generic Input Action Rule for raising actions based on specific criteria. InputActionRuleQuaternionAxis Generic Input Action Rule for raising actions based on specific criteria. InputActionRuleSingleAxis Generic Input Action Rule for raising actions based on specific criteria. InputActionRuleVectorAxis Generic Input Action Rule for raising actions based on specific criteria. KeywordAndResponse Keyword/UnityEvent pair that ties voice input to UnityEvents wired up in the inspector. MixedRealityGestureMapping Data structure for mapping gestures to MixedRealityInputAction s that can be raised by the Input System. MixedRealityInputAction An Input Action for mapping an action to an Input Sources Button, Joystick, Sensor, etc. PointerOption Defines a pointer option to assign to a controller. SpeechCommands Data structure for mapping Voice and Keyboard input to MixedRealityInputAction s that can be raised by the Input System. Enums CursorStateEnum Enum for current cursor state WindowsGestureSettings Copy of Unity's"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessMeshLevelOfDetail.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessMeshLevelOfDetail.html",
    "title": "Enum SpatialAwarenessMeshLevelOfDetail | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SpatialAwarenessMeshLevelOfDetail Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public enum SpatialAwarenessMeshLevelOfDetail Fields Name Description Coarse The coarse level of detail is well suited for identifying large environmental features, such as floors and walls. Custom The custom level of detail allows specifying a custom value for MeshTrianglesPerCubicMeter. Fine The fine level of detail is well suited for using as an occlusion mesh."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor.InputManagerAxisType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor.InputManagerAxisType.html",
    "title": "Enum InputManagerAxisType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InputManagerAxisType Used to map AxisType from a useful name to the int value the InputManager wants. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public enum InputManagerAxisType Fields Name Description JoystickAxis KeyOrMouseButton MouseMovement"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.TrackedObjectType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.TrackedObjectType.html",
    "title": "Enum TrackedObjectType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TrackedObjectType Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum TrackedObjectType Fields Name Description Head Calculates position and orientation from the main camera. MotionControllerLeft Calculates position and orientation from the left motion-tracked controller. MotionControllerRight Calculates position and orientation from the right motion-tracked controller."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Audio.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Audio.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Audio | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Audio Interfaces IAudioInfluencer Interface that should be implemented by any class that wishes to influence how an audio source sounds."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityGestureHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityGestureHandler.html",
    "title": "Interface IMixedRealityGestureHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityGestureHandler Interface to implement for generic gesture input. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityGestureHandler : IEventSystemHandler Methods OnGestureCanceled(InputEventData) Gesture Canceled Event. Declaration void OnGestureCanceled(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureCompleted(InputEventData) Gesture Completed Event. Declaration void OnGestureCompleted(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureStarted(InputEventData) Gesture Started Event. Declaration void OnGestureStarted(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureUpdated(InputEventData) Gesture Updated Event. Declaration void OnGestureUpdated(InputEventData eventData) Parameters Type Name Description InputEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterGravity.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterGravity.html",
    "title": "Class DistorterGravity | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterGravity Inheritance Object Distorter DistorterGravity Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters Assembly : cs.temp.dll.dll Syntax public class DistorterGravity : Distorter, IComparable<Distorter> Properties AxisStrength Declaration public Vector3 AxisStrength { get; set; } Property Value Type Description Vector3 GravityStrength Declaration public AnimationCurve GravityStrength { get; set; } Property Value Type Description AnimationCurve LocalCenterOfGravity Declaration public Vector3 LocalCenterOfGravity { get; set; } Property Value Type Description Vector3 Radius Declaration public float Radius { get; set; } Property Value Type Description Single WorldCenterOfGravity Declaration public Vector3 WorldCenterOfGravity { get; set; } Property Value Type Description Vector3 Methods DistortPointInternal(Vector3, Single) Internal function where position distortion is done Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Internal function where scale distortion is done Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) OnDrawGizmos() Declaration public void OnDrawGizmos() Implements System.IComparable<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem.MixedRealitySpatialAwarenessEventData-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem.MixedRealitySpatialAwarenessEventData-1.html",
    "title": "Class MixedRealitySpatialAwarenessEventData<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessEventData<T> Data for spatial awareness events. Inheritance Object GenericBaseEventData MixedRealitySpatialAwarenessEventData MixedRealitySpatialAwarenessEventData<T> Inherited Members MixedRealitySpatialAwarenessEventData.Id MixedRealitySpatialAwarenessEventData.Initialize(IMixedRealitySpatialAwarenessObserver, Int32) GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessEventData<T> : MixedRealitySpatialAwarenessEventData Type Parameters Name Description T The spatial object data type. Constructors MixedRealitySpatialAwarenessEventData(EventSystem) Constructor. Declaration public MixedRealitySpatialAwarenessEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties SpatialObject The spatial object to which this event pertains. Declaration public T SpatialObject { get; } Property Value Type Description T Methods Initialize(IMixedRealitySpatialAwarenessObserver, Int32, T) Initialize the event data. Declaration public void Initialize(IMixedRealitySpatialAwarenessObserver observer, int id, T spatialObject) Parameters Type Name Description IMixedRealitySpatialAwarenessObserver observer The that raised the event. Int32 id The identifier of the observed spatial object. T spatialObject The observed spatial object."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.CameraExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.CameraExtensions.html",
    "title": "Class CameraExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class CameraExtensions Extension methods for the Unity's Camera class Inheritance Object CameraExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class CameraExtensions Methods GetHorizontalFieldOfViewRadians(Camera) Get the horizontal FOV from the stereo camera Declaration public static float GetHorizontalFieldOfViewRadians(this Camera camera) Parameters Type Name Description Camera camera Returns Type Description Single IsInFOV(Camera, Vector3) Returns if a point will be rendered on the screen in either eye Declaration public static bool IsInFOV(this Camera camera, Vector3 position) Parameters Type Name Description Camera camera The camera to check the point against Vector3 position Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.CollectionsExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.CollectionsExtensions.html",
    "title": "Class CollectionsExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class CollectionsExtensions Extension methods for .Net Collection objects, e.g. Lists, Dictionaries, Arrays Inheritance Object CollectionsExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class CollectionsExtensions Methods AsReadOnly<TElement>(IList<TElement>) Creates a read-only wrapper around an existing collection. Declaration public static ReadOnlyCollection<TElement> AsReadOnly<TElement>(this IList<TElement> elements) Parameters Type Name Description IList <TElement> elements The collection to be wrapped. Returns Type Description ReadOnlyCollection <TElement> The new, read-only wrapper around elements . Type Parameters Name Description TElement The type of element in the collection. DisposeElements<TElement>(IEnumerable<TElement>) Disposes of all non-null elements in a collection. Declaration public static void DisposeElements<TElement>(this IEnumerable<TElement> elements) where TElement : IDisposable Parameters Type Name Description IEnumerable <TElement> elements The collection of elements to be disposed. Type Parameters Name Description TElement The type of element in the collection. DisposeElements<TElement>(IList<TElement>) Disposes of all non-null elements in a collection. Declaration public static void DisposeElements<TElement>(this IList<TElement> elements) where TElement : IDisposable Parameters Type Name Description IList <TElement> elements The collection of elements to be disposed. Type Parameters Name Description TElement The type of element in the collection. ExportDictionaryValuesAsArray<T>(Dictionary<UInt32, T>) Exports the values of a uint indexed Dictionary as an Array Declaration public static T[] ExportDictionaryValuesAsArray<T>(this Dictionary<uint, T> input) Parameters Type Name Description Dictionary < UInt32 , T> input Dictionary to be exported Returns Type Description T[] array in the type of data stored in the Dictionary Type Parameters Name Description T Type of data stored in the values of the Dictionary GetInteractionByType(MixedRealityInteractionMapping[], DeviceInputType) Overload extension to enable getting of an InteractionDefinition of a specific type Declaration public static MixedRealityInteractionMapping GetInteractionByType(this MixedRealityInteractionMapping[] input, DeviceInputType key) Parameters Type Name Description MixedRealityInteractionMapping [] input The InteractionDefinition array reference DeviceInputType key The specific DeviceInputType value to query Returns Type Description MixedRealityInteractionMapping SortedInsert<TElement>(List<TElement>, TElement, IComparer<TElement>) Inserts an item in its sorted position into an already sorted collection. This is useful if you need to consume the collection in between insertions and need it to stay correctly sorted the whole time. If you just need to insert a bunch of items and then consume the sorted collection at the end, it's faster to add all the elements and then use at the end. Declaration public static int SortedInsert<TElement>(this List<TElement> elements, TElement toInsert, IComparer<TElement> comparer = null) Parameters Type Name Description List <TElement> elements The collection of sorted elements to be inserted into. TElement toInsert The element to insert. IComparer <TElement> comparer The comparer to use when sorting or to use . Returns Type Description Int32 Type Parameters Name Description TElement The type of element in the collection. SupportsInputType(MixedRealityInteractionMapping[], DeviceInputType) Overload extension to enable getting of an InteractionDefinition of a specific type Declaration public static bool SupportsInputType(this MixedRealityInteractionMapping[] input, DeviceInputType key) Parameters Type Name Description MixedRealityInteractionMapping [] input The InteractionDefinition array reference DeviceInputType key The specific DeviceInputType value to query Returns Type Description Boolean ToReadOnlyCollection<TElement>(IEnumerable<TElement>) Creates a read-only copy of an existing collection. Declaration public static ReadOnlyCollection<TElement> ToReadOnlyCollection<TElement>(this IEnumerable<TElement> elements) Parameters Type Name Description IEnumerable <TElement> elements The collection to be copied. Returns Type Description ReadOnlyCollection <TElement> The new, read-only copy of elements . Type Parameters Name Description TElement The type of element in the collection."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Data.ControllerInputActionOption.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Data.ControllerInputActionOption.html",
    "title": "Class ControllerInputActionOption | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerInputActionOption Used to aid in layout of Controller Input Actions. Inheritance Object ControllerInputActionOption Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Data Assembly : cs.temp.dll.dll Syntax [Serializable] public class ControllerInputActionOption Fields Controller Declaration public SupportedControllerType Controller Field Value Type Description SupportedControllerType Handedness Declaration public Handedness Handedness Field Value Type Description Handedness InputLabelPositions Declaration public Vector2[] InputLabelPositions Field Value Type Description Vector2 [] IsLabelFlipped Declaration public bool[] IsLabelFlipped Field Value Type Description Boolean []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Data.ControllerInputActionOptions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Data.ControllerInputActionOptions.html",
    "title": "Class ControllerInputActionOptions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerInputActionOptions Used to aid in layout of Controller Input Actions. Inheritance Object ControllerInputActionOptions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Data Assembly : cs.temp.dll.dll Syntax [Serializable] public class ControllerInputActionOptions Fields Controllers Declaration public List<ControllerInputActionOption> Controllers Field Value Type Description List < ControllerInputActionOption >"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.MixedRealityPosePropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.MixedRealityPosePropertyDrawer.html",
    "title": "Class MixedRealityPosePropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPosePropertyDrawer Inheritance Object MixedRealityPosePropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class MixedRealityPosePropertyDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.PhysicsLayerAttributeDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.PhysicsLayerAttributeDrawer.html",
    "title": "Class PhysicsLayerAttributeDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class PhysicsLayerAttributeDrawer Renders the physics layer dropdown based on the current layers set in the Tag Manager. Inheritance Object PhysicsLayerAttributeDrawer Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public sealed class PhysicsLayerAttributeDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Audio.IAudioInfluencer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Audio.IAudioInfluencer.html",
    "title": "Interface IAudioInfluencer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IAudioInfluencer Interface that should be implemented by any class that wishes to influence how an audio source sounds. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Audio Assembly : cs.temp.dll.dll Syntax public interface IAudioInfluencer Methods ApplyEffect(GameObject) Applies an audio effect. Declaration void ApplyEffect(GameObject soundEmittingObject) Parameters Type Name Description GameObject soundEmittingObject The GameObject on which the effect is to be applied. RemoveEffect(GameObject) Removes a previously applied audio effect. Declaration void RemoveEffect(GameObject soundEmittingObject) Parameters Type Name Description GameObject soundEmittingObject The GameObject from which the effect is to be removed."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields Classes InspectorField A set of field/property tags used to define how a property should render in a custom inspector InspectorGenericFields<T> A set of Inspector fields for setting up properties in a component that can be automatically rendered in a custom inspector Structs InspectorFieldData A reference to the InspectorField and cached info InspectorPropertySetting A InspectorField property definition and value. Enums InspectorField.FieldTypes Property types used for casting and defining property fields in the inspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterSphere.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterSphere.html",
    "title": "Class DistorterSphere | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterSphere Inheritance Object Distorter DistorterSphere Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters Assembly : cs.temp.dll.dll Syntax public class DistorterSphere : Distorter, IComparable<Distorter> Properties SphereCenter Declaration public Vector3 SphereCenter { get; set; } Property Value Type Description Vector3 Methods DistortPointInternal(Vector3, Single) Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) Implements System.IComparable<T>"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Textures/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Textures/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Textures | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Textures This folder contains all the individual texture assets used to build MRTK solutions"
  },
  "Documentation/GettingStartedWithTheMRTK.html": {
    "href": "Documentation/GettingStartedWithTheMRTK.html",
    "title": "Getting started with the Mixed Reality Toolkit | Mixed Reality Toolkit Documentation",
    "keywords": "Getting started with the Mixed Reality Toolkit The Mixed Reality Toolkit (MRTK) is a new platform for building your Mixed Reality experiences for Virtual Reality (VR) and Augmented Reality (AR), aimed at accelerating your content production by removing any of the common complexities that complicate projects in a true multi-platform / multi-vr solution. The MRTK solves this by providing a common logical platform to build your dream, together with a rich set of services and SDK components for building your project. Al these components are geared towards the new MRTK platform that abstracts out all the different ways that each platform delivers its experience. Prerequisites To get started with the Mixed Reality Toolkit you will need: Unity 2018.2.13f1 + Latest MRTK release (Beta) A dream Upgrading from the HoloToolkit (HTK) There is not a direct upgrade path from the HoloToolkit to the new Mixed Reality Toolkit due to the rebuilt framework. However, it is possible to import the MRTK into your HoloToolkit project and start work migrating your implementation if you wish. The Mixed Reality Team will release a guide in the future on the key differences between HTK and MRTK project implementations. Our recommendation is that if you have an existing HTK project, then it is best to continue with the HTK as it is still a robust and feature rich platform for building HoloLens projects. If you are building a new Mixed Reality solution, then we encourage you to join us on the MRTK journey. Some of our key contributors are already building production-ready solutions already utilizing the MRTK and using their experiences to enrich the toolkit moving forward. Starting your new project We have done an incredible amount of work to ensure the new project experience is as streamlined as possible. To this end, we endeavoured to get you up and running as fast as possible. To get your first project up and running, the steps are as follows: 1. Create your new project (or start a new scene in your current project) Note when creating a new project with Unity 2018, Unity gives you several templates to choose from. Currently the MRTK does not yet support the Scriptable Render Pipeline , so the LWSRP, HDSRP and VRSRP projects are not compatible with MRTK projects. Please stay tuned to the MRTK GitHub site for future announcements on SRP support. 2. Import the Mixed Reality Toolkit asset The Mixed Reality Toolkit is available via multiple delivery mechanisms and in the future will also be available via the Unity package manager once Unity makes that option available. Get the asset and import it in to your Unity project using \"Asset -> Import Package -> Custom Package\" from the Unity Editor menu. Accept all the content and continue. The SDK is optional but highly recommended for new users. Once you have a feel for how the toolkit works, you can remove these safely if you are not using them. The MRTK also provides a separate \"Examples\" asset , which currently contains demonstration scenes for current MRTK features. In the future this will also contain educational \"Example\" scenes to aid with learning implementation tricks with the toolkit. 3. Accept the Setup prompt (optional) Once imported, the MRTK will attempt to setup your project automatically for building Mixed Reality solutions, namely setting: Enable XR Settings for your current platform (enabling the XR checkbox) Note, you need to do this for each platform you wish to deploy on Force Text Serialization / Visible Meta files (recommended for Unity projects using source control) Change the Scripting back-end to use IL2CPP (as Unity is deprecating the .NET scripting back-end) The only option which is mandatory (and not listed above) is to set Unity to use the .NET 4 scripting runtime by default, as the MRTK uses advanced coding functions only available in .NET4+. From Unity 2018.3 and above, this will be the default for new Unity Projects. This prompt will automatically set the above options for you and restart Unity (for the .NET update) ready to start building your MRTK project. Accepting these options is completely optional (except .NET 4), if you click Later , the MRTK will not ask you again and leave you to it. You can then choose to set these options manually later as you see fit. 4. Configure your first Mixed Reality Toolkit scene The toolkit has been designed so that there is just one object that is mandatory in your scene. This is there to provide the core configuration and runtime for the Mixed Reality Toolkit (one of the key advantages in the new framework). Configuring your scene is extremely simple by simply selecting the following from the Editor menu: Mixed Reality Toolkit -> Configure Once this completes, you will see the following in your Scene hierarchy: The MRTK will also select the configured profile, click here for more details on this configuration screens Which contains the following: Mixed Reality Toolkit - The toolkit itself, providing the central configuration entry point for the entire framework. MixedRealityPlayspace - The parent object for the headset, which ensures the headset / controllers and other required systems are managed correctly in the scene. The Main Camera is moved as a child to the Playspace - Which allows the playspace to manage the camera in conjunction with the SDK's UIRaycastCamera added as a child to the Main Camera - To enable seamless UI interactions through the toolkit Note While working in your scene, DON'T move the Main Camera (or the playspace) from the scene origin (0,0,0). This is controlled by the MRTK and the active SDK. If you need to move the players start point, then move the scene content and NOT the camera ! 5. Hit play You are now ready to start building your Mixed Reality Solution, just start adding content and get building. Switch to other platforms (ensure they have XR enabled in their player settings) and your project will still run as expected without change. Configuring your project The Mixed Reality Toolkit configuration is all centralized on one place and attached to the MixedRealityToolkit object in your active scene. Clicking on this profile will show the configuration screens for the Mixed Reality Toolkit: From here you can navigate to all the configuration profiles for the MRTK, including: The \"Default\" profiles provided by the Mixed Reality Toolkit are locked by default, so when you view these in the inspector they will appear greyed out. This is to ensure you always have a common default for any project. We recommend you create your own profiles (see below) when you need to customize the configuration for your project. Main Mixed Reality Toolkit Configuration Camera Settings Input System Settings Boundary Visualization Settings Teleporting Settings Spatial Awareness Settings Diagnostics Settings Additional Services Settings Input Actions Settings Input Actions Rules Pointer Configuration Gestures Configuration Speech Commands Controller Mapping Configuration Controller Visualization Settings As you can see there are lots of options available and more will come available as we progress through the beta. When you start a new project, we provide a default set of configurations with every option turned on, styled for a fully cross platform project. These defaults are \"Locked\" to ensure you always have a common start point for your project and we encourage you to start defining your own settings as your project evolves. For this we provide options to either: Copy the defaults in to a new profile for you to start customizing it for your project Start afresh with a brand-new profile. When profiles are created by the MRTK, they are then placed in the following folder: \"Assets\\MixedRealityToolkit-Generated\\CustomProfiles\" At each step in the configuration, you can choose to remove and create a new profile, or simply copy the existing settings and continue to customize: For more information on customizing the Configuration Profiles Please check out the Mixed Reality Configuration Guide Get building your project Now your project is up and running, you can start building your Mixed Reality project. For more information on the rest of the toolkit, please check the following guides: Mixed Reality Configuration Guide Getting to know the Mixed Reality Toolkit Input System (Coming Soon) Customizing your controllers in the MRTK (Coming Soon) A walkthrough the UX components of the MRTK SDK (Coming Soon) Using Solvers to bind your objects together (Coming Soon) Creating interactions between the player and your project (Coming Soon) Configuration Profile Usage Guide (Coming Soon) Guide to building Registered Services (Coming Soon) Guide to Pointers documentation (Coming Soon)"
  },
  "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessEventData.html": {
    "href": "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessEventData.html",
    "title": "MixedRealitySpatialAwarenessEventData Class | Mixed Reality Toolkit Documentation",
    "keywords": "MixedRealitySpatialAwarenessEventData Class Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwareness The MixedRealitySpatialAwarenessEventData provides the data shared by all of the spatial awareness event types. EventTime Type DateTime The time at which the event occurred. Id Type UInt32 An identifier assigned to a specific object in the spatial awareness system. GameObject Type GameObject Unity GameObject, managed by the spatial awareness system, representing the data in this event. See Also Mixed Reality Spatial Awareness System Architecture"
  },
  "Documentation/DownloadingTheMRTK.html": {
    "href": "Documentation/DownloadingTheMRTK.html",
    "title": "How to download the Mixed Reality Toolkit | Mixed Reality Toolkit Documentation",
    "keywords": "How to download the Mixed Reality Toolkit Recognizing there are multiple ways in which developers want to be able to get access to project through Unity, the Mixed Reality Toolkit has been engineered to be available through the following methods: Unity Asset downloadable from the MRTK GitHub site You can download the packaged Unity Asset from here for importing in to your project. Unity NuGet delivery ( Coming soon ) Unity now has an asset plugin for getting access to Unity projects using the dependency delivery solution known as NuGet. Simply install the Unity NuGet package and search for the Mixed Reality Toolkit to download the project. Unity Package Manager ( Coming soon ) As soon as it's available, the MRTK team will be working with Unity to publish the Mixed Reality Toolkit as a package through their Unity Package Manager. Unity Asset Store ( under discussion ) It has been raised within the Mixed Reality Toolkit team that the package should be published to the Unity store, this is currently being investigated. Feedback is welcome through the Mixed Reality GitHub site (raise an issue to offer an opinion) and the HoloDevelopers Slack channel for the Mixed Reality Toolkit. GitHub submodule (advanced users) For those who would like to contribute to the MRTK or prefer to have the latest code in their project, there is another way to get access to the latest and greatest of the Mixed Reality Toolkit, be it the Release code or the in-progress development of the project. Stephen Hodgson has provided a full guide for how to use Git Submodules to download and synchronize the toolkit in to your project. Don't worry though, you still have control on how you update your project and can even \"Go back\" to a previous version of the toolkit at any time by simply checking out a specific commit or tag. Feedback welcome If you feel there are other options not listed above that would be beneficial to Unity developers, please let us know on the links above"
  },
  "Documentation/Architecture/SpatialAwareness/IMixedRealitySpatialAwarenessSystem.html": {
    "href": "Documentation/Architecture/SpatialAwareness/IMixedRealitySpatialAwarenessSystem.html",
    "title": "IMixedRealitySpatialAwarenessSystem Interface | Mixed Reality Toolkit Documentation",
    "keywords": "IMixedRealitySpatialAwarenessSystem Interface Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem The IMixedRealitySpatialAwarenessSystem is the interface that defines the requirements of the spatial awareness system. The interface is divided, logically into multiple sections. As new functionality is added, the appropriate settings section is to be defined. General System Controls The spatial awareness system contains data and methods that configure and control the overall spatial awareness system. StartupBehavior Type AutoStartBehavior Gets or sets a value that indicates that the developer intends for the spatial observer to start automatically or wait until explicitly resumed. This allows the application to decide precisely when it wishes to begin receiving spatial data notifications. ObservationExtents Type Vector3 Gets or sets the size of the volume from which individual observations will be made. This is not the total size of the observable space. UpdateInterval Type float Gets or sets the frequency, in seconds, at which the spatial observer updates. IsObserverRunning Type bool Indicates the current running state of the spatial observer. This is a read-only property, set by the spatial awareness system. void ResumeObserver() Starts / restarts the spatial observer. This will cause spatial observation events (ex: MeshAddedEvent) to resume being sent. void SuspendObserver() Stops / pauses the spatial observer. This will cause spatial observation events to be suspended until ResumeObserver is called. Mesh Handling Controls The mesh handling section contains the data and methods that configure and control the representation of data as a collection of meshes. For platforms that do not natively support returning observation data as a mesh, implementations can optionally process the native data before providing it to the caller. Use Mesh System Type bool Gets or sets a value that indicates if the spatial mesh subsystem is in use by the application. Turning this off will suspend all mesh events and cause the subsystem to return an empty collection when the GetMeshes method is called. MeshPhysicsLayer Type int Get or sets the desired Unity Physics Layer on which to set the spatial mesh. MeshPhysicsLayerMask Type int Gets the bit mask that corresponds to the value specified in MeshPhysicsLayer. This is a read-only property set by the spatial awareness system. MeshLevelOfDetail Type SpatialAwarenessMeshLevelOfDetail Gets or sets the level of detail for the returned spatial mesh. Setting this value to Custom, implies that the developer is specifying a custom value for MeshTrianglesPerCubicMeter. Specifying any other value will cause MeshTrianglesPerCubicMeter to be overwritten. MeshTrianglesPerCubicMeter Type int Gets or sets the level of detail, in triangles per cubic meter, for the returned spatial mesh. When specifying Coarse or Fine for the MeshLevelOfDetail, this value will be automatically overwritten. MeshRecalculateNormals Type bool Gets or sets the value indicating if the spatial awareness system to generate normal for the returned meshes as some platforms may not support returning normal along with the spatial mesh. MeshDisplayOption Type SpatialMeshDisplayOptions Gets or sets a value indicating how the mesh subsystem is to display surface meshes within the application. Applications that wish to process the Meshes should set this value to None. MeshVisibleMaterial Type Material Gets or sets the material to be used when displaying spatial meshes. MeshOcclusionMaterial Type Material Gets or sets the material to be used when spatial meshes should occlude other object. IDictionary<uint, GameObject> GetMeshes() Returns the collection of GameObjects being managed by the spatial awareness mesh subsystem. Surface Finding Controls The surface finding section contains the data and methods that configure and control the representation of data as a collection of planar surfaces. UseSurfaceFindingSystem Type bool Indicates if the surface finding subsystem is in use by the application. Turning this off will suspend all surface events. SurfacePhysicsLayer Type int Get or sets the desired Unity Physics Layer on which to set spatial surfaces. SurfacePhysicsLayerMask Type int Gets the bit mask that corresponds to the value specified in SurfacePhysicsLayer. This is a read-only property set by the spatial awareness system. SurfaceFindingMinimumArea Type float Gets or sets the minimum surface area, in square meters, that must be satisfied before a surface is identified. DisplayFloorSurfaces Type bool Gets or sets a value indicating if the surface subsystem is to automatically display floor surfaces within the application. When enabled, the surfaces will be added to the scene and displayed using the configured FloorSurfaceMaterial. FloorSurfaceMaterial Type Material Gets or sets the material to be used when displaying planar surface(s) identified as a floor. DisplayCeilingSurfaces Type bool Gets or sets a value indicating if the surface subsystem is to automatically display ceiling surfaces within the application. When enabled, the surfaces will be added to the scene and displayed using the configured CeilingSurfaceMaterial. CeilingSurfaceMaterial Type Material Gets or sets the material to be used when displaying planar surface(s) identified as a ceiling. DisplayWallSurfaces Type bool Gets or sets a value indicating if the surface subsystem is to automatically display wall surfaces within the application. When enabled, the surfaces will be added to the scene and displayed using the configured WallSurfaceMaterial. WallSurfaceMaterial Type Material Gets or sets the material to be used when displaying planar surface(s) identified as a wall. DisplayPlatformSurfaces Type bool Gets or sets a value indicating if the surface subsystem is to automatically display raised horizontal platform surfaces within the application. When enabled, the surfaces will be added to the scene and displayed using the configured PlatformSurfaceMaterial. PlatformSurfaceMaterial Type Material Gets or sets the material to be used when displaying planar surface(s) identified as a raised horizontal platform. IDictionary<int, GameObject> GetSurfaceObjects() Returns the collection of GameObjects managed by the surface finding subsystem. See Also Mixed Reality Spatial Awareness System Architecture MixedRealitySpatialAwarenessSystem Class IMixedRealitySpatialAwarenessMeshHandler Interface IMixedRealitySpatialAwarenessSurfaceFindingHandler Interface SpatialAwarenessMeshDisplayOptions Enumeration SpatialAwarenessMeshLevelOfDetail Enumeration"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Shaders/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Shaders/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Shaders | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Shaders This folder contains all the individual shader assets used to build MRTK solutions"
  },
  "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessMeshHandler.html": {
    "href": "Documentation/Architecture/SpatialAwareness/MixedRealitySpatialAwarenessMeshHandler.html",
    "title": "MixedRealitySpatialAwarenessMeshHandler Class | Mixed Reality Toolkit Documentation",
    "keywords": "MixedRealitySpatialAwarenessMeshHandler Class Toolkit Layer Namespace SDK - Surface Awareness Package Microsoft.MixedReality.Toolkit.SDK.SpatialAwarenessSystem The MixedRealitySpatialAwarenessMeshHandler class provides the default implementation of the IMixedRealitySpatialAwarenessMeshHandler interface. void OnMeshAdded( MixedRealitySpatialEventData eventData) Called when a new surface mesh has been identified by the spatial awareness system. void OnMeshUpdated( MixedRealitySpatialEventData eventData) Called when an existing surface mesh has been modified by the spatial awareness system. OnMeshDeleted( MixedRealitySpatialEventData eventData) Called when an existing surface mesh has been discarded by the spatial awareness system. See Also Mixed Reality Spatial Awareness System Architecture IMixedRealitySpatialAwarenessMeshHandler Interface"
  },
  "Documentation/Architecture/SpatialAwareness/IMixedRealitySpatialObserver.html": {
    "href": "Documentation/Architecture/SpatialAwareness/IMixedRealitySpatialObserver.html",
    "title": "IsRunning | Mixed Reality Toolkit Documentation",
    "keywords": "#IMixedRealitySpatialObserver Interface Toolkit Layer Namespace Core Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem The IMixedRealitySpatialObserver is the interface that defines the requirements for platform specific spatial observers which provide data to the spatial awareness system. IsRunning Type bool Gets a value that indicates whether or not the spatial observer is currently active observing the environment. void StartObserving() Instructs the spatial observer to start actively observing the enviornment. void StopObserving() Instructs the spatial observer to stop actively observing the enviornment. See Also Mixed Reality Spatial Awareness System Architecture"
  },
  "External/Documentation/MixedRealityServices.html": {
    "href": "External/Documentation/MixedRealityServices.html",
    "title": "What makes a Mixed Reality Feature | Mixed Reality Toolkit Documentation",
    "keywords": "What makes a Mixed Reality Feature To avoid the performance overheads of the MonoBehaviour class, all Services (Systems, Features, or Modules that require independent operation in a Mixed Reality Solution, e.g. Input, Boundary, SpatialAwareness) are required to be discrete plain old c# classes which implement IMixedRealityService and to register with the MixedRealityToolkit . The MixedRealityToolkit then coordinates all referencing between services and ensures that they receive all appropriate events (E.g. Awake/initialize, Update, Destroy) as well as facilitating the finding of other services when needed. Additionally, the MixedRealityToolkit also maintains the active VR/XR/AR SDK in use in the running project, to initialize the active device based on attached hardware and instigate proper operation. A Service An individual service can be any functionality that needs to be implemented in the project. Traditionally some projects use Singletons which need to be alive in the scene, but this pattern has its advantages and disadvantages. We've decided to break away from this pattern in favor of a hybrid approach that brings several benefits over the traditional Singleton implementations with MonoBehaviours, namely: Performance - without the overhead of a MonoBehaviour, script updates are approximately 80% faster and don't require a GameObject to live in the scene . Reference-ability - Services can be discovered from the MixedRealityToolkit a lot faster and easier than searching GameObjects in a scene or using FindObjectsOfType<T> . No Type dependency - Though a method similar to Dependency Injection, services can be decoupled from their type, this means the concrete implementation can be swapped out at any time without adversely affecting code that consumes it (E.G. Replacing the default InputSystem with your custom one, so long as you've fully implemented each interface). Multi-scene usage - If a service does need to know about a Transform position in a scene, it can simply reference, or create, a GameObject rather than be a component attached to it . This makes it a lot easier to find and use the service when the project spans multiple scenes. Service Interfaces The Service container uses a predefined Interface type for storage and retrieval of any Service, this ensures there are no hard dependencies within the Mixed Reality Toolkit, so that each subsystem can easily be swapped out with another (so long as it conforms to the interface). Current System interfaces provided by the Mixed Reality Toolkit include: IMixedRealityInputSystem IMixedRealityBoundarySystem IMixedRealityTeleportSystem When creating your own implementations of these systems, you must ensure each complies with the interfaces provided by the Mixed Reality Toolkit (e.g. if you replace the InputSystem with another of your own design). All Services must also inherit from the BaseService class or implement IMixedRealityService , to implement the functions required by the MixedRealityToolkit so their life-cycles are handled appropriately. (E.G. Initialize, Update, Destroy are called correctly.)"
  },
  "External/HowTo/README.html": {
    "href": "External/HowTo/README.html",
    "title": "How to ... | Mixed Reality Toolkit Documentation",
    "keywords": "How to ... This readme is intended to document any questions developers might have around how to achieve certain things using the MixedRealityToolkit-vNext. How to migrate from the old MixedRealityToolkit to the vNext? For now, this should be treated like a completely different project and highly experimental while it's being constructed. For the final version, there will be a migration back for basic and advanced users alike."
  },
  "Roadmap.html": {
    "href": "Roadmap.html",
    "title": "Roadmap | Mixed Reality Toolkit Documentation",
    "keywords": "Roadmap This document outlines the roadmap of the Mixed Reality Toolkit. Current Release Microsoft Mixed Reality Toolkit v2.0.0 Beta 2 Upcoming Releases Product Description Timeline Project board MRTK V2 RC 1 Add HoloLens 2 support. API/contract complete. No more breaking changes after this March 2019 MRTK V2 RC 2 UX update and polish to better support HoloLens 2 interactions. May 2019 MRTK V2 Release First release of MRTK V2 that supports HoloLens 1, HoloLens 2, WMR, OpenVR July 2018 Release details, including backlog items, can be found on the GitHub project pages . Mixed Reality Toolkit (MRTK) Roadmap The Mixed Reality Toolkit (also known as \"vNext\") is an all-new product, built to be cross MR/AR/VR/XR platform by design. There are two planned pre-releases after which the Mixed Reality Toolkit will become the primary product. The Mixed Reality Toolkit will require Unity 2018.3. When Unity releases an LTS (Long Term Support) product, the Mixed Reality Toolkit will branch (ex: mrtk_2018_LTS) and require an LTS release. This branch will be targeted at developers who wish to have the most stable MRTK on which to build. It is expected that the branched Mixed Reality Toolkit will receive bug fixes and no new features. The mrtk_development branch will update to the next Unity Tech release (ex: 2019.1) and may drop backward compatibility. New Architecture The MRTK is being rewritten to be cross AR/VR/MR/XR platform and to be more modular. The core layer will contain the interfaces and definitions required to build manager components (ex: input manager) as well as the abstractions needed to support multiple platforms. The SDK layer is where pre-built / reusable components will be delivered. The SDK will be further modularized to make it simple to opt-in to specific functionality (ex: UX controls). Release Plans Alpha - Released The Mixed Reality Toolkit (MRTK) Alpha, released in late July 2018 is being released as a single package (core, sdk and examples) as the team introduces the new architecture. This release does not contain all of the features and functionality of the HoloToolkit releases. The theme(s) for the Alpha release are Minimum Viable Product New architecture VR Boundary support Input and Interactions Locomotion / Teleportation Standard shader Supported platforms Windows Mixed Reality Immersive Headsets Microsoft HoloLens OpenVR Beta - Released The MRTK Beta release will introduce initial support for modularization. It is also when the vast majority of HoloToolkit features will be added. Supported platforms will be unchanged from the Alpha release. It is important to note that the goal is feature parity and not zero app code change. There will be consolidation of duplicated functionality as well as namespace, component and API changes. The theme(s) for the Beta release are HoloToolkit feature parity Not including the HoloLens-iOS Spectator View feature Improved Core and SDK layer alignment Components are expected to move to their \"final\" layer Core and SDK feature packages SDK features (ex: UX controls) will be in separate packages Bug fixes Supported platforms Windows Mixed Reality Immersive Headsets Microsoft HoloLens OpenVR Beta 2 - Released The September 2018 (2018.9.0.0) release marks the first official release of MRTK vNext and will support the same platforms as the Beta. With this release, the Mixed Reality Toolkit will replace the HoloToolkit, which will be transitioned into sustained engineering mode. The theme(s) for the 2018.9.0.0 release are Documentation Quality and Performance Supported platforms Windows Mixed Reality Immersive Headsets Microsoft HoloLens OpenVR RC1 - Planned RC1 release is planned to be the first update to include HoloLens 2 capabilities The theme(s) for the release are HoloLens 2 support API contract complete Supported platforms Windows Mixed Reality Immersive Headsets Microsoft HoloLens HoloLens 2 OpenVR RC2 - Planned RC1 release is planned to add and polish features to support HoloLens 2 interactions with hands and eyes. The theme(s) for the release are UX Polish Performance Supported platforms Windows Mixed Reality Immersive Headsets Microsoft HoloLens HoloLens 2 OpenVR MRTK V2 Release - Planned First official release of MRTK V2 that includes HoloLens 2 support and addresses critical feedbacks from microsoft partners and community partners! The theme(s) for the release are Address feedback issues. Supported platforms Windows Mixed Reality Immersive Headsets Microsoft HoloLens HoloLens 2 OpenVR"
  },
  "Assets/MixedRealityToolkit/Utilities/BuildAndDeploy/README.html": {
    "href": "Assets/MixedRealityToolkit/Utilities/BuildAndDeploy/README.html",
    "title": "Mixed Reality Toolkit - Internal - Build And Deploy | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - Internal - Build And Deploy This folder contains all the MRTK Internal functionality to support Unity Project building and packaging"
  },
  "Assets/MixedRealityToolkit.Examples/Demos/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/Demos/README.html",
    "title": "Mixed Reality Toolkit Examples - Demos | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Examples - Demos This folder contains demonstrations of the currently implemented features supplied with the Mixed Reality Toolkit. These include: Audio The MRTK provides 3D spatial audio capabilities and utilities to aid you in the production of 3D audio in a Mixed Reality environment. This folder contains two demonstration implementations for: Audio LoFi Effects Audio Occlusion Boundary The MRTK provides several capabilities to both represent and manage the boundary provided by the various implemented systems. This folder provides a simple demonstration to visualize the boundary reported by the active system, if provided. Solvers Solvers provide many advanced ways to link or place objects within a scene and to attach them to other objects or even the player. Solvers also allow objects to be aware of their surroundings and moved with / against them in various ways. This folder contains a simple demonstration scene showing several of the solver options and how they can be applied in a scene. Standard Shader The MRTK standard shader is specifically customized for use in Mixed Reality environments and enabling several advanced effects \"out of the box\". This folder includes three demonstrations to show off the capabilities of the MRTK Standard Shader and how to configure it for each effect, namely: Material Gallery A full gallery of all the effects supported by the MRTK Standard Shader. Standard Material Comparison A side by side comparison of the Unity Standard Shader and the MRTK Standard Shader. Standard materials A gallery of the standards material assets provided with the MRTK and how they look using the MRTK Standard Shader. UX The Mixed Reality Toolkit provides several aids to build the UX in your Mixed Reality Solution, these currently include: Object Collections Several mechanisms to orientate and place object in a scene relative to each other. E.G. Side by side arrays, spherical arrays and much more. Lines Several default line drawing options for use in your project. Also utilized by the MRTK itself for controller pointer and teleportation use. Keep checking back often as more UX controls are added."
  },
  "Assets/MixedRealityToolkit.SDK/Features/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/README.html",
    "title": "Mixed Reality Toolkit SDK - Features | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit SDK - Features This folder contains the core mixed Reality Feature concrete implementations. These are completely optional to use and can be replaced with your own system should you wish to. More details needed on creating your own system, or replacing one."
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/README.html",
    "title": "Mixed Reality Toolkit - SDK - UX | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - UX This folder contains all the individual assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Interactable/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Interactable/README.html",
    "title": "Interactables | Mixed Reality Toolkit Documentation",
    "keywords": "Interactables The Interactable is a base component for building interactive content, like buttons and UI controls, with feedback based on interactive states. Interactables can have voice commands added to them and offers a deep theming system for all types of snesory feedback. Button - a standard UI button with basic feedback Toggle Button - an advanced button with multiple dimensions Animated Button - a button that uses an Animator theme for feedback Simple Button - a bare bones button with a mesh and label using the Default theme Holographic Button - an example of shell like buttons with a speech prompt Toggle Switch - a toggle switch UI control example Checkbox - an example of a checkbox toggle control Radial and Radial Set - an example of a button collection or tab system where only one button can be toggled at a time"
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Prefabs/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Prefabs/README.html",
    "title": "Mixed Reality Toolkit - SDK - UX - Prefabs | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - UX - Prefabs This folder contains all the individual prefab assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Audio/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Audio/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Audio | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Audio This folder contains all the individual audio assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Fonts/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Fonts/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Fonts | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Fonts This folder contains all the individual font assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Materials/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Materials/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Materials | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Materials This folder contains all the individual material assets used to build MRTK solutions"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorUIUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorUIUtility.html",
    "title": "Class InspectorUIUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorUIUtility This class has handy inspector UI utilities and functions. Inheritance Object InspectorUIUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities Assembly : cs.temp.dll.dll Syntax public static class InspectorUIUtility Fields Astrisk Declaration public static readonly string Astrisk Field Value Type Description String Close Declaration public static readonly string Close Field Value Type Description String ColorTint100 Declaration public static readonly Color ColorTint100 Field Value Type Description Color ColorTint25 Declaration public static readonly Color ColorTint25 Field Value Type Description Color ColorTint50 Declaration public static readonly Color ColorTint50 Field Value Type Description Color ColorTint75 Declaration public static readonly Color ColorTint75 Field Value Type Description Color DefaultFontSize Declaration public const int DefaultFontSize = 10 Field Value Type Description Int32 Down Declaration public static readonly string Down Field Value Type Description String Emoji Declaration public static readonly string Emoji Field Value Type Description String Heart Declaration public static readonly string Heart Field Value Type Description String Left Declaration public static readonly string Left Field Value Type Description String Minus Declaration public static readonly string Minus Field Value Type Description String Plus Declaration public static readonly string Plus Field Value Type Description String Right Declaration public static readonly string Right Field Value Type Description String Star Declaration public static readonly string Star Field Value Type Description String TitleFontSize Declaration public const int TitleFontSize = 14 Field Value Type Description Int32 Up Declaration public static readonly string Up Field Value Type Description String Methods AdjustListSettings(List<InspectorUIUtility.ListSettings>, Int32) adjust list settings as things change Declaration public static List<InspectorUIUtility.ListSettings> AdjustListSettings(List<InspectorUIUtility.ListSettings> listSettings, int count) Parameters Type Name Description List < InspectorUIUtility.ListSettings > listSettings Int32 count Returns Type Description List < InspectorUIUtility.ListSettings > Box(Int32) Box style with left margin Declaration public static GUIStyle Box(int margin) Parameters Type Name Description Int32 margin Returns Type Description GUIStyle DrawDivider() Create a line across the negative space Declaration public static void DrawDivider() DrawError(String) draw a notice with red coloring Declaration public static void DrawError(string error) Parameters Type Name Description String error DrawLabel(String, Int32, Color) Draw a basic label Declaration public static void DrawLabel(string title, int size, Color color) Parameters Type Name Description String title Int32 size Color color DrawNotice(String) draw a notice area, normal coloring Declaration public static void DrawNotice(string notice) Parameters Type Name Description String notice DrawSectionEnd(Int32) Draws section end (initiated by next Header attribute) Declaration public static void DrawSectionEnd(int indent) Parameters Type Name Description Int32 indent DrawSectionStart(String, Int32, Boolean, FontStyle, Boolean, Int32) Draws a section start (initiated by the Header attribute) Declaration public static bool DrawSectionStart(string headerName, int indent, bool open = true, FontStyle style = null, bool toUpper = true, int size = 0) Parameters Type Name Description String headerName Int32 indent Boolean open FontStyle style Boolean toUpper Int32 size Returns Type Description Boolean DrawSuccess(String) draw a notice with green coloring Declaration public static void DrawSuccess(string notice) Parameters Type Name Description String notice DrawTitle(String) Large title format Declaration public static void DrawTitle(string title) Parameters Type Name Description String title DrawWarning(String) draw a label with a yellow coloring Declaration public static void DrawWarning(string warning) Parameters Type Name Description String warning FlexButton(GUIContent, Int32, InspectorUIUtility.ListButtonEvent, SerializedProperty) A button that is as wide as the label Declaration public static bool FlexButton(GUIContent label, int index, InspectorUIUtility.ListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Int32 index InspectorUIUtility.ListButtonEvent callback SerializedProperty prop Returns Type Description Boolean FlexButton(GUIContent, Int32[], InspectorUIUtility.MultiListButtonEvent, SerializedProperty) A button that is as wide as the label Declaration public static bool FlexButton(GUIContent label, int[] indexArr, InspectorUIUtility.MultiListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Int32 [] indexArr InspectorUIUtility.MultiListButtonEvent callback SerializedProperty prop Returns Type Description Boolean FullWidthButton(GUIContent, Single, Int32, InspectorUIUtility.ListButtonEvent, SerializedProperty) A button that is as wide as the available space Declaration public static bool FullWidthButton(GUIContent label, float padding, int index, InspectorUIUtility.ListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Single padding Int32 index InspectorUIUtility.ListButtonEvent callback SerializedProperty prop Returns Type Description Boolean FullWidthButton(GUIContent, Single, Int32[], InspectorUIUtility.MultiListButtonEvent, SerializedProperty) A button that is as wide as the available space Declaration public static bool FullWidthButton(GUIContent label, float padding, int[] indexArr, InspectorUIUtility.MultiListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Single padding Int32 [] indexArr InspectorUIUtility.MultiListButtonEvent callback SerializedProperty prop Returns Type Description Boolean GetOptions(SerializedProperty) Get an array of strings from a serialized list of strings, pop-up field helper Declaration public static string[] GetOptions(SerializedProperty options) Parameters Type Name Description SerializedProperty options Returns Type Description String [] GetOptionsIndex(SerializedProperty, String) Get the index of a serialized array item based on it's name, pop-up field helper Declaration public static int GetOptionsIndex(SerializedProperty options, string selection) Parameters Type Name Description SerializedProperty options String selection Returns Type Description Int32 LableStyle(Int32, Color) Create a custom label style based on color and size Declaration public static GUIStyle LableStyle(int size, Color color) Parameters Type Name Description Int32 size Color color Returns Type Description GUIStyle ReverseLookup(String, String[]) Get the index of an array item based on it's name, pop-up field helper Declaration public static int ReverseLookup(string option, string[] options) Parameters Type Name Description String option String [] options Returns Type Description Int32 SmallButton(GUIContent, Int32, InspectorUIUtility.ListButtonEvent, SerializedProperty) A small button, good for a single icon like + or - Declaration public static bool SmallButton(GUIContent label, int index, InspectorUIUtility.ListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Int32 index InspectorUIUtility.ListButtonEvent callback SerializedProperty prop Returns Type Description Boolean SmallButton(GUIContent, Int32[], InspectorUIUtility.MultiListButtonEvent, SerializedProperty) A small button, good for a single icon like + or - Declaration public static bool SmallButton(GUIContent label, int[] indexArr, InspectorUIUtility.MultiListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Int32 [] indexArr InspectorUIUtility.MultiListButtonEvent callback SerializedProperty prop Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.InterpolationMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.InterpolationMode.html",
    "title": "Enum InterpolationMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InterpolationMode Default options for how to distribute interpolated points in a line renderer Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Lines Assembly : cs.temp.dll.dll Syntax public enum InterpolationMode Fields Name Description FromCurve Create steps based on total length of line + animation curve FromLength Create steps based on total length of line + manually specified length FromSteps Specify the number of interpolation steps manually"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.VolumeType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.VolumeType.html",
    "title": "Enum VolumeType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum VolumeType todo Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum VolumeType Fields Name Description AxisAlignedCube Cubic volume aligned with the coordinate axes. None No Specified type. Sphere Spherical volume. UserAlignedCube Cubic volume aligned with the user."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.IMixedRealityEventSource.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.IMixedRealityEventSource.html",
    "title": "Interface IMixedRealityEventSource | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEventSource Interface to implement an event source. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Events Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEventSource : IEqualityComparer Properties SourceId The Unique Source Id of this Event Source. Declaration uint SourceId { get; } Property Value Type Description UInt32 SourceName The Name of this Event Source. Declaration string SourceName { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityCursor.html",
    "title": "Interface IMixedRealityCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityCursor Cursor Interface for handling input events and setting visibility. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityCursor : IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler Properties DefaultCursorDistance The maximum distance the cursor can be with nothing hit Declaration float DefaultCursorDistance { get; set; } Property Value Type Description Single GameObjectReference Returns the IMixedRealityCursor 's reference. Declaration GameObject GameObjectReference { get; } Property Value Type Description GameObject The this IMixedRealityCursor component is attached to. IsVisible Is the cursor currently visible? Declaration bool IsVisible { get; } Property Value Type Description Boolean LocalScale Local scale of the IMixedRealityCursor . Declaration Vector3 LocalScale { get; } Property Value Type Description Vector3 Pointer The IMixedRealityPointer this IMixedRealityCursor is associated with. Declaration IMixedRealityPointer Pointer { get; set; } Property Value Type Description IMixedRealityPointer Position Position of the IMixedRealityCursor . Declaration Vector3 Position { get; } Property Value Type Description Vector3 Rotation Rotation of the IMixedRealityCursor . Declaration Quaternion Rotation { get; } Property Value Type Description Quaternion SetVisibilityOnSourceDetected Sets the visibility of the IMixedRealityCursor when the source is detected. Declaration bool SetVisibilityOnSourceDetected { get; set; } Property Value Type Description Boolean Methods SetVisibility(Boolean) Sets the visibility of the IMixedRealityCursor . Declaration void SetVisibility(bool visible) Parameters Type Name Description Boolean visible True if cursor should be visible, false if not."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorUIUtility.ListSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorUIUtility.ListSettings.html",
    "title": "Struct InspectorUIUtility.ListSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InspectorUIUtility.ListSettings A data container for managing scrolling lists or nested drawers in custom inspectors. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities Assembly : cs.temp.dll.dll Syntax public struct ListSettings Fields Scroll Declaration public Vector2 Scroll Field Value Type Description Vector2 Show Declaration public bool Show Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorUIUtility.MultiListButtonEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorUIUtility.MultiListButtonEvent.html",
    "title": "Delegate InspectorUIUtility.MultiListButtonEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate InspectorUIUtility.MultiListButtonEvent Delegate for button callbacks, multi-index for nested arrays Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities Assembly : cs.temp.dll.dll Syntax public delegate void MultiListButtonEvent(int[] indexArray, SerializedProperty prop = null); Parameters Type Name Description Int32 [] indexArray SerializedProperty prop A serialize property containing information needed if the button was clicked"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Events.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Events | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Events Interfaces IMixedRealityEventSource Interface to implement an event source. IMixedRealityEventSystem Interface used to implement an Event System that is compatible with the Mixed Reality Toolkit."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.IMixedRealityDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.IMixedRealityDataProvider.html",
    "title": "Interface IMixedRealityDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDataProvider Generic interface for all Mixed Reality Data providers Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDataProvider : IMixedRealityExtensionService, IMixedRealityService, IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.FastSimplexNoise.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.FastSimplexNoise.html",
    "title": "Class FastSimplexNoise | Mixed Reality Toolkit Documentation",
    "keywords": "Class FastSimplexNoise A conglomeration of open-source simplex libraries in C# with an emphasis on performance Inheritance Object FastSimplexNoise Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class FastSimplexNoise Constructors FastSimplexNoise() Declaration public FastSimplexNoise() FastSimplexNoise(Int64) Declaration public FastSimplexNoise(long seed) Parameters Type Name Description Int64 seed Methods Evaluate(Double, Double) Declaration public double Evaluate(double x, double y) Parameters Type Name Description Double x Double y Returns Type Description Double Evaluate(Double, Double, Double) Declaration public double Evaluate(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Returns Type Description Double Evaluate(Double, Double, Double, Double) Declaration public double Evaluate(double x, double y, double z, double w) Parameters Type Name Description Double x Double y Double z Double w Returns Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.HoverLight.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.HoverLight.html",
    "title": "Class HoverLight | Mixed Reality Toolkit Documentation",
    "keywords": "Class HoverLight Utility component to animate and visualize a light that can be used with the \"MixedRealityToolkit/Standard\" shader \"_HoverLight\" feature. Inheritance Object HoverLight Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class HoverLight : MonoBehaviour Properties Color Specifies the highlight color Declaration public Color Color { get; } Property Value Type Description Color Radius Specifies the Radius of the HoverLight effect Declaration public float Radius { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest.Response.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest.Response.html",
    "title": "Struct Response | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Response Response to a REST Call. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest Assembly : cs.temp.dll.dll Syntax public struct Response Constructors Response(Boolean, String, Byte[], Int64) Constructor. Declaration public Response(bool successful, string responseBody, byte[] responseData, long responseCode) Parameters Type Name Description Boolean successful String responseBody Byte [] responseData Int64 responseCode Properties ResponseBody Response body from the resource. Declaration public string ResponseBody { get; } Property Value Type Description String ResponseCode Response code from the resource. Declaration public long ResponseCode { get; } Property Value Type Description Int64 ResponseData Response data from the resource. Declaration public byte[] ResponseData { get; } Property Value Type Description Byte [] Successful Was the REST call successful? Declaration public bool Successful { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest.Rest.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest.Rest.html",
    "title": "Class Rest | Mixed Reality Toolkit Documentation",
    "keywords": "Class Rest REST Class for CRUD Transactions. Inheritance Object Rest Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest Assembly : cs.temp.dll.dll Syntax public static class Rest Properties UseSSL Use SSL Connections when making rest calls. Declaration public static bool UseSSL { get; set; } Property Value Type Description Boolean Methods DeleteAsync(String, Dictionary<String, String>, Int32) Rest DELETE. Declaration public static Task<Response> DeleteAsync(string query, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. GetAsync(String, Dictionary<String, String>, Int32) Rest GET. Declaration public static Task<Response> GetAsync(string query, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. GetBasicAuthentication(String, String) Gets the Basic auth header. Declaration public static string GetBasicAuthentication(string username, string password) Parameters Type Name Description String username The Username. String password The password. Returns Type Description String The Basic authorization header encoded to base 64. GetBearerOAuthToken(String) Gets the Bearer auth header. Declaration public static string GetBearerOAuthToken(string authToken) Parameters Type Name Description String authToken OAuth Token to be used. Returns Type Description String The Bearer authorization header. PostAsync(String, Dictionary<String, String>, Int32) Rest POST. Declaration public static Task<Response> PostAsync(string query, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PostAsync(String, Byte[], Dictionary<String, String>, Int32) Rest POST. Declaration public static Task<Response> PostAsync(string query, byte[] bodyData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Byte [] bodyData The raw data to post. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PostAsync(String, String, Dictionary<String, String>, Int32) Rest POST. Declaration public static Task<Response> PostAsync(string query, string jsonData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. String jsonData JSON data for the request. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PostAsync(String, WWWForm, Dictionary<String, String>, Int32) Rest POST. Declaration public static Task<Response> PostAsync(string query, WWWForm formData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. WWWForm formData Form Data. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PutAsync(String, Byte[], Dictionary<String, String>, Int32) Rest PUT. Declaration public static Task<Response> PutAsync(string query, byte[] bodyData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Byte [] bodyData Data to be submitted. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PutAsync(String, String, Dictionary<String, String>, Int32) Rest PUT. Declaration public static Task<Response> PutAsync(string query, string jsonData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. String jsonData Data to be submitted. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.EnumFlagsAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.EnumFlagsAttribute.html",
    "title": "Class EnumFlagsAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class EnumFlagsAttribute From https://answers.unity.com/questions/486694/default-editor-enum-as-flags-.html Inheritance Object EnumFlagsAttribute Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class EnumFlagsAttribute : PropertyAttribute Constructors EnumFlagsAttribute() Declaration public EnumFlagsAttribute()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerConfigurationFlags.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerConfigurationFlags.html",
    "title": "Enum MixedRealityControllerConfigurationFlags | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityControllerConfigurationFlags Flags used by MixedRealityControllerAttribute. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax [Flags] public enum MixedRealityControllerConfigurationFlags : byte Fields Name Description UseCustomInteractionMappings Controllers with custom interaction mappings can have their mappings be added / removed to the controller mapping profile in the property inspector."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionEventPair.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionEventPair.html",
    "title": "Struct InputActionEventPair | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionEventPair Data class that maps MixedRealityInputAction s to UnityEvent s wired up in the inspector. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InputActionEventPair Constructors InputActionEventPair(MixedRealityInputAction, UnityEvent) Constructor. Declaration public InputActionEventPair(MixedRealityInputAction inputAction, UnityEvent unityEvent) Parameters Type Name Description MixedRealityInputAction inputAction UnityEvent unityEvent Properties InputAction The MixedRealityInputAction to listen for to invoke the UnityEvent . Declaration public MixedRealityInputAction InputAction { get; } Property Value Type Description MixedRealityInputAction UnityEvent The UnityEvent to invoke when MixedRealityInputAction is raised. Declaration public UnityEvent UnityEvent { get; } Property Value Type Description UnityEvent"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem.IMixedRealityTeleportSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem.IMixedRealityTeleportSystem.html",
    "title": "Interface IMixedRealityTeleportSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTeleportSystem Manager interface for a Teleport system in the Mixed Reality Toolkit All replacement systems for providing Teleportation functionality should derive from this interface Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTeleportSystem : IMixedRealityEventSystem Properties TeleportDuration The duration of the teleport in seconds. Declaration float TeleportDuration { get; set; } Property Value Type Description Single Methods RaiseTeleportCanceled(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation canceled event. Declaration void RaiseTeleportCanceled(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target RaiseTeleportRequest(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation request event. Declaration void RaiseTeleportRequest(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target RaiseTeleportStarted(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation started event. Declaration void RaiseTeleportStarted(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingBox.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingBox.html",
    "title": "Class ClippingBox | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingBox Component to animate and visualize a box that can be used with per pixel based clipping. Inheritance Object ClippingPrimitive ClippingBox Inherited Members ClippingPrimitive.renderers ClippingPrimitive.clippingSide ClippingPrimitive.ClippingSide ClippingPrimitive.materialPropertyBlock ClippingPrimitive.modifiedMaterials ClippingPrimitive.allocatedMaterials ClippingPrimitive.AddRenderer(Renderer) ClippingPrimitive.RemoveRenderer(Renderer) ClippingPrimitive.OnValidate() ClippingPrimitive.OnEnable() ClippingPrimitive.OnDisable() ClippingPrimitive.LateUpdate() ClippingPrimitive.OnDestroy() ClippingPrimitive.UpdateRenderers() ClippingPrimitive.ToggleClippingFeature(Boolean) ClippingPrimitive.ToggleClippingFeature(Material, Boolean) ClippingPrimitive.GetMaterial(Renderer, Boolean) ClippingPrimitive.RestoreUnassignedMaterials() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class ClippingBox : ClippingPrimitive Properties ClippingSideProperty Declaration protected override string ClippingSideProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.ClippingSideProperty Keyword Declaration protected override string Keyword { get; } Property Value Type Description String Overrides ClippingPrimitive.Keyword KeywordProperty Declaration protected override string KeywordProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.KeywordProperty Methods Initialize() Declaration protected override void Initialize() Overrides ClippingPrimitive.Initialize() UpdateShaderProperties(MaterialPropertyBlock) Declaration protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock) Parameters Type Name Description MaterialPropertyBlock materialPropertyBlock Overrides ClippingPrimitive.UpdateShaderProperties(MaterialPropertyBlock)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.MeshLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.MeshLineRenderer.html",
    "title": "Class MeshLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class MeshLineRenderer Creates instances of a mesh along the line Inheritance Object BaseMixedRealityLineRenderer MeshLineRenderer Inherited Members BaseMixedRealityLineRenderer.lineDataSource BaseMixedRealityLineRenderer.LineDataSource BaseMixedRealityLineRenderer.LineColor BaseMixedRealityLineRenderer.LineWidth BaseMixedRealityLineRenderer.WidthMultiplier BaseMixedRealityLineRenderer.ColorOffset BaseMixedRealityLineRenderer.WidthOffset BaseMixedRealityLineRenderer.StepMode BaseMixedRealityLineRenderer.LineStepCount BaseMixedRealityLineRenderer.GetColor(Single) BaseMixedRealityLineRenderer.GetWidth(Single) Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers Assembly : cs.temp.dll.dll Syntax public class MeshLineRenderer : BaseMixedRealityLineRenderer Properties ColorProperty Declaration public string ColorProperty { get; set; } Property Value Type Description String LineMaterial Declaration public Material LineMaterial { get; set; } Property Value Type Description Material LineMesh Declaration public Mesh LineMesh { get; set; } Property Value Type Description Mesh Methods OnEnable() Declaration protected virtual void OnEnable()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.SupportedControllerType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.SupportedControllerType.html",
    "title": "Enum SupportedControllerType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SupportedControllerType The SDKType lists the XR SDKs that are supported by the Mixed Reality Toolkit. Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public enum SupportedControllerType Fields Name Description GenericOpenVR GenericUnity Mouse None OculusRemote OculusTouch TouchScreen ViveKnuckles ViveWand WindowsMixedReality Xbox"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleSingleAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleSingleAxis.html",
    "title": "Struct InputActionRuleSingleAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleSingleAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Single > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InputActionRuleSingleAxis : IInputActionRule<float> Constructors InputActionRuleSingleAxis(MixedRealityInputAction, MixedRealityInputAction, Single) Constructor. Declaration public InputActionRuleSingleAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, float criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Single criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public float Criteria { get; } Property Value Type Description Single RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BaseMixedRealityProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BaseMixedRealityProfile.html",
    "title": "Class BaseMixedRealityProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityProfile Inheritance Object BaseMixedRealityProfile MixedRealityBoundaryVisualizationProfile MixedRealityControllerMappingProfile MixedRealityControllerVisualizationProfile MixedRealityDiagnosticsProfile MixedRealityGesturesProfile MixedRealityInputActionRulesProfile MixedRealityInputActionsProfile MixedRealityInputSystemProfile MixedRealityPointerProfile MixedRealitySpeechCommandsProfile MixedRealityCameraProfile MixedRealityRegisteredServiceProvidersProfile MixedRealityToolkitConfigurationProfile MixedRealitySpatialAwarenessMeshObserverProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityProfile : ScriptableObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.GestureInputType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.GestureInputType.html",
    "title": "Enum GestureInputType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GestureInputType The GestureInputType defines the types of gestures exposed by a controller. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public enum GestureInputType Fields Name Description Hold Manipulation Navigation None"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.ExperienceScale.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.ExperienceScale.html",
    "title": "Enum ExperienceScale | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ExperienceScale The ExperienceScale identifies the environment for which the experience is designed. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public enum ExperienceScale Fields Name Description OrientationOnly An experience which utilizes only the headset orientation and is gravity aligned. The coordinate system origin is at head level. Room An experience designed to support movement throughout a room. The coordinate system origin is at floor level. Seated An experience designed for seated use. The coordinate system origin is at head level. Standing An experience designed for stationary standing use. The coordinate system origin is at floor level. World An experience designed to utilize and move through the physical world. The coordinate system origin is at head level."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.TypeGrouping.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.TypeGrouping.html",
    "title": "Enum TypeGrouping | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TypeGrouping Indicates how selectable classes should be collated in drop-down menu. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum TypeGrouping Fields Name Description ByAddComponentMenu Group classes in the same way as Unity does for its component menu. This grouping method must only be used for types. ByNamespace Group classes by namespace and show foldout menus for nested namespaces; for instance, \"Some > Nested > Namespace > SpecialClass\". ByNamespaceFlat Group classes by namespace; for instance, \"Some.Nested.Namespace > SpecialClass\". None No grouping, just show type names in a list; for instance, \"Some.Nested.Namespace.SpecialClass\"."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.InputEventData-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.InputEventData-1.html",
    "title": "Class InputEventData<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputEventData<T> Describes and input event with a specific type. Inheritance Object BaseInputEventData InputEventData InputEventData<T> Inherited Members InputEventData.Handedness InputEventData.Initialize(IMixedRealityInputSource, MixedRealityInputAction) InputEventData.Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction) BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class InputEventData<T> : InputEventData Type Parameters Name Description T Constructors InputEventData(EventSystem) Constructor. Declaration public InputEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties InputData The input data of the event. Declaration public T InputData { get; } Property Value Type Description T Methods Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction, T) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityInputSource inputSource, Handedness handedness, MixedRealityInputAction inputAction, T data) Parameters Type Name Description IMixedRealityInputSource inputSource Handedness handedness MixedRealityInputAction inputAction T data Initialize(IMixedRealityInputSource, MixedRealityInputAction, T) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityInputSource inputSource, MixedRealityInputAction inputAction, T data) Parameters Type Name Description IMixedRealityInputSource inputSource MixedRealityInputAction inputAction T data"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.InputEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.InputEventData.html",
    "title": "Class InputEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputEventData Describes an Input Event that has a source id. Inheritance Object BaseInputEventData InputEventData InputEventData<T> MixedRealityPointerEventData Inherited Members BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class InputEventData : BaseInputEventData Constructors InputEventData(EventSystem) Constructor. Declaration public InputEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties Handedness Handedness of the . Declaration public Handedness Handedness { get; } Property Value Type Description Handedness Methods Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityInputSource inputSource, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource inputSource Handedness handedness MixedRealityInputAction inputAction Initialize(IMixedRealityInputSource, MixedRealityInputAction) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityInputSource inputSource, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource inputSource MixedRealityInputAction inputAction"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityControllerMappingProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityControllerMappingProfileInspector.html",
    "title": "Class MixedRealityControllerMappingProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerMappingProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityControllerMappingProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerMappingProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem.IMixedRealityBoundaryHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem.IMixedRealityBoundaryHandler.html",
    "title": "Interface IMixedRealityBoundaryHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityBoundaryHandler Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityBoundaryHandler : IEventSystemHandler Methods OnBoundaryVisualizationChanged(BoundaryEventData) Raised when the boundary visualization has changed. Declaration void OnBoundaryVisualizationChanged(BoundaryEventData eventData) Parameters Type Name Description BoundaryEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem.IMixedRealityBoundarySystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem.IMixedRealityBoundarySystem.html",
    "title": "Interface IMixedRealityBoundarySystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityBoundarySystem Manager interface for a Boundary system in the Mixed Reality Toolkit All replacement systems for providing Boundary functionality should derive from this interface Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.BoundarySystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityBoundarySystem : IMixedRealityEventSystem, IMixedRealityEventSource Properties BoundaryHeight The height of the play space, in meters. Declaration float BoundaryHeight { get; set; } Property Value Type Description Single Remarks This is used to create a three dimensional boundary volume. BoundaryWallsPhysicsLayer The physics layer that the generated boundary walls are assigned to. Declaration int BoundaryWallsPhysicsLayer { get; set; } Property Value Type Description Int32 Bounds Two dimensional representation of the geometry of the boundary, as provided by the platform. Declaration Edge[] Bounds { get; } Property Value Type Description Edge [] Remarks BoundaryGeometry should be treated as the outline of the player's space, placed on the floor. CeilingPhysicsLayer The physics layer that the generated boundary ceiling is assigned to. Declaration int CeilingPhysicsLayer { get; set; } Property Value Type Description Int32 FloorHeight Indicates the height of the floor, in relation to the coordinate system origin. Declaration float? FloorHeight { get; } Property Value Type Description Nullable < Single > Remarks If a floor has been located, FloorHeight.HasValue will be true, otherwise it will be false. FloorPhysicsLayer The physics layer that the generated floor is assigned to. Declaration int FloorPhysicsLayer { get; set; } Property Value Type Description Int32 PlayAreaPhysicsLayer The physics layer that the generated play area is assigned to. Declaration int PlayAreaPhysicsLayer { get; set; } Property Value Type Description Int32 Scale The scale (ex: World Scale) of the experience. Declaration ExperienceScale Scale { get; set; } Property Value Type Description ExperienceScale ShowBoundaryCeiling Enable / disable ceiling rendering. Declaration bool ShowBoundaryCeiling { get; set; } Property Value Type Description Boolean Remarks The ceiling is defined as a positioned BoundaryHeight above the floor. ShowBoundaryWalls Enable / disable boundary wall rendering. Declaration bool ShowBoundaryWalls { get; set; } Property Value Type Description Boolean ShowFloor Enable / disable floor rendering. Declaration bool ShowFloor { get; set; } Property Value Type Description Boolean ShowPlayArea Enable / disable play area rendering. Declaration bool ShowPlayArea { get; set; } Property Value Type Description Boolean ShowTrackedArea Enable / disable tracked area rendering. Declaration bool ShowTrackedArea { get; set; } Property Value Type Description Boolean TrackedAreaPhysicsLayer The physics layer that the generated tracked area is assigned to. Declaration int TrackedAreaPhysicsLayer { get; set; } Property Value Type Description Int32 Methods Contains(Vector3, Boundary.Type) Determines if a location is within the specified area of the boundary space. Declaration bool Contains(Vector3 location, Boundary.Type boundaryType = null) Parameters Type Name Description Vector3 location The location to be checked. Boundary.Type boundaryType The type of boundary space being checked. Returns Type Description Boolean True if the location is within the specified area of the boundary space. Remarks Use: Boundary.Type.PlayArea for the inscribed volume Boundary.Type.TrackedArea for the area defined by the boundary edges. GetBoundaryCeilingVisualization() Gets the that represents the upper surface of the user's boundary. Declaration GameObject GetBoundaryCeilingVisualization() Returns Type Description GameObject The boundary ceiling visualization object or null if one does not exist. GetBoundaryWallVisualization() Gets the that represents the user's boundary walls. Declaration GameObject GetBoundaryWallVisualization() Returns Type Description GameObject The boundary wall visualization object or null if one does not exist. GetFloorVisualization() Gets the that represents the user's floor. Declaration GameObject GetFloorVisualization() Returns Type Description GameObject The floor visualization object or null if one does not exist. GetPlayAreaVisualization() Gets the that represents the user's play area. Declaration GameObject GetPlayAreaVisualization() Returns Type Description GameObject The play area visualization object or null if one does not exist. GetTrackedAreaVisualization() Gets the that represents the user's tracked area. Declaration GameObject GetTrackedAreaVisualization() Returns Type Description GameObject The tracked area visualization object or null if one does not exist. TryGetRectangularBoundsParams(out Vector2, out Single, out Single, out Single) Returns the description of the inscribed rectangular bounds. Declaration bool TryGetRectangularBoundsParams(out Vector2 center, out float angle, out float width, out float height) Parameters Type Name Description Vector2 center The center of the rectangle. Single angle The orientation of the rectangle. Single width The width of the rectangle. Single height The height of the rectangle. Returns Type Description Boolean True if an inscribed rectangle was found in the boundary geometry, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityPointerHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityPointerHandler.html",
    "title": "Interface IMixedRealityPointerHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityPointerHandler Interface to implement to react to simple pointer input. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityPointerHandler : IEventSystemHandler Methods OnPointerClicked(MixedRealityPointerEventData) When a pointer clicked event is raised, this method is used to pass along the event data to the input handler. Declaration void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) When a pointer down event is raised, this method is used to pass along the event data to the input handler. Declaration void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) When a pointer up event is raised, this method is used to pass along the event data to the input handler. Declaration void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem.IMixedRealityTeleportHotSpot.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem.IMixedRealityTeleportHotSpot.html",
    "title": "Interface IMixedRealityTeleportHotSpot | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTeleportHotSpot Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTeleportHotSpot Properties GameObjectReference Returns the reference for this teleport target. Declaration GameObject GameObjectReference { get; } Property Value Type Description GameObject IsActive Is the teleport target active? Declaration bool IsActive { get; } Property Value Type Description Boolean Normal The normal of the teleport raycast. Declaration Vector3 Normal { get; } Property Value Type Description Vector3 OverrideTargetOrientation Should the target orientation be overridden? Declaration bool OverrideTargetOrientation { get; } Property Value Type Description Boolean Position The position the teleport will end at. Declaration Vector3 Position { get; } Property Value Type Description Vector3 TargetOrientation Should the destination orientation be overridden? Useful when you want to orient the user in a specific direction when they teleport to this position. Override orientation is the transform forward of the GameObject this component is attached to. Declaration float TargetOrientation { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseEventSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseEventSystem.html",
    "title": "Class BaseEventSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseEventSystem Base Event System that can be inherited from to give other system features event capabilities. Inheritance Object BaseService BaseEventSystem Implements IMixedRealityService IDisposable IMixedRealityEventSystem Inherited Members BaseService.Name BaseService.Priority BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Services Assembly : cs.temp.dll.dll Syntax public abstract class BaseEventSystem : BaseService, IMixedRealityService, IDisposable, IMixedRealityEventSystem Properties EventListeners Declaration public List<GameObject> EventListeners { get; } Property Value Type Description List < GameObject > Methods HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) Declaration public virtual void HandleEvent<T>(BaseEventData eventData, ExecuteEvents.EventFunction<T> eventHandler) where T : IEventSystemHandler Parameters Type Name Description BaseEventData eventData ExecuteEvents.EventFunction <T> eventHandler Type Parameters Name Description T Register(GameObject) Declaration public virtual void Register(GameObject listener) Parameters Type Name Description GameObject listener Unregister(GameObject) Declaration public virtual void Unregister(GameObject listener) Parameters Type Name Description GameObject listener Implements IMixedRealityService System.IDisposable IMixedRealityEventSystem"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseExtensionService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseExtensionService.html",
    "title": "Class BaseExtensionService | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseExtensionService The base extension service implements IMixedRealityExtensionService and provides default properties for all extension services. Inheritance Object BaseService BaseServiceWithConstructor BaseExtensionService BaseDataProvider Implements IMixedRealityExtensionService IMixedRealityService IDisposable Inherited Members BaseServiceWithConstructor.Name BaseServiceWithConstructor.Priority BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Services Assembly : cs.temp.dll.dll Syntax public abstract class BaseExtensionService : BaseServiceWithConstructor, IMixedRealityExtensionService, IMixedRealityService, IDisposable Remarks Empty, but reserved for future use, in case additional properties or methods are assigned. Constructors BaseExtensionService(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public BaseExtensionService(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties ConfigurationProfile Configuration Profile Declaration protected BaseMixedRealityProfile ConfigurationProfile { get; set; } Property Value Type Description BaseMixedRealityProfile Implements IMixedRealityExtensionService IMixedRealityService System.IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Physics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Classes BaseRayStabilizer A base class for a stabilizer that takes an input position and rotation, and performs operations on them to stabilize, or smooth deltas, in the data. GazeStabilizer GazeStabilizer iterates over samples of Raycast data and helps stabilize the user's gaze for precision targeting. InterpolationUtilities Static class containing interpolation-related utility functions. Interpolator A MonoBehaviour that interpolates a transform's position, rotation or scale. MixedRealityRaycaster RaycastResultComparer Compares the Raycast Results from Unity's Graphic & Physics Raycasters. TwoHandMoveLogic Implements a movement logic that uses the model of angular rotations along a sphere whose radius varies. The angle to move by is computed by looking at how much the hand changes relative to a pivot point (slightly below and in front of the head). Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. TwoHandRotateLogic Implements common logic for rotating holograms using a handlebar metaphor. each frame, object_rotation_delta = rotation_delta(current_hands_vector, previous_hands_vector) where hands_vector is the vector between two hand/controller positions. Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. TwoHandScaleLogic Implements a scale logic that will scale an object based on the ratio of the distance between hands. object_scale = start_object_scale * curr_hand_dist / start_hand_dist Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. VectorRollingStatistics Vector Statistics used in gaze stabilization."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerMapping.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerMapping.html",
    "title": "Struct MixedRealityControllerMapping | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityControllerMapping Used to define a controller or other input device's physical buttons, and other attributes. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MixedRealityControllerMapping Constructors MixedRealityControllerMapping(Type, Handedness) Constructor. Declaration public MixedRealityControllerMapping(Type controllerType, Handedness handedness = null) Parameters Type Name Description Type controllerType Controller Type to instantiate at runtime. Handedness handedness The designated hand that the device is managing. Properties ControllerType Controller Type to instantiate at runtime. Declaration public SystemType ControllerType { get; } Property Value Type Description SystemType Description Description of the Device. Declaration public string Description { get; } Property Value Type Description String Handedness The designated hand that the device is managing. Declaration public Handedness Handedness { get; } Property Value Type Description Handedness HasCustomInteractionMappings Is this controller mapping using custom interactions? Declaration public bool HasCustomInteractionMappings { get; } Property Value Type Description Boolean Interactions Details the list of available buttons / interactions available from the device. Declaration public MixedRealityInteractionMapping[] Interactions { get; } Property Value Type Description MixedRealityInteractionMapping [] SupportedControllerType Declaration public SupportedControllerType SupportedControllerType { get; } Property Value Type Description SupportedControllerType"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.GraphicInputEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.GraphicInputEventData.html",
    "title": "Class GraphicInputEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class GraphicInputEventData Describes a uGUI event that was generated by a specific pointer. Inheritance Object GraphicInputEventData Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class GraphicInputEventData : PointerEventData Constructors GraphicInputEventData(EventSystem) Declaration public GraphicInputEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Methods Clear() Clears the pointer data and calls the base 's Reset method. Declaration public void Clear()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.Color32Extensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.Color32Extensions.html",
    "title": "Class Color32Extensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class Color32Extensions Extension methods for Unity's Color32 struct Inheritance Object Color32Extensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class Color32Extensions Methods PremultiplyAlpha(Color) Declaration public static Color PremultiplyAlpha(Color col) Parameters Type Name Description Color col Returns Type Description Color PremultiplyAlpha(Color32) Declaration public static Color32 PremultiplyAlpha(Color32 col) Parameters Type Name Description Color32 col Returns Type Description Color32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.StringExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class StringExtensions String Extensions. Inheritance Object StringExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class StringExtensions Methods DecodeFrom64(String) Decodes string from base 64 ASCII. Declaration public static string DecodeFrom64(this string encodedData) Parameters Type Name Description String encodedData String to decode. Returns Type Description String Decoded string. EncodeTo64(String) Encodes the string to base 64 ASCII. Declaration public static string EncodeTo64(this string toEncode) Parameters Type Name Description String toEncode String to encode. Returns Type Description String Encoded string. ToProperCase(String) Capitalize the first character and add a space before each capitalized letter (except the first character). Declaration public static string ToProperCase(this string value) Parameters Type Name Description String value Returns Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Data.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Data.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Data | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Data Classes ControllerInputActionOption Used to aid in layout of Controller Input Actions. ControllerInputActionOptions Used to aid in layout of Controller Input Actions."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.MouseController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.MouseController.html",
    "title": "Class MouseController | Mixed Reality Toolkit Documentation",
    "keywords": "Class MouseController Manages the mouse using unity input system. Inheritance Object BaseController MouseController Inherited Members BaseController.DefaultLeftHandedInteractions BaseController.DefaultRightHandedInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) Namespace : Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput Assembly : cs.temp.dll.dll Syntax public class MouseController : BaseController Constructors MouseController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public MouseController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions The default interactions for this controller. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultInteractions Methods SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides BaseController.SetupDefaultInteractions(Handedness) Update() Update controller. Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Async | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Async Classes AwaiterExtensions We could just add a generic GetAwaiter to YieldInstruction and CustomYieldInstruction but instead we add specific methods to each derived class to allow for return values that make the most sense for the specific instruction type. AwaiterExtensions.SimpleCoroutineAwaiter Processes Coroutine and notifies completion. AwaiterExtensions.SimpleCoroutineAwaiter<T> Processes Coroutine and notifies completion with result."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.BuildDeployPreferences.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.BuildDeployPreferences.html",
    "title": "Class BuildDeployPreferences | Mixed Reality Toolkit Documentation",
    "keywords": "Class BuildDeployPreferences Build and Deploy Specific Editor Preferences for the Build and Deploy Window. Inheritance Object BuildDeployPreferences Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Build Assembly : cs.temp.dll.dll Syntax public static class BuildDeployPreferences Properties AbsoluteBuildDirectory The absolute path to BuildDirectory Declaration public static string AbsoluteBuildDirectory { get; } Property Value Type Description String BuildConfig The current Build Configuration. (Debug, Release, or Master) Declaration public static string BuildConfig { get; set; } Property Value Type Description String BuildDirectory The Build Directory that the MRTK Build window will build to. Declaration public static string BuildDirectory { get; set; } Property Value Type Description String BuildPlatform The current Build Platform. (x86 or x64) Declaration public static string BuildPlatform { get; set; } Property Value Type Description String DevicePortalConnections The current device portal connections. Declaration public static string DevicePortalConnections { get; set; } Property Value Type Description String ForceRebuild Current setting to force rebuilding the appx. Declaration public static bool ForceRebuild { get; set; } Property Value Type Description Boolean FullReinstall Current setting to fully uninstall and reinstall the appx. Declaration public static bool FullReinstall { get; set; } Property Value Type Description Boolean IncrementBuildVersion Current setting to increment build visioning. Declaration public static bool IncrementBuildVersion { get; set; } Property Value Type Description Boolean TargetAllConnections Current setting to target all the devices registered to the build window. Declaration public static bool TargetAllConnections { get; set; } Property Value Type Description Boolean UseSSL Current setting to use Single Socket Layer connections to the device portal. Declaration public static bool UseSSL { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorFieldData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorFieldData.html",
    "title": "Struct InspectorFieldData | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InspectorFieldData A reference to the InspectorField and cached info Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InspectorFieldData Fields Attributes Declaration public InspectorField Attributes Field Value Type Description InspectorField Name Declaration public string Name Field Value Type Description String Value Declaration public object Value Field Value Type Description Object"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterBulge.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters.DistorterBulge.html",
    "title": "Class DistorterBulge | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterBulge Inheritance Object Distorter DistorterBulge Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Distorters Assembly : cs.temp.dll.dll Syntax public class DistorterBulge : Distorter, IComparable<Distorter> Properties BulgeFalloff Declaration public AnimationCurve BulgeFalloff { get; set; } Property Value Type Description AnimationCurve BulgeLocalCenter Declaration public Vector3 BulgeLocalCenter { get; set; } Property Value Type Description Vector3 BulgeRadius Declaration public float BulgeRadius { get; set; } Property Value Type Description Single BulgeStrength Declaration public float BulgeStrength { get; set; } Property Value Type Description Single BulgeWorldCenter Declaration public Vector3 BulgeWorldCenter { get; set; } Property Value Type Description Vector3 ScaleDistort Declaration public float ScaleDistort { get; set; } Property Value Type Description Single Methods DistortPointInternal(Vector3, Single) Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) Implements System.IComparable<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.DHCPInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.DHCPInfo.html",
    "title": "Class DHCPInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class DHCPInfo Inheritance Object DHCPInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class DHCPInfo Fields Address Declaration public IpAddressInfo Address Field Value Type Description IpAddressInfo LeaseExpires Declaration public int LeaseExpires Field Value Type Description Int32 LeaseObtained Declaration public int LeaseObtained Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.FileInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.FileInfo.html",
    "title": "Struct FileInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Struct FileInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public struct FileInfo Fields CurrentDir Folder under the requested known folder. Declaration public string CurrentDir Field Value Type Description String DateCreated Declaration public int DateCreated Field Value Type Description Int32 FileSize In bytes. Declaration public int FileSize Field Value Type Description Int32 Id Declaration public string Id Field Value Type Description String Name Declaration public string Name Field Value Type Description String SubPath Present if this item is a folder, this is the name of the folder. Declaration public string SubPath Field Value Type Description String Type Folder==16 File==32 Declaration public int Type Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.FileList.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.FileList.html",
    "title": "Class FileList | Mixed Reality Toolkit Documentation",
    "keywords": "Class FileList Inheritance Object FileList Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class FileList Fields Items Declaration public FileInfo[] Items Field Value Type Description FileInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.SpeechCommandPropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.SpeechCommandPropertyDrawer.html",
    "title": "Class SpeechCommandPropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechCommandPropertyDrawer Inheritance Object SpeechCommandPropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class SpeechCommandPropertyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect rect, SerializedProperty property, GUIContent content) Parameters Type Name Description Rect rect SerializedProperty property GUIContent content"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IPointerResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IPointerResult.html",
    "title": "Interface IPointerResult | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IPointerResult Interface defining a pointer result. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IPointerResult Properties CurrentPointerTarget The current pointer's target Declaration GameObject CurrentPointerTarget { get; } Property Value Type Description GameObject Details Details about the currently focused . Declaration FocusDetails Details { get; } Property Value Type Description FocusDetails PreviousPointerTarget The previous pointer target. Declaration GameObject PreviousPointerTarget { get; } Property Value Type Description GameObject RayStepIndex The index of the step that produced the last raycast hit, 0 when no raycast hit. Declaration int RayStepIndex { get; } Property Value Type Description Int32 StartPoint The starting point of the Pointer RaySteps. Declaration Vector3 StartPoint { get; } Property Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.TeleportSystem Interfaces IMixedRealityTeleportHandler Interface to implement for teleport events. IMixedRealityTeleportHotSpot IMixedRealityTeleportSystem Manager interface for a Teleport system in the Mixed Reality Toolkit All replacement systems for providing Teleportation functionality should derive from this interface"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaiterExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaiterExtensions.html",
    "title": "Class AwaiterExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class AwaiterExtensions We could just add a generic GetAwaiter to YieldInstruction and CustomYieldInstruction but instead we add specific methods to each derived class to allow for return values that make the most sense for the specific instruction type. Inheritance Object AwaiterExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public static class AwaiterExtensions Methods GetAwaiter(AssetBundleCreateRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<AssetBundle> GetAwaiter(this AssetBundleCreateRequest instruction) Parameters Type Name Description AssetBundleCreateRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < AssetBundle > GetAwaiter(AssetBundleRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<object> GetAwaiter(this AssetBundleRequest instruction) Parameters Type Name Description AssetBundleRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(AsyncOperation) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<AsyncOperation> GetAwaiter(this AsyncOperation instruction) Parameters Type Name Description AsyncOperation instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < AsyncOperation > GetAwaiter(IEnumerator) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<object> GetAwaiter(this IEnumerator coroutine) Parameters Type Name Description IEnumerator coroutine Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(ResourceRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<object> GetAwaiter(this ResourceRequest instruction) Parameters Type Name Description ResourceRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(WaitForEndOfFrame) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForEndOfFrame instruction) Parameters Type Name Description WaitForEndOfFrame instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForFixedUpdate) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForFixedUpdate instruction) Parameters Type Name Description WaitForFixedUpdate instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForSeconds) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForSeconds instruction) Parameters Type Name Description WaitForSeconds instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForSecondsRealtime) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForSecondsRealtime instruction) Parameters Type Name Description WaitForSecondsRealtime instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForUpdate) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForUpdate instruction) Parameters Type Name Description WaitForUpdate instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitUntil) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitUntil instruction) Parameters Type Name Description WaitUntil instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitWhile) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitWhile instruction) Parameters Type Name Description WaitWhile instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter<T>(IEnumerator<T>) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<T> GetAwaiter<T>(this IEnumerator<T> coroutine) Parameters Type Name Description IEnumerator <T> coroutine Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter <T> Type Parameters Name Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions.WaitForBackgroundThread.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions.WaitForBackgroundThread.html",
    "title": "Class WaitForBackgroundThread | Mixed Reality Toolkit Documentation",
    "keywords": "Class WaitForBackgroundThread Inheritance Object WaitForBackgroundThread Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions Assembly : cs.temp.dll.dll Syntax public class WaitForBackgroundThread Methods GetAwaiter() Declaration public ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter() Returns Type Description ConfiguredTaskAwaitable.ConfiguredTaskAwaiter"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityInputHandler-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealityInputHandler-1.html",
    "title": "Interface IMixedRealityInputHandler<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputHandler<T> Interface to implement for more complex generic input. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputHandler<T> : IEventSystemHandler Type Parameters Name Description T The type of input to listen for. Remarks Valid input types: Methods OnInputChanged(InputEventData<T>) Raised input event updates from the type of input specified in the interface handler implementation. Declaration void OnInputChanged(InputEventData<T> eventData) Parameters Type Name Description InputEventData <T> eventData Remarks The is the current input data."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.BaseSpatialObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.BaseSpatialObserver.html",
    "title": "Class BaseSpatialObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseSpatialObserver Inheritance Object BaseSpatialObserver Implements IMixedRealitySpatialAwarenessObserver Namespace : Microsoft.MixedReality.Toolkit.Core.Providers Assembly : cs.temp.dll.dll Syntax public class BaseSpatialObserver : BaseDataProvider, IMixedRealitySpatialAwarenessObserver Constructors BaseSpatialObserver(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public BaseSpatialObserver(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties DefaultPhysicsLayer Declaration public int DefaultPhysicsLayer { get; } Property Value Type Description Int32 IsRunning Declaration public bool IsRunning { get; protected set; } Property Value Type Description Boolean IsStationaryObserver Declaration public bool IsStationaryObserver { get; set; } Property Value Type Description Boolean ObservationExtents Declaration public Vector3 ObservationExtents { get; set; } Property Value Type Description Vector3 ObserverOrigin Declaration public Vector3 ObserverOrigin { get; set; } Property Value Type Description Vector3 ObserverRotation Declaration public Quaternion ObserverRotation { get; set; } Property Value Type Description Quaternion ObserverVolumeType Declaration public VolumeType ObserverVolumeType { get; set; } Property Value Type Description VolumeType SourceId Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName Declaration public string SourceName { get; } Property Value Type Description String StartupBehavior Declaration public AutoStartBehavior StartupBehavior { get; set; } Property Value Type Description AutoStartBehavior UpdateInterval Declaration public float UpdateInterval { get; set; } Property Value Type Description Single Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 GetHashCode(Object) Declaration public int GetHashCode(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Resume() Declaration public virtual void Resume() Suspend() Declaration public virtual void Suspend() Implements IMixedRealitySpatialAwarenessObserver"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.GenericPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.GenericPointer.html",
    "title": "Class GenericPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class GenericPointer Base Class for pointers that don't inherit from MonoBehaviour. Inheritance Object GenericPointer Namespace : Microsoft.MixedReality.Toolkit.Core.Providers Assembly : cs.temp.dll.dll Syntax public class GenericPointer : IMixedRealityPointer Constructors GenericPointer(String, IMixedRealityInputSource) Constructor. Declaration public GenericPointer(string pointerName, IMixedRealityInputSource inputSourceParent) Parameters Type Name Description String pointerName IMixedRealityInputSource inputSourceParent Properties BaseCursor Declaration public IMixedRealityCursor BaseCursor { get; set; } Property Value Type Description IMixedRealityCursor Controller Declaration public virtual IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController CursorModifier Declaration public ICursorModifier CursorModifier { get; set; } Property Value Type Description ICursorModifier FocusTarget Declaration public IMixedRealityFocusHandler FocusTarget { get; set; } Property Value Type Description IMixedRealityFocusHandler InputSourceParent Declaration public virtual IMixedRealityInputSource InputSourceParent { get; protected set; } Property Value Type Description IMixedRealityInputSource IsFocusLocked Declaration public bool IsFocusLocked { get; set; } Property Value Type Description Boolean IsInteractionEnabled Declaration public bool IsInteractionEnabled { get; set; } Property Value Type Description Boolean PointerExtent Declaration public virtual float PointerExtent { get; set; } Property Value Type Description Single PointerId Declaration public uint PointerId { get; } Property Value Type Description UInt32 PointerName Declaration public string PointerName { get; set; } Property Value Type Description String PointerOrientation Declaration public float PointerOrientation { get; } Property Value Type Description Single PrioritizedLayerMasksOverride Declaration public LayerMask[] PrioritizedLayerMasksOverride { get; set; } Property Value Type Description LayerMask [] RaycastMode Declaration public RaycastMode RaycastMode { get; set; } Property Value Type Description RaycastMode Rays Declaration public RayStep[] Rays { get; protected set; } Property Value Type Description RayStep [] RayStabilizer Declaration public IBaseRayStabilizer RayStabilizer { get; set; } Property Value Type Description IBaseRayStabilizer Result Declaration public IPointerResult Result { get; set; } Property Value Type Description IPointerResult SphereCastRadius Declaration public float SphereCastRadius { get; set; } Property Value Type Description Single TeleportHotSpot Declaration public IMixedRealityTeleportHotSpot TeleportHotSpot { get; set; } Property Value Type Description IMixedRealityTeleportHotSpot Methods Equals(IMixedRealityPointer, IMixedRealityPointer) Declaration public static bool Equals(IMixedRealityPointer left, IMixedRealityPointer right) Parameters Type Name Description IMixedRealityPointer left IMixedRealityPointer right Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 OnPostRaycast() Declaration public virtual void OnPostRaycast() OnPreRaycast() Declaration public virtual void OnPreRaycast() TryGetPointerPosition(out Vector3) Declaration public virtual bool TryGetPointerPosition(out Vector3 position) Parameters Type Name Description Vector3 position Returns Type Description Boolean TryGetPointerRotation(out Quaternion) Declaration public virtual bool TryGetPointerRotation(out Quaternion rotation) Parameters Type Name Description Quaternion rotation Returns Type Description Boolean TryGetPointingRay(out Ray) Declaration public virtual bool TryGetPointingRay(out Ray pointingRay) Parameters Type Name Description Ray pointingRay Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpAppxBuildTools.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpAppxBuildTools.html",
    "title": "Class UwpAppxBuildTools | Mixed Reality Toolkit Documentation",
    "keywords": "Class UwpAppxBuildTools Inheritance Object UwpAppxBuildTools Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Build Assembly : cs.temp.dll.dll Syntax public class UwpAppxBuildTools Properties IsBuilding Query the build process to see if we're already building. Declaration public static bool IsBuilding { get; } Property Value Type Description Boolean Methods BuildAppxAsync(String, Boolean, String, String, String, Boolean) Build the UWP appx bundle for this project. Requires that BuildUnityPlayer(String, Boolean) has already be run or a user has previously built the Unity Player with the WSA Player as the Build Target. Declaration public static Task<bool> BuildAppxAsync(string productName, bool forceRebuildAppx, string buildConfig, string buildPlatform, string buildDirectory, bool incrementVersion) Parameters Type Name Description String productName The applications product name. Typically Boolean forceRebuildAppx Should we force rebuild the appx bundle? String buildConfig Debug, Release, or Master configurations are valid. String buildPlatform x86 or x64 build platforms are valid. String buildDirectory The directory where the built Unity Player Solution is located. Boolean incrementVersion Should we increment the appx version number? Returns Type Description Task < Boolean > BuildUnityPlayer(String, Boolean) Do a build configured for UWP Applications to the specified path, returns the error from BuildUwpPlayer(BuildInfo) Declaration public static bool BuildUnityPlayer(string buildDirectory, bool showDialog = true) Parameters Type Name Description String buildDirectory Boolean showDialog Returns Type Description Boolean True, if build was successful. RestoreNugetPackagesAsync(String, String) Declaration public static Task<bool> RestoreNugetPackagesAsync(string nugetPath, string storePath) Parameters Type Name Description String nugetPath String storePath Returns Type Description Task < Boolean >"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpBuildDeployWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.UwpBuildDeployWindow.html",
    "title": "Class UwpBuildDeployWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class UwpBuildDeployWindow Build window - supports SLN creation, APPX from SLN, Deploy on device, and misc helper utilities associated with the build/deploy/test iteration loop Requires the device to be set in developer mode and to have secure connections disabled (in the security tab in the device portal) Inheritance Object UwpBuildDeployWindow Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Build Assembly : cs.temp.dll.dll Syntax public class UwpBuildDeployWindow : EditorWindow Methods BuildAll(Boolean) Declaration public static void BuildAll(bool install = true) Parameters Type Name Description Boolean install BuildAppx() Declaration public static void BuildAppx() BuildUnityProject() Declaration public static void BuildUnityProject() OpenWindow() Declaration public static void OpenWindow()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorPropertySetting.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorPropertySetting.html",
    "title": "Struct InspectorPropertySetting | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InspectorPropertySetting A InspectorField property definition and value. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InspectorPropertySetting Fields AudioClipValue Declaration public AudioClip AudioClipValue Field Value Type Description AudioClip BoolValue Declaration public bool BoolValue Field Value Type Description Boolean ColorValue Declaration public Color ColorValue Field Value Type Description Color CurveValue Declaration public AnimationCurve CurveValue Field Value Type Description AnimationCurve EventValue Declaration public UnityEvent EventValue Field Value Type Description UnityEvent FloatValue Declaration public float FloatValue Field Value Type Description Single GameObjectValue Declaration public GameObject GameObjectValue Field Value Type Description GameObject IntValue Declaration public int IntValue Field Value Type Description Int32 Label Declaration public string Label Field Value Type Description String MaterialValue Declaration public Material MaterialValue Field Value Type Description Material Name Declaration public string Name Field Value Type Description String ObjectValue Declaration public UnityEngine.Object ObjectValue Field Value Type Description UnityEngine.Object Options Declaration public string[] Options Field Value Type Description String [] QuaternionValue Declaration public Quaternion QuaternionValue Field Value Type Description Quaternion ScriptableObjectValue Declaration public ScriptableObject ScriptableObjectValue Field Value Type Description ScriptableObject StringValue Declaration public string StringValue Field Value Type Description String TextureValue Declaration public Texture TextureValue Field Value Type Description Texture Tooltip Declaration public string Tooltip Field Value Type Description String Type Declaration public InspectorField.FieldTypes Type Field Value Type Description InspectorField.FieldTypes Vector2Value Declaration public Vector2 Vector2Value Field Value Type Description Vector2 Vector3Value Declaration public Vector3 Vector3Value Field Value Type Description Vector3 Vector4Value Declaration public Vector4 Vector4Value Field Value Type Description Vector4"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.ComparableRaycastResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.ComparableRaycastResult.html",
    "title": "Struct ComparableRaycastResult | Mixed Reality Toolkit Documentation",
    "keywords": "Struct ComparableRaycastResult Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Physics Assembly : cs.temp.dll.dll Syntax public struct ComparableRaycastResult Constructors ComparableRaycastResult(RaycastResult, Int32) Declaration public ComparableRaycastResult(RaycastResult raycastResult, int layerMaskIndex = 0) Parameters Type Name Description RaycastResult raycastResult Int32 layerMaskIndex Fields LayerMaskIndex Declaration public readonly int LayerMaskIndex Field Value Type Description Int32 RaycastResult Declaration public readonly RaycastResult RaycastResult Field Value Type Description RaycastResult"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessMeshObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessMeshObject.html",
    "title": "Class SpatialAwarenessMeshObject | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialAwarenessMeshObject Object encapsulating the components of a spatial awareness mesh object. Inheritance Object BaseSpatialAwarenessObject SpatialAwarenessMeshObject Inherited Members BaseSpatialAwarenessObject.Id BaseSpatialAwarenessObject.GameObject BaseSpatialAwarenessObject.Renderer BaseSpatialAwarenessObject.Filter BaseSpatialAwarenessObject.CleanObject() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public class SpatialAwarenessMeshObject : BaseSpatialAwarenessObject Properties Collider The collider for the mesh object. Declaration public MeshCollider Collider { get; set; } Property Value Type Description MeshCollider Methods Cleanup(SpatialAwarenessMeshObject, Boolean, Boolean) Clean up the resources associated with the surface. Declaration public static void Cleanup(SpatialAwarenessMeshObject meshObject, bool destroyGameObject = true, bool destroyMeshes = true) Parameters Type Name Description SpatialAwarenessMeshObject meshObject The SpatialAwarenessMeshObject whose resources will be cleaned up. Boolean destroyGameObject Boolean destroyMeshes Create(Mesh, Int32, String, Int32) Creates a SpatialAwarenessMeshObject . Declaration public static SpatialAwarenessMeshObject Create(Mesh mesh, int layer, string name, int meshId) Parameters Type Name Description Mesh mesh Int32 layer String name Int32 meshId Returns Type Description SpatialAwarenessMeshObject SpatialMeshObject containing the fields that describe the mesh."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor Classes InputManagerAxis Used to define an entire InputManagerAxis, with each variable defined by the same term the Inspector shows. Enums InputManagerAxisType Used to map AxisType from a useful name to the int value the InputManager wants."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.SupportedPlatforms.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.SupportedPlatforms.html",
    "title": "Enum SupportedPlatforms | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SupportedPlatforms The supported platforms for Mixed Reality Toolkit Components and Features. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax [Flags] public enum SupportedPlatforms Fields Name Description LinuxStandalone MacStandalone WindowsEditor WindowsStandalone WindowsUniversal"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.SystemType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.SystemType.html",
    "title": "Class SystemType | Mixed Reality Toolkit Documentation",
    "keywords": "Class SystemType Reference to a class Type with support for Unity serialization. Inheritance Object SystemType Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class SystemType : ISerializationCallbackReceiver Constructors SystemType(String) Initializes a new instance of the SystemType class. Declaration public SystemType(string assemblyQualifiedClassName) Parameters Type Name Description String assemblyQualifiedClassName Assembly qualified class name. SystemType(Type) Initializes a new instance of the SystemType class. Declaration public SystemType(Type type) Parameters Type Name Description Type type Class type. Exceptions Type Condition ArgumentException If type is not a class type. Properties Type Gets or sets type of class reference. Declaration public Type Type { get; set; } Property Value Type Description Type Exceptions Type Condition ArgumentException If value is not a class type. Methods GetReference(Type) Declaration public static string GetReference(Type type) Parameters Type Name Description Type type Returns Type Description String ToString() Declaration public override string ToString() Returns Type Description String Operators Implicit(SystemType to String) Declaration public static implicit operator string (SystemType type) Parameters Type Name Description SystemType type Returns Type Description String Implicit(SystemType to Type) Declaration public static implicit operator Type(SystemType type) Parameters Type Name Description SystemType type Returns Type Description Type Implicit(Type to SystemType) Declaration public static implicit operator SystemType(Type type) Parameters Type Name Description Type type Returns Type Description SystemType"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Teleport.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Teleport.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.Teleport | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.Teleport Classes TeleportEventData Describes a Teleportation Event."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum Classes GenericBaseEventData Generic Base Event Data for Sending Events through the Event System. PlacementEventData Describes placement of objects events."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.VectorExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.VectorExtensions.html",
    "title": "Class VectorExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class VectorExtensions Extension methods for Unity's Vector struct Inheritance Object VectorExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class VectorExtensions Methods Average(ICollection<Vector2>) Declaration public static Vector2 Average(this ICollection<Vector2> vectors) Parameters Type Name Description ICollection < Vector2 > vectors Returns Type Description Vector2 Average(ICollection<Vector3>) Declaration public static Vector3 Average(this ICollection<Vector3> vectors) Parameters Type Name Description ICollection < Vector3 > vectors Returns Type Description Vector3 Average(IEnumerable<Vector2>) Declaration public static Vector2 Average(this IEnumerable<Vector2> vectors) Parameters Type Name Description IEnumerable < Vector2 > vectors Returns Type Description Vector2 Average(IEnumerable<Vector3>) Declaration public static Vector3 Average(this IEnumerable<Vector3> vectors) Parameters Type Name Description IEnumerable < Vector3 > vectors Returns Type Description Vector3 CylindricalMapping(Vector3, Single) Get the relative mapping based on a source Vec3 and a radius for cylinder mapping. Declaration public static Vector3 CylindricalMapping(Vector3 source, float radius) Parameters Type Name Description Vector3 source The source to be mapped to cylinder Single radius This is a Single for the radius of the cylinder Returns Type Description Vector3 Div(Vector2, Vector2) Declaration public static Vector2 Div(this Vector2 value, Vector2 scale) Parameters Type Name Description Vector2 value Vector2 scale Returns Type Description Vector2 Div(Vector3, Vector3) Declaration public static Vector3 Div(this Vector3 value, Vector3 scale) Parameters Type Name Description Vector3 value Vector3 scale Returns Type Description Vector3 InverseTransformPoint(Vector3, Vector3, Quaternion, Vector3) Declaration public static Vector3 InverseTransformPoint(this Vector3 point, Vector3 translation, Quaternion rotation, Vector3 lossyScale) Parameters Type Name Description Vector3 point Vector3 translation Quaternion rotation Vector3 lossyScale Returns Type Description Vector3 IsValidVector(Vector3) Declaration public static bool IsValidVector(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Boolean Median(ICollection<Vector2>) Declaration public static Vector2 Median(this ICollection<Vector2> vectors) Parameters Type Name Description ICollection < Vector2 > vectors Returns Type Description Vector2 Median(ICollection<Vector3>) Declaration public static Vector3 Median(this ICollection<Vector3> vectors) Parameters Type Name Description ICollection < Vector3 > vectors Returns Type Description Vector3 Median(IEnumerable<Vector2>) Declaration public static Vector2 Median(this IEnumerable<Vector2> vectors) Parameters Type Name Description IEnumerable < Vector2 > vectors Returns Type Description Vector2 Median(IEnumerable<Vector3>) Declaration public static Vector3 Median(this IEnumerable<Vector3> vectors) Parameters Type Name Description IEnumerable < Vector3 > vectors Returns Type Description Vector3 Mul(Vector2, Vector2) Declaration public static Vector2 Mul(this Vector2 value, Vector2 scale) Parameters Type Name Description Vector2 value Vector2 scale Returns Type Description Vector2 Mul(Vector3, Vector3) Declaration public static Vector3 Mul(this Vector3 value, Vector3 scale) Parameters Type Name Description Vector3 value Vector3 scale Returns Type Description Vector3 RadialMapping(Vector3, Single, Single, Int32, Int32, Int32, Int32) Get the relative mapping based on a source Vec3 and a radius for radial mapping. Declaration public static Vector3 RadialMapping(Vector3 source, float radialRange, float radius, int row, int totalRows, int column, int totalColumns) Parameters Type Name Description Vector3 source The source to be mapped to cylinder Single radialRange The total range of the radial in degrees as a Single Single radius This is a Single for the radius of the radial Int32 row The current row as a Int32 for the radial calculation Int32 totalRows Int32 column The current column as a Int32 for the radial calculation Int32 totalColumns Returns Type Description Vector3 RotateAround(Vector3, Vector3, Quaternion) Declaration public static Vector3 RotateAround(this Vector3 point, Vector3 pivot, Quaternion rotation) Parameters Type Name Description Vector3 point Vector3 pivot Quaternion rotation Returns Type Description Vector3 RotateAround(Vector3, Vector3, Vector3) Declaration public static Vector3 RotateAround(this Vector3 point, Vector3 pivot, Vector3 eulerAngles) Parameters Type Name Description Vector3 point Vector3 pivot Vector3 eulerAngles Returns Type Description Vector3 ScatterMapping(Vector3, Single) Randomized mapping based on a source Vec3 and a radius for randomization distance. Declaration public static Vector3 ScatterMapping(Vector3 source, float radius) Parameters Type Name Description Vector3 source The source to be mapped to cylinder Single radius This is a Single for the radius of the cylinder Returns Type Description Vector3 SphericalMapping(Vector3, Single) Get the relative mapping based on a source Vec3 and a radius for spherical mapping. Declaration public static Vector3 SphericalMapping(Vector3 source, float radius) Parameters Type Name Description Vector3 source The source to be mapped to sphere Single radius This is a Single for the radius of the sphere Returns Type Description Vector3 TransformPoint(Vector3, Vector3, Quaternion, Vector3) Declaration public static Vector3 TransformPoint(this Vector3 point, Vector3 translation, Quaternion rotation, Vector3 lossyScale) Parameters Type Name Description Vector3 point Vector3 translation Quaternion rotation Vector3 lossyScale Returns Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Extensions | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Extensions Classes AnimationCurveExtensions Extension methods for Unity's AnimationCurve class ArrayExtensions Array type method extensions. BoundsExtensions Extension methods for Unity's Bounds struct CameraExtensions Extension methods for the Unity's Camera class CollectionsExtensions Extension methods for .Net Collection objects, e.g. Lists, Dictionaries, Arrays Color32Extensions Extension methods for Unity's Color32 struct ComparerExtensions Extension methods for .Net Comparer's ComponentExtensions Extensions methods for the Unity Component class. This also includes some component-related extensions for the GameObject class. DoubleExtensions Extension methods for the .Net Double struct EnumerableExtensions Extension methods for the .Net IEnumerable class EventSystemExtensions Extension methods for Unity's EventSystem FloatExtensions Extension methods for the .Net Float struct GameObjectExtensions Extension methods for Unity's GameObject class InteractionSourceExtensions Extensions for the InteractionSource class to add haptics and expose the renderable model. LayerExtensions Extension methods for Unity's LayerMask struct MathExtensions Extension methods and helper functions for various math data ProcessExtensions Process Extension class. QuaternionExtensions Extension methods for Unity's Quaternion struct. RayExtensions Extension methods for Unity's Ray struct StringExtensions String Extensions. TransformExtensions Extension methods for Unity's Transform class UnityObjectExtensions Extension methods for Unity's Object class VectorExtensions Extension methods for Unity's Vector struct Enums BoundsExtensions.Axis"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Text3DShaderGUI.Styles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Text3DShaderGUI.Styles.html",
    "title": "Class Text3DShaderGUI.Styles | Mixed Reality Toolkit Documentation",
    "keywords": "Class Text3DShaderGUI.Styles Inheritance Object Text3DShaderGUI.Styles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax protected static class Styles Fields cullMode Declaration public static GUIContent cullMode Field Value Type Description GUIContent"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityControllerVisualizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityControllerVisualizer.html",
    "title": "Interface IMixedRealityControllerVisualizer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityControllerVisualizer Inherited Members IMixedRealityControllerPoseSynchronizer.Handedness IMixedRealityControllerPoseSynchronizer.DestroyOnSourceLost IMixedRealityControllerPoseSynchronizer.Controller IMixedRealityControllerPoseSynchronizer.UseSourcePoseData IMixedRealityControllerPoseSynchronizer.PoseAction Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityControllerVisualizer : IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealityInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose> Properties GameObjectProxy The reference for this controller. Declaration GameObject GameObjectProxy { get; } Property Value Type Description GameObject Remarks This reference may not always be available when called."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.InputMappingAxisUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.InputMappingAxisUtility.html",
    "title": "Class InputMappingAxisUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputMappingAxisUtility Utility class for Unity's Input Manager Mappings. Inheritance Object InputMappingAxisUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class InputMappingAxisUtility Remarks Note, with any luck this will be temporary. If it is to remain beyond Alpha, then this needs some refactoring to make a proper component. Methods CheckUnityInputManagerMappings(InputManagerAxis[]) Simple static function to check Unity InputManager Axis configuration, and apply if needed. Declaration public static void CheckUnityInputManagerMappings(InputManagerAxis[] axisMappings) Parameters Type Name Description InputManagerAxis [] axisMappings Optional array of Axis Mappings, to configure your own custom set Remarks This only exists as the Unity input manager CANNOT map Axis to an id, it has to be through a mapping DoesAxisNameExist(String) Checks our local cache of axis names to see if an axis exists. This cache is refreshed if it's empty or if InputManager.asset has been changed. Declaration public static bool DoesAxisNameExist(string axisName) Parameters Type Name Description String axisName Returns Type Description Boolean RemoveMappings(InputManagerAxis[]) Simple static function to apply Unity InputManager Axis configuration Declaration public static void RemoveMappings(InputManagerAxis[] axisMappings) Parameters Type Name Description InputManagerAxis [] axisMappings Optional array of Axis Mappings, to configure your own custom set Remarks This only exists as the Unity input manager CANNOT map Axis to an id, it has to be through a mapping"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.DataProviders.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.DataProviders.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.DataProviders | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.DataProviders Classes RectangleLineDataProviderInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.EllipseLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.EllipseLineDataProviderInspector.html",
    "title": "Class EllipseLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class EllipseLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector EllipseLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview BaseLineDataProviderInspector.OnSceneGUI() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines Assembly : cs.temp.dll.dll Syntax public class EllipseLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.ParabolaPhysicalLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.ParabolaPhysicalLineDataProvider.html",
    "title": "Class ParabolaPhysicalLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolaPhysicalLineDataProvider Creates a parabolic line based on physics. Inheritance Object BaseMixedRealityLineDataProvider ParabolaLineDataProvider ParabolaPhysicalLineDataProvider Inherited Members ParabolaLineDataProvider.StartPoint ParabolaLineDataProvider.OnValidate() ParabolaLineDataProvider.GetUnClampedWorldLengthInternal() BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.Update() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public class ParabolaPhysicalLineDataProvider : ParabolaLineDataProvider Properties Direction Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 DistanceMultiplier Declaration public float DistanceMultiplier { get; set; } Property Value Type Description Single Gravity Declaration public Vector3 Gravity { get; set; } Property Value Type Description Vector3 PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount UseCustomGravity Declaration public bool UseCustomGravity { get; set; } Property Value Type Description Boolean Velocity Declaration public float Velocity { get; set; } Property Value Type Description Single Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides ParabolaLineDataProvider.GetUpVectorInternal(Single) SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3) Remarks This specific override doesn't set any points."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.RectangleLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.RectangleLineDataProvider.html",
    "title": "Class RectangleLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class RectangleLineDataProvider Defines a line in the shape of a rectangle. Inheritance Object BaseMixedRealityLineDataProvider RectangleLineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.Update() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public class RectangleLineDataProvider : BaseMixedRealityLineDataProvider Properties Height Declaration public float Height { get; set; } Property Value Type Description Single Loops Declaration public override bool Loops { get; } Property Value Type Description Boolean Overrides BaseMixedRealityLineDataProvider.Loops PointCount Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount Width Declaration public float Width { get; set; } Property Value Type Description Single ZOffset Declaration public float ZOffset { get; set; } Property Value Type Description Single Methods DrawUnselectedGizmosPreview() Declaration protected override void DrawUnselectedGizmosPreview() Overrides BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) When we get interpolated points we subdivide the square so our sampling has more to work with Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) OnValidate() Declaration protected override void OnValidate() Overrides BaseMixedRealityLineDataProvider.OnValidate() SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.AdapterInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.AdapterInfo.html",
    "title": "Class AdapterInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class AdapterInfo Inheritance Object AdapterInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class AdapterInfo Fields Description Declaration public string Description Field Value Type Description String DHCP Declaration public DHCPInfo DHCP Field Value Type Description DHCPInfo Gateways Declaration public IpAddressInfo[] Gateways Field Value Type Description IpAddressInfo [] HardwareAddress Declaration public string HardwareAddress Field Value Type Description String Index Declaration public int Index Field Value Type Description Int32 IpAddresses Declaration public IpAddressInfo[] IpAddresses Field Value Type Description IpAddressInfo [] Name Declaration public string Name Field Value Type Description String Type Declaration public string Type Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.SimpleLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.SimpleLineDataProvider.html",
    "title": "Class SimpleLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimpleLineDataProvider A simple line with two points. Inheritance Object BaseMixedRealityLineDataProvider SimpleLineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.Update() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public class SimpleLineDataProvider : BaseMixedRealityLineDataProvider Properties EndPoint The point where this line will end. Declaration public MixedRealityPose EndPoint { get; set; } Property Value Type Description MixedRealityPose PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount StartPoint The Starting point of this line. Declaration public MixedRealityPose StartPoint { get; } Property Value Type Description MixedRealityPose Remarks Always located at this 's Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) OnValidate() Declaration protected override void OnValidate() Overrides BaseMixedRealityLineDataProvider.OnValidate() SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions Classes BaseMixedRealityProfile MixedRealityCameraProfile This Scriptable Object tells you if your head mounted display (HMD) is a transparent device or an occluded device. Based on those values, you can customize your camera and quality settings. MixedRealityRegisteredServiceProvidersProfile MixedRealityToolkitConfigurationProfile Configuration profile settings for the Mixed Reality Toolkit. Structs MixedRealityServiceConfiguration Defines a system, feature, or manager to be registered with as a on startup."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.EditorClassExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.EditorClassExtensions.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Extensions.EditorClassExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Extensions.EditorClassExtensions Classes ScriptableObjectExtensions Extensions for s"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.Styles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.Styles.html",
    "title": "Class MixedRealityStandardShaderGUI.Styles | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityStandardShaderGUI.Styles Inheritance Object MixedRealityStandardShaderGUI.Styles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax protected static class Styles Fields advancedOptionsTitle Declaration public static string advancedOptionsTitle Field Value Type Description String albedo Declaration public static GUIContent albedo Field Value Type Description GUIContent albedoAlphaModeNames Declaration public static readonly string[] albedoAlphaModeNames Field Value Type Description String [] albedoAssignedAtRuntime Declaration public static GUIContent albedoAssignedAtRuntime Field Value Type Description GUIContent albedoMapAlphaMetallicName Declaration public static string albedoMapAlphaMetallicName Field Value Type Description String albedoMapAlphaSmoothnessName Declaration public static string albedoMapAlphaSmoothnessName Field Value Type Description String alphaBlendOnName Declaration public static string alphaBlendOnName Field Value Type Description String alphaCutoff Declaration public static GUIContent alphaCutoff Field Value Type Description GUIContent alphaTestOnName Declaration public static string alphaTestOnName Field Value Type Description String blendOperation Declaration public static GUIContent blendOperation Field Value Type Description GUIContent blendOperationName Declaration public static string blendOperationName Field Value Type Description String borderLight Declaration public static GUIContent borderLight Field Value Type Description GUIContent borderLightOpaque Declaration public static GUIContent borderLightOpaque Field Value Type Description GUIContent borderLightUsesHoverColor Declaration public static GUIContent borderLightUsesHoverColor Field Value Type Description GUIContent borderMinValue Declaration public static GUIContent borderMinValue Field Value Type Description GUIContent borderWidth Declaration public static GUIContent borderWidth Field Value Type Description GUIContent channelMap Declaration public static GUIContent channelMap Field Value Type Description GUIContent clippingBorder Declaration public static GUIContent clippingBorder Field Value Type Description GUIContent clippingBorderColor Declaration public static GUIContent clippingBorderColor Field Value Type Description GUIContent clippingBorderWidth Declaration public static GUIContent clippingBorderWidth Field Value Type Description GUIContent clippingBox Declaration public static GUIContent clippingBox Field Value Type Description GUIContent clippingPlane Declaration public static GUIContent clippingPlane Field Value Type Description GUIContent clippingSphere Declaration public static GUIContent clippingSphere Field Value Type Description GUIContent colorWriteMask Declaration public static GUIContent colorWriteMask Field Value Type Description GUIContent colorWriteMaskName Declaration public static string colorWriteMaskName Field Value Type Description String cullMode Declaration public static GUIContent cullMode Field Value Type Description GUIContent customRenderingModeName Declaration public static string customRenderingModeName Field Value Type Description String customRenderingModeNames Declaration public static readonly string[] customRenderingModeNames Field Value Type Description String [] depthTest Declaration public static GUIContent depthTest Field Value Type Description GUIContent depthTestName Declaration public static string depthTestName Field Value Type Description String depthWrite Declaration public static GUIContent depthWrite Field Value Type Description GUIContent depthWriteName Declaration public static string depthWriteName Field Value Type Description String depthWriteNames Declaration public static readonly string[] depthWriteNames Field Value Type Description String [] destinationBlend Declaration public static GUIContent destinationBlend Field Value Type Description GUIContent destinationBlendName Declaration public static string destinationBlendName Field Value Type Description String directionalLight Declaration public static GUIContent directionalLight Field Value Type Description GUIContent disableAlbedoMapName Declaration public static string disableAlbedoMapName Field Value Type Description String edgeSmoothingValue Declaration public static GUIContent edgeSmoothingValue Field Value Type Description GUIContent emissiveColor Declaration public static GUIContent emissiveColor Field Value Type Description GUIContent enableChannelMap Declaration public static GUIContent enableChannelMap Field Value Type Description GUIContent enableEmission Declaration public static GUIContent enableEmission Field Value Type Description GUIContent enableHoverColorOpaqueOverride Declaration public static GUIContent enableHoverColorOpaqueOverride Field Value Type Description GUIContent enableHoverColorOverride Declaration public static GUIContent enableHoverColorOverride Field Value Type Description GUIContent enableLocalSpaceTriplanarMapping Declaration public static GUIContent enableLocalSpaceTriplanarMapping Field Value Type Description GUIContent enableNormalMap Declaration public static GUIContent enableNormalMap Field Value Type Description GUIContent enableTriplanarMapping Declaration public static GUIContent enableTriplanarMapping Field Value Type Description GUIContent environmentColoring Declaration public static GUIContent environmentColoring Field Value Type Description GUIContent environmentColorIntensity Declaration public static GUIContent environmentColorIntensity Field Value Type Description GUIContent environmentColorThreshold Declaration public static GUIContent environmentColorThreshold Field Value Type Description GUIContent environmentColorX Declaration public static GUIContent environmentColorX Field Value Type Description GUIContent environmentColorY Declaration public static GUIContent environmentColorY Field Value Type Description GUIContent environmentColorZ Declaration public static GUIContent environmentColorZ Field Value Type Description GUIContent fadeBeginDistance Declaration public static GUIContent fadeBeginDistance Field Value Type Description GUIContent fadeCompleteDistance Declaration public static GUIContent fadeCompleteDistance Field Value Type Description GUIContent fluentOptionsTitle Declaration public static string fluentOptionsTitle Field Value Type Description String hoverColorOpaqueOverride Declaration public static GUIContent hoverColorOpaqueOverride Field Value Type Description GUIContent hoverColorOverride Declaration public static GUIContent hoverColorOverride Field Value Type Description GUIContent hoverLight Declaration public static GUIContent hoverLight Field Value Type Description GUIContent hoverLightOpaque Declaration public static GUIContent hoverLightOpaque Field Value Type Description GUIContent innerGlow Declaration public static GUIContent innerGlow Field Value Type Description GUIContent innerGlowColor Declaration public static GUIContent innerGlowColor Field Value Type Description GUIContent instancedColor Declaration public static GUIContent instancedColor Field Value Type Description GUIContent instancedColorFeatureName Declaration public static string instancedColorFeatureName Field Value Type Description String instancedColorName Declaration public static string instancedColorName Field Value Type Description String metallic Declaration public static GUIContent metallic Field Value Type Description GUIContent nearPlaneFade Declaration public static GUIContent nearPlaneFade Field Value Type Description GUIContent normalMap Declaration public static GUIContent normalMap Field Value Type Description GUIContent normalMapScale Declaration public static GUIContent normalMapScale Field Value Type Description GUIContent primaryMapsTitle Declaration public static string primaryMapsTitle Field Value Type Description String propertiesComponentHelp Declaration public static string propertiesComponentHelp Field Value Type Description String reflections Declaration public static GUIContent reflections Field Value Type Description GUIContent refraction Declaration public static GUIContent refraction Field Value Type Description GUIContent refractiveIndex Declaration public static GUIContent refractiveIndex Field Value Type Description GUIContent renderingModeName Declaration public static string renderingModeName Field Value Type Description String renderingModeNames Declaration public static readonly string[] renderingModeNames Field Value Type Description String [] renderingOptionsTitle Declaration public static string renderingOptionsTitle Field Value Type Description String renderQueueOverride Declaration public static GUIContent renderQueueOverride Field Value Type Description GUIContent renderTypeName Declaration public static string renderTypeName Field Value Type Description String rimColor Declaration public static GUIContent rimColor Field Value Type Description GUIContent rimLight Declaration public static GUIContent rimLight Field Value Type Description GUIContent rimPower Declaration public static GUIContent rimPower Field Value Type Description GUIContent roundCornerMargin Declaration public static GUIContent roundCornerMargin Field Value Type Description GUIContent roundCornerRadius Declaration public static GUIContent roundCornerRadius Field Value Type Description GUIContent roundCorners Declaration public static GUIContent roundCorners Field Value Type Description GUIContent smoothness Declaration public static GUIContent smoothness Field Value Type Description GUIContent sourceBlend Declaration public static GUIContent sourceBlend Field Value Type Description GUIContent sourceBlendName Declaration public static string sourceBlendName Field Value Type Description String specularHighlights Declaration public static GUIContent specularHighlights Field Value Type Description GUIContent sphericalHarmonics Declaration public static GUIContent sphericalHarmonics Field Value Type Description GUIContent stencil Declaration public static GUIContent stencil Field Value Type Description GUIContent stencilComparison Declaration public static GUIContent stencilComparison Field Value Type Description GUIContent stencilComparisonName Declaration public static string stencilComparisonName Field Value Type Description String stencilOperation Declaration public static GUIContent stencilOperation Field Value Type Description GUIContent stencilOperationName Declaration public static string stencilOperationName Field Value Type Description String stencilReference Declaration public static GUIContent stencilReference Field Value Type Description GUIContent triplanarMappingBlendSharpness Declaration public static GUIContent triplanarMappingBlendSharpness Field Value Type Description GUIContent vertexColors Declaration public static GUIContent vertexColors Field Value Type Description GUIContent"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb.USBDeviceInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb.USBDeviceInfo.html",
    "title": "Class USBDeviceInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class USBDeviceInfo Inheritance Object USBDeviceInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb Assembly : cs.temp.dll.dll Syntax [Serializable] public class USBDeviceInfo Constructors USBDeviceInfo(Int32, String, Int32, String, Int32) Declaration public USBDeviceInfo(int vendorId, string udid, int productId, string name, int revision) Parameters Type Name Description Int32 vendorId String udid Int32 productId String name Int32 revision Properties Name Declaration public string Name { get; } Property Value Type Description String ProductId Declaration public int ProductId { get; } Property Value Type Description Int32 Revision Declaration public int Revision { get; } Property Value Type Description Int32 Udid Declaration public string Udid { get; } Property Value Type Description String VendorId Declaration public int VendorId { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.XboxController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.XboxController.html",
    "title": "Class XboxController | Mixed Reality Toolkit Documentation",
    "keywords": "Class XboxController Xbox Controller using Unity Input System Inheritance Object BaseController GenericJoystickController XboxController Inherited Members GenericJoystickController.PointerOffsetAngle GenericJoystickController.CurrentControllerPosition GenericJoystickController.CurrentControllerRotation GenericJoystickController.LastControllerPose GenericJoystickController.CurrentControllerPose GenericJoystickController.UpdateController() GenericJoystickController.UpdateButtonData(MixedRealityInteractionMapping) GenericJoystickController.UpdateSingleAxisData(MixedRealityInteractionMapping) GenericJoystickController.UpdateDualAxisData(MixedRealityInteractionMapping) GenericJoystickController.UpdatePoseData(MixedRealityInteractionMapping) BaseController.DefaultLeftHandedInteractions BaseController.DefaultRightHandedInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) Namespace : Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput Assembly : cs.temp.dll.dll Syntax public class XboxController : GenericJoystickController Constructors XboxController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public XboxController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions Default interactions for Xbox Controller using Unity Input System. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultInteractions Methods SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides GenericJoystickController.SetupDefaultInteractions(Handedness)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseService.html",
    "title": "Class BaseService | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseService The base service implements IMixedRealityService and provides default properties for all services. Inheritance Object BaseService BaseEventSystem BaseServiceWithConstructor Implements IMixedRealityService IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Services Assembly : cs.temp.dll.dll Syntax public abstract class BaseService : IMixedRealityService, IDisposable Fields disposed Value indicating if the object has completed disposal. Declaration protected bool disposed Field Value Type Description Boolean Remarks Set by derived classes to indicate that disposal has been completed. Properties Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public virtual string Name { get; protected set; } Property Value Type Description String Priority Optional Priority to reorder registered managers based on their respective priority, reduces the risk of race conditions by prioritizing the order in which managers are evaluated. Declaration public virtual uint Priority { get; protected set; } Property Value Type Description UInt32 Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public virtual void Destroy() Disable() Optional Disable function to pause the service. Declaration public virtual void Disable() Dispose() Cleanup resources used by this object. Declaration public void Dispose() Dispose(Boolean) Cleanup resources used by the object Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Are we fully disposing the object? True will release all managed resources, unmanaged resources are always released. Enable() Optional Enable function to enable / re-enable the service. Declaration public virtual void Enable() Finalize() Finalizer Declaration protected void Finalize() Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public virtual void Initialize() Reset() Optional Reset function to perform that will Reset the service, for example, whenever there is a profile change. Declaration public virtual void Reset() Update() Optional Update function to perform per-frame updates of the service. Declaration public virtual void Update() Implements IMixedRealityService System.IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Devices.BaseSpatialAwarenessObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Devices.BaseSpatialAwarenessObserver.html",
    "title": "Class BaseSpatialAwarenessObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseSpatialAwarenessObserver Inheritance Object BaseSpatialAwarenessObserver Implements IMixedRealitySpatialAwarenessObserver Namespace : Microsoft.MixedReality.Toolkit.Core.Devices Assembly : cs.temp.dll.dll Syntax public class BaseSpatialAwarenessObserver : BaseDataProvider, IMixedRealitySpatialAwarenessObserver Constructors BaseSpatialAwarenessObserver(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public BaseSpatialAwarenessObserver(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties DefaultPhysicsLayer Declaration public int DefaultPhysicsLayer { get; set; } Property Value Type Description Int32 DefaultPhysicsLayerMask Declaration public int DefaultPhysicsLayerMask { get; } Property Value Type Description Int32 IsRunning Declaration public bool IsRunning { get; protected set; } Property Value Type Description Boolean IsStationaryObserver Declaration public bool IsStationaryObserver { get; set; } Property Value Type Description Boolean ObservationExtents Declaration public Vector3 ObservationExtents { get; set; } Property Value Type Description Vector3 ObservedObjectParent Declaration public GameObject ObservedObjectParent { get; } Property Value Type Description GameObject ObserverOrigin Declaration public Vector3 ObserverOrigin { get; set; } Property Value Type Description Vector3 ObserverRotation Declaration public Quaternion ObserverRotation { get; set; } Property Value Type Description Quaternion ObserverVolumeType Declaration public VolumeType ObserverVolumeType { get; set; } Property Value Type Description VolumeType SourceId Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName Declaration public string SourceName { get; } Property Value Type Description String SpatialAwarenessSystem The currently active instance of . Declaration protected IMixedRealitySpatialAwarenessSystem SpatialAwarenessSystem { get; } Property Value Type Description IMixedRealitySpatialAwarenessSystem StartupBehavior Declaration public AutoStartBehavior StartupBehavior { get; set; } Property Value Type Description AutoStartBehavior UpdateInterval Declaration public float UpdateInterval { get; set; } Property Value Type Description Single Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 GetHashCode(Object) Declaration public int GetHashCode(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Resume() Declaration public virtual void Resume() Suspend() Declaration public virtual void Suspend() Implements IMixedRealitySpatialAwarenessObserver"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.EditorClassExtensions.ScriptableObjectExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.EditorClassExtensions.ScriptableObjectExtensions.html",
    "title": "Class ScriptableObjectExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScriptableObjectExtensions Extensions for s Inheritance Object ScriptableObjectExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions.EditorClassExtensions Assembly : cs.temp.dll.dll Syntax public static class ScriptableObjectExtensions Methods CreateAsset(ScriptableObject, String, String) Creates, saves, and then opens a new asset for the target . Declaration public static ScriptableObject CreateAsset(this ScriptableObject scriptableObject, string path = null, string fileName = null) Parameters Type Name Description ScriptableObject scriptableObject you want to create an asset file for. String path Optional path for the new asset. String fileName Optional filename for the new asset. Returns Type Description ScriptableObject GetAllInstances<T>() Gets all the scriptable object instances in the project. Declaration public static T[] GetAllInstances<T>() where T : ScriptableObject Returns Type Description T[] An Array of instances for the type. Type Parameters Name Description T The Type of you're wanting to find instances of."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter.html",
    "title": "Class AwaiterExtensions.SimpleCoroutineAwaiter | Mixed Reality Toolkit Documentation",
    "keywords": "Class AwaiterExtensions.SimpleCoroutineAwaiter Processes Coroutine and notifies completion. Inheritance Object AwaiterExtensions.SimpleCoroutineAwaiter Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public class SimpleCoroutineAwaiter : INotifyCompletion Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods Complete(Exception) Declaration public void Complete(Exception e) Parameters Type Name Description Exception e GetResult() Declaration public void GetResult()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb Classes USBDeviceInfo USBDeviceListener Delegates USBDeviceListener.OnUsbDevicesChanged"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.ScaleState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.ScaleState.html",
    "title": "Enum ScaleState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ScaleState Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum ScaleState Fields Name Description Growing Shrinking Static"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.GenericBaseEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.GenericBaseEventData.html",
    "title": "Class GenericBaseEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class GenericBaseEventData Generic Base Event Data for Sending Events through the Event System. Inheritance Object GenericBaseEventData BoundaryEventData DiagnosticsEventData PlacementEventData MixedRealitySpatialAwarenessEventData TeleportEventData Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum Assembly : cs.temp.dll.dll Syntax public class GenericBaseEventData : BaseEventData Constructors GenericBaseEventData(EventSystem) Constructor. Declaration public GenericBaseEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Usually Properties EventSource The Event Source that the event originates from. Declaration public IMixedRealityEventSource EventSource { get; } Property Value Type Description IMixedRealityEventSource EventTime The time at which the event occurred. Declaration public DateTime EventTime { get; } Property Value Type Description DateTime Remarks The value will be in the device's configured time zone. Methods BaseInitialize(IMixedRealityEventSource) Used to initialize/reset the event and populate the data. Declaration protected void BaseInitialize(IMixedRealityEventSource eventSource) Parameters Type Name Description IMixedRealityEventSource eventSource The source of the event."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.BaseLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.BaseLineDataProviderInspector.html",
    "title": "Class BaseLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector RectangleLineDataProviderInspector EllipseLineDataProviderInspector ParabolaPhysicalLineDataProviderInspector ParabolicConstrainedLineDataProviderInspector SimpleLineDataProviderInspector SplineDataProviderInspector Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines Assembly : cs.temp.dll.dll Syntax public class BaseLineDataProviderInspector : Editor Fields DrawLineManualUpVectors Declaration protected static bool DrawLineManualUpVectors Field Value Type Description Boolean DrawLinePoints Declaration protected static bool DrawLinePoints Field Value Type Description Boolean DrawLineRotations Declaration protected static bool DrawLineRotations Field Value Type Description Boolean LineData Declaration protected BaseMixedRealityLineDataProvider LineData Field Value Type Description BaseMixedRealityLineDataProvider LinePreviewResolution Declaration protected static int LinePreviewResolution Field Value Type Description Int32 ManualUpVectorLength Declaration protected static float ManualUpVectorLength Field Value Type Description Single RenderLinePreview Declaration protected bool RenderLinePreview Field Value Type Description Boolean RotationArrowLength Declaration protected static float RotationArrowLength Field Value Type Description Single Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() OnSceneGUI() Declaration protected virtual void OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.CopyDirectoryInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Build.CopyDirectoryInfo.html",
    "title": "Class CopyDirectoryInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class CopyDirectoryInfo Inheritance Object CopyDirectoryInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Build Assembly : cs.temp.dll.dll Syntax public class CopyDirectoryInfo Constructors CopyDirectoryInfo() Declaration public CopyDirectoryInfo() Properties Destination Declaration public string Destination { get; set; } Property Value Type Description String Filter Declaration public string Filter { get; set; } Property Value Type Description String Recursive Declaration public bool Recursive { get; set; } Property Value Type Description Boolean Source Declaration public string Source { get; set; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorField.FieldTypes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorField.FieldTypes.html",
    "title": "Enum InspectorField.FieldTypes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InspectorField.FieldTypes Property types used for casting and defining property fields in the inspector Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields Assembly : cs.temp.dll.dll Syntax public enum FieldTypes Fields Name Description AudioClip Bool Color Curve DropdownInt DropdownString Event Float GameObject Int Material Object Quaternion ScriptableObject String Texture Vector2 Vector3 Vector4"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorField.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields.InspectorField.html",
    "title": "Class InspectorField | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorField A set of field/property tags used to define how a property should render in a custom inspector Inheritance Object Attribute InspectorField Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.InspectorFields Assembly : cs.temp.dll.dll Syntax public class InspectorField : Attribute, _Attribute Properties Label The label that will be rendered with the property field in the custom inspector Declaration public string Label { get; set; } Property Value Type Description String Options A string list of options for a pop-up list Declaration public string[] Options { get; set; } Property Value Type Description String [] Tooltip A tooltip for the property field Declaration public string Tooltip { get; set; } Property Value Type Description String Type The type of field or property value type Declaration public InspectorField.FieldTypes Type { get; set; } Property Value Type Description InspectorField.FieldTypes Value An object to hold the actual value Declaration public UnityEngine.Object Value { get; set; } Property Value Type Description UnityEngine.Object Methods FieldToProperty(InspectorField, Object, String) Declaration public static InspectorPropertySetting FieldToProperty(InspectorField attributes, object fieldValue, string fieldName) Parameters Type Name Description InspectorField attributes Object fieldValue String fieldName Returns Type Description InspectorPropertySetting GetSettingValue(List<InspectorPropertySetting>, String) Get the propertySettings value Declaration public static object GetSettingValue(List<InspectorPropertySetting> settings, string name) Parameters Type Name Description List < InspectorPropertySetting > settings String name Returns Type Description Object ReverseLookup(String, String[]) Get the index from a list of strings using string comparison Declaration public static int ReverseLookup(string option, string[] options) Parameters Type Name Description String option String [] options Returns Type Description Int32 UpdatePropertySetting(InspectorPropertySetting, Object) Set the value of the propertySetting Declaration public static InspectorPropertySetting UpdatePropertySetting(InspectorPropertySetting setting, object update) Parameters Type Name Description InspectorPropertySetting setting Object update Returns Type Description InspectorPropertySetting Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealitySourcePoseHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealitySourcePoseHandler.html",
    "title": "Interface IMixedRealitySourcePoseHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySourcePoseHandler Interface to implement to react to source Inherited Members IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData) IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData) Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySourcePoseHandler : IMixedRealitySourceStateHandler, IEventSystemHandler Methods OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) Raised when the source pose is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose> eventData) Parameters Type Name Description SourcePoseEventData < MixedRealityPose > eventData OnSourcePoseChanged(SourcePoseEventData<Quaternion>) Raised when the source rotation is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<Quaternion> eventData) Parameters Type Name Description SourcePoseEventData < Quaternion > eventData OnSourcePoseChanged(SourcePoseEventData<TrackingState>) Raised when the source pose tracking state is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<TrackingState> eventData) Parameters Type Name Description SourcePoseEventData < TrackingState > eventData OnSourcePoseChanged(SourcePoseEventData<Vector2>) Raised when the source position is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<Vector2> eventData) Parameters Type Name Description SourcePoseEventData < Vector2 > eventData OnSourcePoseChanged(SourcePoseEventData<Vector3>) Raised when the source position is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<Vector3> eventData) Parameters Type Name Description SourcePoseEventData < Vector3 > eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Observers Interfaces IMixedRealitySpatialAwarenessMeshObserver The interface for defining an IMixedRealitySpatialAwarenessObserver which provides mesh data. IMixedRealitySpatialAwarenessObserver"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.BoundsExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.BoundsExtensions.html",
    "title": "Class BoundsExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundsExtensions Extension methods for Unity's Bounds struct Inheritance Object BoundsExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class BoundsExtensions Fields BCK Declaration public const int BCK = 5 Field Value Type Description Int32 BOT Declaration public const int BOT = 1 Field Value Type Description Int32 FWD Declaration public const int FWD = 4 Field Value Type Description Int32 LB Declaration public const int LB = 1 Field Value Type Description Int32 LB_LT Declaration public const int LB_LT = 7 Field Value Type Description Int32 LBB Declaration public const int LBB = 1 Field Value Type Description Int32 LBF Declaration public const int LBF = 0 Field Value Type Description Int32 LBF_LBB Declaration public const int LBF_LBB = 18 Field Value Type Description Int32 LBF_RBF Declaration public const int LBF_RBF = 9 Field Value Type Description Int32 LFT Declaration public const int LFT = 2 Field Value Type Description Int32 LT Declaration public const int LT = 0 Field Value Type Description Int32 LT_RT Declaration public const int LT_RT = 4 Field Value Type Description Int32 LTB Declaration public const int LTB = 3 Field Value Type Description Int32 LTB_LBB Declaration public const int LTB_LBB = 14 Field Value Type Description Int32 LTF Declaration public const int LTF = 2 Field Value Type Description Int32 LTF_LBF Declaration public const int LTF_LBF = 12 Field Value Type Description Int32 LTF_LTB Declaration public const int LTF_LTB = 19 Field Value Type Description Int32 LTF_RTF Declaration public const int LTF_RTF = 8 Field Value Type Description Int32 RB Declaration public const int RB = 3 Field Value Type Description Int32 RB_LB Declaration public const int RB_LB = 6 Field Value Type Description Int32 RBB Declaration public const int RBB = 5 Field Value Type Description Int32 RBB_LBB Declaration public const int RBB_LBB = 11 Field Value Type Description Int32 RBF Declaration public const int RBF = 4 Field Value Type Description Int32 RBF_RBB Declaration public const int RBF_RBB = 16 Field Value Type Description Int32 RHT Declaration public const int RHT = 3 Field Value Type Description Int32 RT Declaration public const int RT = 2 Field Value Type Description Int32 RT_RB Declaration public const int RT_RB = 5 Field Value Type Description Int32 RTB Declaration public const int RTB = 7 Field Value Type Description Int32 RTB_LTB Declaration public const int RTB_LTB = 10 Field Value Type Description Int32 RTB_RBB Declaration public const int RTB_RBB = 13 Field Value Type Description Int32 RTF Declaration public const int RTF = 6 Field Value Type Description Int32 RTF_RBF Declaration public const int RTF_RBF = 15 Field Value Type Description Int32 RTF_RTB Declaration public const int RTF_RTB = 17 Field Value Type Description Int32 TOP Declaration public const int TOP = 0 Field Value Type Description Int32 Methods CloserToPoint(Bounds, Vector3, Bounds) Checks to see whether point is closer to bounds or otherBounds Declaration public static bool CloserToPoint(this Bounds bounds, Vector3 point, Bounds otherBounds) Parameters Type Name Description Bounds bounds Vector3 point Bounds otherBounds Returns Type Description Boolean ContainsBounds(Bounds, Bounds) Checks to see if bounds contains the other bounds completely. Declaration public static bool ContainsBounds(this Bounds bounds, Bounds otherBounds) Parameters Type Name Description Bounds bounds Bounds otherBounds Returns Type Description Boolean ExpandToContain(Bounds, Bounds) Returns bounds that contain both this bounds and the bounds passed in. Declaration public static Bounds ExpandToContain(this Bounds originalBounds, Bounds otherBounds) Parameters Type Name Description Bounds originalBounds Bounds otherBounds Returns Type Description Bounds GetColliderBoundsPoints(GameObject, List<Vector3>, LayerMask) Method to get bounding box points using Collider method. Declaration public static void GetColliderBoundsPoints(GameObject target, List<Vector3> boundsPoints, LayerMask ignoreLayers) Parameters Type Name Description GameObject target gameObject that boundingBox bounds. List < Vector3 > boundsPoints array reference that gets filled with points LayerMask ignoreLayers layerMask to simplify search GetCornerAndMidPointPositions(Bounds, Transform, ref Vector3[]) Gets all the corner points and mid points from Renderer's Bounds Declaration public static void GetCornerAndMidPointPositions(this Bounds bounds, Transform transform, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Transform transform Vector3 [] positions GetCornerAndMidPointPositions2D(Bounds, Transform, ref Vector3[], BoundsExtensions.Axis) Gets all the corner points and mid points from Renderer's Bounds, ignoring the z axis Declaration public static void GetCornerAndMidPointPositions2D(this Bounds bounds, Transform transform, ref Vector3[] positions, BoundsExtensions.Axis flattenAxis) Parameters Type Name Description Bounds bounds Transform transform Vector3 [] positions BoundsExtensions.Axis flattenAxis GetCornerPositions(Bounds, Transform, ref Vector3[]) Gets all the corner points of the bounds in world space Declaration public static void GetCornerPositions(this Bounds bounds, Transform transform, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Transform transform Vector3 [] positions Remarks Use BoxColliderExtensions.{Left|Right}{Bottom|Top}{Front|Back} consts to index into the output corners array. GetCornerPositionsFromRendererBounds(Bounds, ref Vector3[]) Gets all the corner points from Renderer's Bounds Declaration public static void GetCornerPositionsFromRendererBounds(this Bounds bounds, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Vector3 [] positions GetFacePositions(Bounds, Transform, ref Vector3[]) Declaration public static void GetFacePositions(this Bounds bounds, Transform transform, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Transform transform Vector3 [] positions GetInvalidBoundsInstance() Returns an instance of the 'Bounds' class which is invalid. An invalid 'Bounds' instance is one which has its size vector set to 'float.MaxValue' for all 3 components. The center of an invalid bounds instance is the zero vector. Declaration public static Bounds GetInvalidBoundsInstance() Returns Type Description Bounds GetMeshFilterBoundsPoints(GameObject, List<Vector3>, LayerMask) GetMeshFilterBoundsPoints - gets bounding box points using MeshFilter method. Declaration public static void GetMeshFilterBoundsPoints(GameObject target, List<Vector3> boundsPoints, LayerMask ignoreLayers) Parameters Type Name Description GameObject target gameObject that boundingbox bounds List < Vector3 > boundsPoints array reference that gets filled with points LayerMask ignoreLayers layerMask to simplify search GetRenderBoundsPoints(GameObject, List<Vector3>, LayerMask) GetRenderBoundsPoints gets bounding box points using Render method. Declaration public static void GetRenderBoundsPoints(GameObject target, List<Vector3> boundsPoints, LayerMask ignoreLayers) Parameters Type Name Description GameObject target gameObject that boundingbox bounds List < Vector3 > boundsPoints array reference that gets filled with points LayerMask ignoreLayers layerMask to simplify search GetScreenRectangle(Bounds, Camera) Returns the rectangle which encloses the specifies 'Bounds' instance in screen space. Declaration public static Rect GetScreenRectangle(this Bounds bounds, Camera camera) Parameters Type Name Description Bounds bounds Camera camera Returns Type Description Rect GetScreenSpaceCornerPoints(Bounds, Camera) Returns the screen space corner points of the specified 'Bounds' instance. Declaration public static Vector2[] GetScreenSpaceCornerPoints(this Bounds bounds, Camera camera) Parameters Type Name Description Bounds bounds Camera camera The camera used for rendering to the screen. This is needed to perform the transformation to screen space. Returns Type Description Vector2 [] IsValid(Bounds) Checks if the specified bounds instance is valid. A valid 'Bounds' instance is one whose size vector does not have all 3 components set to 'float.MaxValue'. Declaration public static bool IsValid(this Bounds bounds) Parameters Type Name Description Bounds bounds Returns Type Description Boolean Transform(Bounds, Matrix4x4) Transforms 'bounds' using the specified transform matrix. Declaration public static Bounds Transform(this Bounds bounds, Matrix4x4 transformMatrix) Parameters Type Name Description Bounds bounds The 'Bounds' instance which must be transformed. Matrix4x4 transformMatrix The specified 'Bounds' instance will be transformed using this transform matrix. The function assumes that the matrix doesn't contain any projection or skew transformation. Returns Type Description Bounds The transformed 'Bounds' instance. Remarks Transforming a 'Bounds' instance means that the function will construct a new 'Bounds' instance which has its center translated using the translation information stored in the specified matrix and its size adjusted to account for rotation and scale. The size of the new 'Bounds' instance will be calculated in such a way that it will contain the old 'Bounds'. Volume(Bounds) Returns the volume of the bounds. Declaration public static float Volume(this Bounds bounds) Parameters Type Name Description Bounds bounds Returns Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.SplineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.SplineDataProviderInspector.html",
    "title": "Class SplineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SplineDataProviderInspector Inheritance Object BaseLineDataProviderInspector SplineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines Assembly : cs.temp.dll.dll Syntax public class SplineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityGazeProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityGazeProvider.html",
    "title": "Interface IMixedRealityGazeProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityGazeProvider Implements the Gaze Provider for an Input Source. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityGazeProvider Properties Enabled Enable or disable the attached to the GameObjectReference Declaration bool Enabled { get; set; } Property Value Type Description Boolean GameObjectReference Get the GameObject reference for this Gaze Provider. Declaration GameObject GameObjectReference { get; } Property Value Type Description GameObject GazeCursor The Gaze Cursor for the provider. Declaration IMixedRealityCursor GazeCursor { get; } Property Value Type Description IMixedRealityCursor GazeDirection Normal of the gaze. Declaration Vector3 GazeDirection { get; } Property Value Type Description Vector3 GazeInputSource The Gaze Input Source for the provider. Declaration IMixedRealityInputSource GazeInputSource { get; } Property Value Type Description IMixedRealityInputSource GazeOrigin Origin of the gaze. Declaration Vector3 GazeOrigin { get; } Property Value Type Description Vector3 GazePointer The Gaze Pointer for the provider. Declaration IMixedRealityPointer GazePointer { get; } Property Value Type Description IMixedRealityPointer GazeTarget The game object that is currently being gazed at, if any. Declaration GameObject GazeTarget { get; } Property Value Type Description GameObject HeadMovementDirection The current head movement direction. Declaration Vector3 HeadMovementDirection { get; } Property Value Type Description Vector3 HeadVelocity The current head velocity. Declaration Vector3 HeadVelocity { get; } Property Value Type Description Vector3 HitInfo HitInfo property gives access to information at the object being gazed at, if any. Declaration RaycastHit HitInfo { get; } Property Value Type Description RaycastHit HitNormal Normal of the point at which the gaze manager hit an object. If no object is currently being hit, this will return the previous normal. Declaration Vector3 HitNormal { get; } Property Value Type Description Vector3 HitPosition Position at which the gaze manager hit an object. If no object is currently being hit, this will use the last hit distance. Declaration Vector3 HitPosition { get; } Property Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityInputSource.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityInputSource.html",
    "title": "Interface IMixedRealityInputSource | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputSource Interface for an input source. An input source is the origin of user input and generally comes from a physical controller, sensor, or other hardware device. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputSource : IMixedRealityEventSource Properties Pointers Array of pointers associated with this input source. Declaration IMixedRealityPointer[] Pointers { get; } Property Value Type Description IMixedRealityPointer []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerVisualizationProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.MixedRealityControllerVisualizationProfile.html",
    "title": "Class MixedRealityControllerVisualizationProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerVisualizationProfile Inheritance Object BaseMixedRealityProfile MixedRealityControllerVisualizationProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerVisualizationProfile : BaseMixedRealityProfile Properties ControllerVisualizationSettings The current list of controller visualization settings. Declaration public MixedRealityControllerVisualizationSetting[] ControllerVisualizationSettings { get; } Property Value Type Description MixedRealityControllerVisualizationSetting [] ControllerVisualizationType The concrete Controller Visualizer component to use on the rendered controller model Declaration public SystemType ControllerVisualizationType { get; } Property Value Type Description SystemType GlobalLeftHandModel The Default controller model when there is no specific controller model for the Left hand or when no hand is specified (Handedness = none) Declaration public GameObject GlobalLeftHandModel { get; } Property Value Type Description GameObject Remarks If the default model for the left hand controller can not be found, the controller will fall back and use this for visualization. GlobalRightHandModel The Default controller model when there is no specific controller model for the Right hand. Declaration public GameObject GlobalRightHandModel { get; } Property Value Type Description GameObject Remarks If the default model for the right hand controller can not be found, the controller will fall back and use this for visualization. RenderMotionControllers Enable and configure the controller rendering of the Motion Controllers on Startup. Declaration public bool RenderMotionControllers { get; } Property Value Type Description Boolean UseDefaultModels User the controller model loader provided by the SDK, or provide override models. Declaration public bool UseDefaultModels { get; } Property Value Type Description Boolean Methods GetControllerModelOverride(Type, Handedness) Gets the override model for a specific controller type and hand Declaration public GameObject GetControllerModelOverride(Type controllerType, Handedness hand) Parameters Type Name Description Type controllerType The type of controller to query for Handedness hand The specific hand assigned to the controller Returns Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleDualAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleDualAxis.html",
    "title": "Struct InputActionRuleDualAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleDualAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Vector2 > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InputActionRuleDualAxis : IInputActionRule<Vector2> Constructors InputActionRuleDualAxis(MixedRealityInputAction, MixedRealityInputAction, Vector2) Constructor. Declaration public InputActionRuleDualAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, Vector2 criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Vector2 criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public Vector2 Criteria { get; } Property Value Type Description Vector2 RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityFocusProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityFocusProvider.html",
    "title": "Interface IMixedRealityFocusProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityFocusProvider Implements the Focus Provider for handling focus of pointers. Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityFocusProvider : IMixedRealitySourceStateHandler, IMixedRealityDataProvider, IMixedRealityExtensionService, IMixedRealityService, IDisposable Properties FocusLayerMasks The layer masks for the focus pointers to raycast against. Declaration LayerMask[] FocusLayerMasks { get; } Property Value Type Description LayerMask [] GlobalPointingExtent Maximum distance at which all pointers can collide with a , unless it has an override extent. Declaration float GlobalPointingExtent { get; } Property Value Type Description Single OverrideFocusedObject To tap on a hologram even when not focused on, set OverrideFocusedObject to desired game object. If it's null, then focused object will be used. Declaration GameObject OverrideFocusedObject { get; set; } Property Value Type Description GameObject UIRaycastCamera The Camera the uses to raycast against. Every uGUI canvas in your scene should use this camera as its event camera. Declaration Camera UIRaycastCamera { get; } Property Value Type Description Camera Methods GenerateNewPointerId() Generate a new unique pointer id. Declaration uint GenerateNewPointerId() Returns Type Description UInt32 GetFocusedObject(IMixedRealityPointer) Gets the currently focused object for the pointing source. If the pointing source is not registered, then the Gaze's Focused is returned. Declaration GameObject GetFocusedObject(IMixedRealityPointer pointingSource) Parameters Type Name Description IMixedRealityPointer pointingSource Returns Type Description GameObject Currently Focused Object. IsPointerRegistered(IMixedRealityPointer) Checks if the pointer is registered with the Focus Manager. Declaration bool IsPointerRegistered(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if registered, otherwise false. RegisterPointer(IMixedRealityPointer) Registers the pointer with the Focus Manager. Declaration bool RegisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if the pointer was registered, false if the pointer was previously registered. TryGetFocusDetails(IMixedRealityPointer, out FocusDetails) Gets the currently focused object for the pointing source. Declaration bool TryGetFocusDetails(IMixedRealityPointer pointer, out FocusDetails focusDetails) Parameters Type Name Description IMixedRealityPointer pointer FocusDetails focusDetails Returns Type Description Boolean TryGetSpecificPointerGraphicEventData(IMixedRealityPointer, out GraphicInputEventData) Get the Graphic Event Data for the specified pointing source. Declaration bool TryGetSpecificPointerGraphicEventData(IMixedRealityPointer pointer, out GraphicInputEventData graphicInputEventData) Parameters Type Name Description IMixedRealityPointer pointer The pointer who's graphic event data we're looking for. GraphicInputEventData graphicInputEventData The graphic event data for the specified pointer Returns Type Description Boolean True, if graphic event data exists. UnregisterPointer(IMixedRealityPointer) Unregisters the pointer with the Focus Manager. Declaration bool UnregisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if the pointer was unregistered, false if the pointer was not registered."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces Interfaces IMixedRealityDataProvider Generic interface for all Mixed Reality Data providers IMixedRealityExtensionService Generic interface for all optional Mixed Reality systems, components, or features that can be added to the MixedRealityServiceConfiguration IMixedRealityService Generic interface for all Mixed Reality Services"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.BaseController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.BaseController.html",
    "title": "Class BaseController | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseController Base Controller class to inherit from for all controllers. Inheritance Object BaseController GenericJoystickController MouseController UnityTouchController Namespace : Microsoft.MixedReality.Toolkit.Core.Providers Assembly : cs.temp.dll.dll Syntax public abstract class BaseController : IMixedRealityController Constructors BaseController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration protected BaseController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties ControllerHandedness Declaration public Handedness ControllerHandedness { get; } Property Value Type Description Handedness DefaultInteractions The default interactions for this controller. Declaration public virtual MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] DefaultLeftHandedInteractions The Default Left Handed interactions for this controller. Declaration public virtual MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] DefaultRightHandedInteractions The Default Right Handed interactions for this controller. Declaration public virtual MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Enabled Declaration public bool Enabled { get; set; } Property Value Type Description Boolean InputSource Declaration public IMixedRealityInputSource InputSource { get; } Property Value Type Description IMixedRealityInputSource Interactions Declaration public MixedRealityInteractionMapping[] Interactions { get; } Property Value Type Description MixedRealityInteractionMapping [] IsPositionApproximate Declaration public bool IsPositionApproximate { get; protected set; } Property Value Type Description Boolean IsPositionAvailable Declaration public bool IsPositionAvailable { get; protected set; } Property Value Type Description Boolean IsRotationAvailable Declaration public bool IsRotationAvailable { get; protected set; } Property Value Type Description Boolean TrackingState Declaration public TrackingState TrackingState { get; protected set; } Property Value Type Description TrackingState Visualizer Declaration public IMixedRealityControllerVisualizer Visualizer { get; } Property Value Type Description IMixedRealityControllerVisualizer Methods AssignControllerMappings(MixedRealityInteractionMapping[]) Load the Interaction mappings for this controller from the configured Controller Mapping profile Declaration public void AssignControllerMappings(MixedRealityInteractionMapping[] mappings) Parameters Type Name Description MixedRealityInteractionMapping [] mappings Configured mappings from a controller mapping profile SetupConfiguration(Type) Setups up the configuration based on the Mixed Reality Controller Mapping Profile. Declaration public bool SetupConfiguration(Type controllerType) Parameters Type Name Description Type controllerType Returns Type Description Boolean SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness if necessary. Declaration public abstract void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions.WaitForUpdate.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions.WaitForUpdate.html",
    "title": "Class WaitForUpdate | Mixed Reality Toolkit Documentation",
    "keywords": "Class WaitForUpdate This can be used as a way to return to the main unity thread when using multiple threads with async methods. Inheritance Object WaitForUpdate Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions Assembly : cs.temp.dll.dll Syntax public class WaitForUpdate : CustomYieldInstruction Properties keepWaiting Declaration public override bool keepWaiting { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaitYieldInstructions Classes WaitForBackgroundThread WaitForUpdate This can be used as a way to return to the main unity thread when using multiple threads with async methods."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.EditorAssemblyReloadManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.EditorAssemblyReloadManager.html",
    "title": "Class EditorAssemblyReloadManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class EditorAssemblyReloadManager Inheritance Object EditorAssemblyReloadManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class EditorAssemblyReloadManager Properties LockReloadAssemblies Locks the Editor's ability to reload assemblies. This is useful for ensuring async tasks complete in the editor without having to worry if any script changes that happen during the running task will cancel it when the editor re-compiles the assemblies. Declaration public static bool LockReloadAssemblies { set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.EditorPrefsUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.EditorPrefsUtility.html",
    "title": "Class EditorPrefsUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class EditorPrefsUtility Convenience class for setting Editor Preferences. Inheritance Object EditorPrefsUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class EditorPrefsUtility Methods GetEditorPref(String, Boolean) Get the saved Boolean from the . Declaration public static bool GetEditorPref(string key, bool defaultValue) Parameters Type Name Description String key Boolean defaultValue Returns Type Description Boolean GetEditorPref(String, Int32) Get the saved Int32 from the . Declaration public static int GetEditorPref(string key, int defaultValue) Parameters Type Name Description String key Int32 defaultValue Returns Type Description Int32 GetEditorPref(String, Single) Get the saved Single from the . Declaration public static float GetEditorPref(string key, float defaultValue) Parameters Type Name Description String key Single defaultValue Returns Type Description Single GetEditorPref(String, String) Get the saved String from the . Declaration public static string GetEditorPref(string key, string defaultValue) Parameters Type Name Description String key String defaultValue Returns Type Description String SetEditorPref(String, Boolean) Set the saved Boolean from the . Declaration public static void SetEditorPref(string key, bool value) Parameters Type Name Description String key Boolean value SetEditorPref(String, Int32) Set the saved Int32 from the . Declaration public static void SetEditorPref(string key, int value) Parameters Type Name Description String key Int32 value SetEditorPref(String, Single) Set the saved Single from the . Declaration public static void SetEditorPref(string key, float value) Parameters Type Name Description String key Single value SetEditorPref(String, String) Set the saved String from the . Declaration public static void SetEditorPref(string key, string value) Parameters Type Name Description String key String value"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.EditorProjectUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.EditorProjectUtilities.html",
    "title": "Class EditorProjectUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class EditorProjectUtilities Inheritance Object EditorProjectUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class EditorProjectUtilities Methods CheckMinimumEditorVersion() Checks that a supported version of Unity is being used with this project. Declaration public static void CheckMinimumEditorVersion() Remarks This method displays a message to the user allowing them to continue or to exit the editor. FindRelativeDirectory(String, out String) Finds the path of a directory relative to the project directory. Declaration public static bool FindRelativeDirectory(string packageDirectory, out string path) Parameters Type Name Description String packageDirectory The name of the directory to search for. String path The output parameter in which the fully qualified path is returned. Returns Type Description Boolean True if the directory could be found, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.IconEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.IconEditor.html",
    "title": "Class IconEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class IconEditor Inheritance Object IconEditor Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class IconEditor : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.BatteryInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.BatteryInfo.html",
    "title": "Class BatteryInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class BatteryInfo Inheritance Object BatteryInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class BatteryInfo Fields AcOnline (0 | 1) Declaration public int AcOnline Field Value Type Description Int32 BatteryPresent (0 | 1) Declaration public int BatteryPresent Field Value Type Description Int32 Charging (0 | 1) Declaration public int Charging Field Value Type Description Int32 DefaultAlert1 Declaration public int DefaultAlert1 Field Value Type Description Int32 DefaultAlert2 Declaration public int DefaultAlert2 Field Value Type Description Int32 EstimatedTime Declaration public int EstimatedTime Field Value Type Description Int32 MaximumCapacity Declaration public int MaximumCapacity Field Value Type Description Int32 RemainingCapacity Declaration public int RemainingCapacity Field Value Type Description Int32 Properties IsCharging Declaration public bool IsCharging { get; } Property Value Type Description Boolean PercentRemaining Declaration public float PercentRemaining { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.DeviceInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.DeviceInfo.html",
    "title": "Class DeviceInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class DeviceInfo Inheritance Object DeviceInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class DeviceInfo Constructors DeviceInfo(String, String, String, String) Constructor. Declaration public DeviceInfo(string ip, string user, string password, string machineName = \"\") Parameters Type Name Description String ip String user String password String machineName Fields CsrfToken The current CSRF Token for the device. Declaration [NonSerialized] public string CsrfToken Field Value Type Description String IP The IP Address of the device. Declaration public string IP Field Value Type Description String MachineName The machine name of the device. Declaration public string MachineName Field Value Type Description String Password The password for the device. Declaration public string Password Field Value Type Description String User The user name of the device. Declaration public string User Field Value Type Description String Properties Authorization The current authorization for the device. Declaration public Dictionary<string, string> Authorization { get; } Property Value Type Description Dictionary < String , String > BatteryInfo The last known battery state of the device. Declaration public BatteryInfo BatteryInfo { get; set; } Property Value Type Description BatteryInfo PowerState The last known power state of the device. Declaration public PowerStateInfo PowerState { get; set; } Property Value Type Description PowerStateInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.DeviceOsInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.DeviceOsInfo.html",
    "title": "Class DeviceOsInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class DeviceOsInfo Inheritance Object DeviceOsInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class DeviceOsInfo Fields ComputerName Declaration public string ComputerName Field Value Type Description String OsEdition Declaration public string OsEdition Field Value Type Description String OsEditionId Declaration public int OsEditionId Field Value Type Description Int32 OsVersion Declaration public string OsVersion Field Value Type Description String Platform Declaration public string Platform Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.DevicePortalConnections.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.DevicePortalConnections.html",
    "title": "Class DevicePortalConnections | Mixed Reality Toolkit Documentation",
    "keywords": "Class DevicePortalConnections Inheritance Object DevicePortalConnections Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class DevicePortalConnections Constructors DevicePortalConnections() Declaration public DevicePortalConnections() DevicePortalConnections(DeviceInfo) Declaration public DevicePortalConnections(DeviceInfo deviceInfo) Parameters Type Name Description DeviceInfo deviceInfo Fields Connections Declaration public List<DeviceInfo> Connections Field Value Type Description List < DeviceInfo >"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem.Edge.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem.Edge.html",
    "title": "Struct Edge | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Edge The BoundaryEdge structure defines the points of a line segment that are used to construct a polygonal boundary. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.BoundarySystem Assembly : cs.temp.dll.dll Syntax public struct Edge Constructors Edge(Vector2, Vector2) Initializes the BoundaryEdge structure. Declaration public Edge(Vector2 pointA, Vector2 pointB) Parameters Type Name Description Vector2 pointA The first point of the line segment. Vector2 pointB The second point of the line segment. Edge(Vector3, Vector3) Initializes the BoundaryEdge structure. Declaration public Edge(Vector3 pointA, Vector3 pointB) Parameters Type Name Description Vector3 pointA The first point of the line segment. Vector3 pointB The second point of the line segment. Fields PointA The first point of the edge line segment. Declaration public readonly Vector2 PointA Field Value Type Description Vector2 PointB The second point of the edge line segment. Declaration public readonly Vector2 PointB Field Value Type Description Vector2"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.ComponentExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.ComponentExtensions.html",
    "title": "Class ComponentExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ComponentExtensions Extensions methods for the Unity Component class. This also includes some component-related extensions for the GameObject class. Inheritance Object ComponentExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class ComponentExtensions Methods EnsureComponent(GameObject, Type) Ensure that a component of type exists on the game object. If it doesn't exist, creates it. Declaration public static Component EnsureComponent(this GameObject gameObject, Type component) Parameters Type Name Description GameObject gameObject Type component A component on the game object for which a component of type should exist. Returns Type Description Component The component that was retrieved or created. EnsureComponent<T>(Component) Ensure that a component of type T exists on the game object. If it doesn't exist, creates it. Declaration public static T EnsureComponent<T>(this Component component) where T : Component Parameters Type Name Description Component component A component on the game object for which a component of type T should exist. Returns Type Description T The component that was retrieved or created. Type Parameters Name Description T Type of the component. EnsureComponent<T>(GameObject) Ensure that a component of type T exists on the game object. If it doesn't exist, creates it. Declaration public static T EnsureComponent<T>(this GameObject gameObject) where T : Component Parameters Type Name Description GameObject gameObject Game object on which component should be. Returns Type Description T The component that was retrieved or created. Type Parameters Name Description T Type of the component. Remarks This extension has to remain in this class as it is required by the EnsureComponent<T>(Component) method FindAncestorComponent<T>(Component, Boolean) Find the first component of type T in the ancestors of the game object of the specified component. Declaration public static T FindAncestorComponent<T>(this Component component, bool includeSelf = true) where T : Component Parameters Type Name Description Component component Component for which its game object's ancestors must be considered. Boolean includeSelf Indicates whether the specified game object should be included. Returns Type Description T The component of type T . Null if it none was found. Type Parameters Name Description T Type of component to find."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.DoubleExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.DoubleExtensions.html",
    "title": "Class DoubleExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class DoubleExtensions Extension methods for the .Net Double struct Inheritance Object DoubleExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class DoubleExtensions Methods Approximately(Double, Double, Double) Checks if two numbers are approximately equal. Similar to , but the tolerance can be specified. Declaration public static bool Approximately(this double number, double other, double tolerance) Parameters Type Name Description Double number One of the numbers to compare. Double other The other number to compare. Double tolerance The amount of tolerance to allow while still considering the numbers approximately equal. Returns Type Description Boolean True if the difference between the numbers is less than or equal to the tolerance, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.AlbedoAlphaMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.AlbedoAlphaMode.html",
    "title": "Enum MixedRealityStandardShaderGUI.AlbedoAlphaMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityStandardShaderGUI.AlbedoAlphaMode Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax protected enum AlbedoAlphaMode Fields Name Description Metallic Smoothness Transparency"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.CustomRenderingMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityStandardShaderGUI.CustomRenderingMode.html",
    "title": "Enum MixedRealityStandardShaderGUI.CustomRenderingMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityStandardShaderGUI.CustomRenderingMode Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax protected enum CustomRenderingMode Fields Name Description Opaque Transparent TransparentCutout"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.SystemTypeReferencePropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.SystemTypeReferencePropertyDrawer.html",
    "title": "Class SystemTypeReferencePropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class SystemTypeReferencePropertyDrawer Custom property drawer for properties. Inheritance Object SystemTypeReferencePropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class SystemTypeReferencePropertyDrawer : PropertyDrawer Properties ExcludedTypeCollectionGetter Gets or sets a function that returns a collection of types that are to be excluded from drop-down. A value of null specifies that no types are to be excluded. Declaration public static Func<ICollection<Type>> ExcludedTypeCollectionGetter { get; set; } Property Value Type Description Func < ICollection < Type >> Remarks This property must be set immediately before presenting a class type reference property field using or since the value of this property is reset to null each time the control is drawn. Since filtering makes extensive use of it is recommended to use a collection that is optimized for fast look ups such as for better performance. Examples Exclude a specific type from being selected: private SerializedProperty someTypeReferenceProperty; public override void OnInspectorGUI() { serializedObject.Update(); ClassTypeReferencePropertyDrawer.ExcludedTypeCollectionGetter = GetExcludedTypeCollection; EditorGUILayout.PropertyField(someTypeReferenceProperty); serializedObject.ApplyModifiedProperties(); } private ICollection<Type> GetExcludedTypeCollection() { var set = new HashSet<Type>(); set.Add(typeof(SpecialClassToHideInDropdown)); return set; } Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.Vector3RangePropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers.Vector3RangePropertyDrawer.html",
    "title": "Class Vector3RangePropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class Vector3RangePropertyDrawer Custom property drawer for decorated values rendered in the inspector. Inheritance Object Vector3RangePropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class Vector3RangePropertyDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityDictationSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityDictationSystem.html",
    "title": "Interface IMixedRealityDictationSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDictationSystem Mixed Reality Toolkit controller definition, used to manage a specific controller type Inherited Members IMixedRealityDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDictationSystem : IMixedRealityDeviceManager, IMixedRealityExtensionService, IMixedRealityService, IDisposable Properties IsListening Is the system currently listing to dictation input? Declaration bool IsListening { get; } Property Value Type Description Boolean Methods StartRecording(GameObject, Single, Single, Int32, String) Turns on the dictation recognizer and begins recording audio from the default microphone. Declaration void StartRecording(GameObject listener, float initialSilenceTimeout = 5F, float autoSilenceTimeout = 20F, int recordingTime = 10, string micDeviceName = \"\") Parameters Type Name Description GameObject listener GameObject listening for the dictation input. Single initialSilenceTimeout The time length in seconds before dictation recognizer session ends due to lack of audio input in case there was no audio heard in the current session. Single autoSilenceTimeout The time length in seconds before dictation recognizer session ends due to lack of audio input. Int32 recordingTime Length in seconds for the manager to listen. String micDeviceName Optional: The microphone device to listen to. StartRecordingAsync(GameObject, Single, Single, Int32, String) Turns on the dictation recognizer and begins recording audio from the default microphone. Declaration Task StartRecordingAsync(GameObject listener, float initialSilenceTimeout = 5F, float autoSilenceTimeout = 20F, int recordingTime = 10, string micDeviceName = \"\") Parameters Type Name Description GameObject listener GameObject listening for the dictation input. Single initialSilenceTimeout The time length in seconds before dictation recognizer session ends due to lack of audio input in case there was no audio heard in the current session. Single autoSilenceTimeout The time length in seconds before dictation recognizer session ends due to lack of audio input. Int32 recordingTime Length in seconds for the manager to listen. String micDeviceName Optional: The microphone device to listen to. Returns Type Description Task StopRecording() Ends the recording session. Declaration void StopRecording() StopRecordingAsync() Ends the recording session. Declaration Task<AudioClip> StopRecordingAsync() Returns Type Description Task < AudioClip > of the last recording session."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealitySpeechSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealitySpeechSystem.html",
    "title": "Interface IMixedRealitySpeechSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpeechSystem Mixed Reality Toolkit controller definition, used to manage a specific controller type Inherited Members IMixedRealityDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpeechSystem : IMixedRealityDeviceManager, IMixedRealityExtensionService, IMixedRealityService, IDisposable Properties IsRecognitionActive Query whether or not the speech system is active Declaration bool IsRecognitionActive { get; } Property Value Type Description Boolean Methods StartRecognition() Make sure the keyword recognizer is on, then stop it. Otherwise, leave it alone because it's already in the desired state. Declaration void StartRecognition() StopRecognition() Make sure the keyword recognizer is on, then stop it. Otherwise, leave it alone because it's already in the desired state. Declaration void StopRecognition()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityController.html",
    "title": "Interface IMixedRealityController | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityController Mixed Reality Toolkit controller definition, used to manage a specific controller type Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityController Properties ControllerHandedness The designated hand that the Input Source is managing, as defined by the SDK / Unity. Declaration Handedness ControllerHandedness { get; } Property Value Type Description Handedness Enabled Is the controller enabled? Declaration bool Enabled { get; set; } Property Value Type Description Boolean InputSource The registered Input Source for this controller Declaration IMixedRealityInputSource InputSource { get; } Property Value Type Description IMixedRealityInputSource Interactions Mapping definition for this controller, linking the Physical inputs to logical Input System Actions Declaration MixedRealityInteractionMapping[] Interactions { get; } Property Value Type Description MixedRealityInteractionMapping [] IsPositionApproximate Indicates the accuracy of the position data being reported. Declaration bool IsPositionApproximate { get; } Property Value Type Description Boolean IsPositionAvailable Indicates that this controller is currently providing position data. Declaration bool IsPositionAvailable { get; } Property Value Type Description Boolean Remarks This value may change during usage for some controllers. As a best practice, be sure to check this value before using position data. IsRotationAvailable Indicates that this controller is currently providing rotation data. Declaration bool IsRotationAvailable { get; } Property Value Type Description Boolean Remarks This value may change during usage for some controllers. As a best practice, be sure to check this value before using rotation data. TrackingState Outputs the current state of the Input Source, whether it is tracked or not. As defined by the SDK / Unity. Declaration TrackingState TrackingState { get; } Property Value Type Description TrackingState Visualizer The controller's \"Visual\" in the scene. Declaration IMixedRealityControllerVisualizer Visualizer { get; } Property Value Type Description IMixedRealityControllerVisualizer"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityControllerPoseSynchronizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.IMixedRealityControllerPoseSynchronizer.html",
    "title": "Interface IMixedRealityControllerPoseSynchronizer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityControllerPoseSynchronizer Basic interface for synchronizing to a controller pose. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityControllerPoseSynchronizer : IMixedRealitySourcePoseHandler, IMixedRealityInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose> Properties Controller The current controller reference. Declaration IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController DestroyOnSourceLost Should this clean itself up when it's controller is lost? Declaration bool DestroyOnSourceLost { get; set; } Property Value Type Description Boolean Remarks It's up to the implementation to properly destroy the 's this interface will implement. Handedness The controller handedness to synchronize with. Declaration Handedness Handedness { get; } Property Value Type Description Handedness PoseAction The input action that will drive the Transform's pose, position, or rotation. Declaration MixedRealityInputAction PoseAction { get; set; } Property Value Type Description MixedRealityInputAction UseSourcePoseData Should the Transform's position be driven from the source pose or from input handler? Declaration bool UseSourcePoseData { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealitySourceStateHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealitySourceStateHandler.html",
    "title": "Interface IMixedRealitySourceStateHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySourceStateHandler Interface to implement to react to source state changes, such as when an input source is detected or lost. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySourceStateHandler : IEventSystemHandler Methods OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealitySpatialInputHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers.IMixedRealitySpatialInputHandler.html",
    "title": "Interface IMixedRealitySpatialInputHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialInputHandler Interface to implement for spatial input position and rotation. Inherited Members IMixedRealityInputHandler.OnInputUp(InputEventData) IMixedRealityInputHandler.OnInputDown(InputEventData) IMixedRealityInputHandler.OnInputPressed(InputEventData<Single>) IMixedRealityInputHandler.OnPositionInputChanged(InputEventData<Vector2>) Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.Handlers Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Use IMixedRealityInputHandler<T>\")] public interface IMixedRealitySpatialInputHandler : IMixedRealityInputHandler, IEventSystemHandler Methods OnPoseInputChanged(InputEventData<MixedRealityPose>) Raised when the input source's position and rotation has changed. The is the current input position. Declaration [Obsolete(\"Use IMixedRealityInputHandler<MixedRealityPose>.OnInputChanged(InputEventData<MixedRealityPose> eventData)\")] void OnPoseInputChanged(InputEventData<MixedRealityPose> eventData) Parameters Type Name Description InputEventData < MixedRealityPose > eventData OnPositionChanged(InputEventData<Vector3>) Raised when the input source's position has changed. The is the current input position. Declaration [Obsolete(\"Use IMixedRealityInputHandler<Vector3>.OnInputChanged(InputEventData<Vector3> eventData)\")] void OnPositionChanged(InputEventData<Vector3> eventData) Parameters Type Name Description InputEventData < Vector3 > eventData OnRotationChanged(InputEventData<Quaternion>) Raised when the input source's rotation has changed. The is the current input rotation. Declaration [Obsolete(\"Use IMixedRealityInputHandler<Quaternion>.OnInputChanged(InputEventData<Quaternion> eventData)\")] void OnRotationChanged(InputEventData<Quaternion> eventData) Parameters Type Name Description InputEventData < Quaternion > eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleQuaternionAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleQuaternionAxis.html",
    "title": "Struct InputActionRuleQuaternionAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleQuaternionAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Quaternion > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InputActionRuleQuaternionAxis : IInputActionRule<Quaternion> Constructors InputActionRuleQuaternionAxis(MixedRealityInputAction, MixedRealityInputAction, Quaternion) Constructor. Declaration public InputActionRuleQuaternionAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, Quaternion criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Quaternion criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public Quaternion Criteria { get; } Property Value Type Description Quaternion RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.PointerOption.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.PointerOption.html",
    "title": "Struct PointerOption | Mixed Reality Toolkit Documentation",
    "keywords": "Struct PointerOption Defines a pointer option to assign to a controller. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct PointerOption Constructors PointerOption(IMixedRealityController, Handedness, GameObject) Constructor. Declaration public PointerOption(IMixedRealityController controllerType, Handedness handedness, GameObject pointerPrefab) Parameters Type Name Description IMixedRealityController controllerType Handedness handedness GameObject pointerPrefab Properties ControllerType The type of Controller this pointer will attach itself to at runtime. Declaration public SystemType ControllerType { get; } Property Value Type Description SystemType Remarks If None is selected, then it will attach to any controller type Handedness Defines which hand to create the pointer prefab on. Declaration public Handedness Handedness { get; } Property Value Type Description Handedness PointerPrefab Declaration public GameObject PointerPrefab { get; } Property Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Lines | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Definitions.Lines Enums DistortionMode How to apply the distortion along the line. InterpolationMode Default options for how to distribute interpolated points in a line renderer InterpolationType Defines the type of interpolation to use when calculating a spline. LinePointTransformMode Defines how a base line data provider will transform its points LineRotationMode Defines how to calculate the line's rotation at any given point. PointDistributionMode Defines how to get an interpolated point along a line StepMode Defines how to generate points in a line renderer"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.RaycastMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.RaycastMode.html",
    "title": "Enum RaycastMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum RaycastMode Defines the different ways raycasting can be done. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Physics Assembly : cs.temp.dll.dll Syntax public enum RaycastMode Fields Name Description Box Complex raycast from multiple points using a box collider. Simple Use a simple raycast from a single point in a given direction. Sphere Use Sphere cast."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.AnimatorParameter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.AnimatorParameter.html",
    "title": "Struct AnimatorParameter | Mixed Reality Toolkit Documentation",
    "keywords": "Struct AnimatorParameter A copy of the because that class is not Serializable and cannot be modified in the editor. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public struct AnimatorParameter Constructors AnimatorParameter(String, AnimatorControllerParameterType, Int32, Single, Boolean) Constructor. Declaration public AnimatorParameter(string name, AnimatorControllerParameterType parameterType, int defaultInt = 0, float defaultFloat = 0F, bool defaultBool = false) Parameters Type Name Description String name Name of the animation parameter to modify. AnimatorControllerParameterType parameterType Type of the animation parameter to modify. Int32 defaultInt If the animation parameter type is an int, value to set. Ignored otherwise. Single defaultFloat If the animation parameter type is a float, value to set. Ignored otherwise. Boolean defaultBool \"If the animation parameter type is a bool, value to set. Ignored otherwise. Properties DefaultBool If the animation parameter type is a bool, value to set. Ignored otherwise. Declaration public bool DefaultBool { get; } Property Value Type Description Boolean DefaultFloat If the animation parameter type is a float, value to set. Ignored otherwise. Declaration public float DefaultFloat { get; } Property Value Type Description Single DefaultInt If the animation parameter type is an int, value to set. Ignored otherwise. Declaration public int DefaultInt { get; } Property Value Type Description Int32 Name Name of the animation parameter to modify. Declaration public string Name { get; } Property Value Type Description String NameHash Animator Name String to Hash. Declaration public int NameHash { get; } Property Value Type Description Int32 ParameterType Type of the animation parameter to modify. Declaration public AnimatorControllerParameterType ParameterType { get; } Property Value Type Description AnimatorControllerParameterType"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.MixedRealityPose.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.MixedRealityPose.html",
    "title": "Struct MixedRealityPose | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityPose Implements IEqualityComparer Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MixedRealityPose : IEqualityComparer Constructors MixedRealityPose(Quaternion) Constructor. Declaration public MixedRealityPose(Quaternion rotation) Parameters Type Name Description Quaternion rotation MixedRealityPose(Vector3) Constructor. Declaration public MixedRealityPose(Vector3 position) Parameters Type Name Description Vector3 position MixedRealityPose(Vector3, Quaternion) Constructor. Declaration public MixedRealityPose(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Quaternion rotation Properties Position Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 Rotation Declaration public Quaternion Rotation { get; set; } Property Value Type Description Quaternion ZeroIdentity The default value for a Six Dof Transform. Declaration public static MixedRealityPose ZeroIdentity { get; } Property Value Type Description MixedRealityPose and . Methods Equals(MixedRealityPose) Declaration public bool Equals(MixedRealityPose other) Parameters Type Name Description MixedRealityPose other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(MixedRealityPose, MixedRealityPose) Declaration public static MixedRealityPose operator +(MixedRealityPose left, MixedRealityPose right) Parameters Type Name Description MixedRealityPose left MixedRealityPose right Returns Type Description MixedRealityPose Equality(MixedRealityPose, MixedRealityPose) Declaration public static bool operator ==(MixedRealityPose left, MixedRealityPose right) Parameters Type Name Description MixedRealityPose left MixedRealityPose right Returns Type Description Boolean Inequality(MixedRealityPose, MixedRealityPose) Declaration public static bool operator !=(MixedRealityPose left, MixedRealityPose right) Parameters Type Name Description MixedRealityPose left MixedRealityPose right Returns Type Description Boolean Implements IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.BaseInputEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.BaseInputEventData.html",
    "title": "Class BaseInputEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseInputEventData Base class of all Input Events. Inheritance Object BaseInputEventData DictationEventData InputEventData SourceStateEventData SpeechEventData Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseInputEventData : BaseEventData Constructors BaseInputEventData(EventSystem) Constructor. Declaration protected BaseInputEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties EventTime The time at which the event occurred. Declaration public DateTime EventTime { get; } Property Value Type Description DateTime Remarks The value will be in the device's configured time zone. InputSource The source the input event originates from. Declaration public IMixedRealityInputSource InputSource { get; } Property Value Type Description IMixedRealityInputSource MixedRealityInputAction The Input Action for this event. Declaration public MixedRealityInputAction MixedRealityInputAction { get; } Property Value Type Description MixedRealityInputAction SourceId The id of the source the event is from, for instance the hand id. Declaration public uint SourceId { get; } Property Value Type Description UInt32 Methods BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Used to initialize/reset the event and populate the data. Declaration protected void BaseInitialize(IMixedRealityInputSource inputSource, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource inputSource MixedRealityInputAction inputAction"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.DictationEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.DictationEventData.html",
    "title": "Class DictationEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class DictationEventData Describes an Input Event with voice dictation. Inheritance Object BaseInputEventData DictationEventData Inherited Members BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Assembly : cs.temp.dll.dll Syntax public class DictationEventData : BaseInputEventData Constructors DictationEventData(EventSystem) Constructor. Declaration public DictationEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties DictationAudioClip Audio Clip of the last Dictation recording Session. Declaration public AudioClip DictationAudioClip { get; } Property Value Type Description AudioClip DictationResult String result of the current dictation. Declaration public string DictationResult { get; } Property Value Type Description String Methods Initialize(IMixedRealityInputSource, String, AudioClip) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityInputSource inputSource, string dictationResult, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource inputSource String dictationResult AudioClip dictationAudioClip"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.GameObjectExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class GameObjectExtensions Extension methods for Unity's GameObject class Inheritance Object GameObjectExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtensions Methods ApplyLayerCacheRecursively(GameObject, Dictionary<GameObject, Int32>) Reapplies previously cached hierarchy layers Declaration public static void ApplyLayerCacheRecursively(this GameObject root, Dictionary<GameObject, int> cache) Parameters Type Name Description GameObject root Start point of the traverse Dictionary < GameObject , Int32 > cache The previously set layer for each object ApplyToHierarchy(GameObject, Action<GameObject>) Apply the specified delegate to all objects in the hierarchy under a specified game object. Declaration public static void ApplyToHierarchy(this GameObject root, Action<GameObject> action) Parameters Type Name Description GameObject root Root game object of the hierarchy. Action < GameObject > action Delegate to apply. FindAncestorComponent<T>(GameObject, Boolean) Find the first component of type T in the ancestors of the specified game object. Declaration public static T FindAncestorComponent<T>(this GameObject gameObject, bool includeSelf = true) where T : Component Parameters Type Name Description GameObject gameObject Game object for which ancestors must be considered. Boolean includeSelf Indicates whether the specified game object should be included. Returns Type Description T The component of type T . Null if it none was found. Type Parameters Name Description T Type of component to find. ForEachComponent<T>(GameObject, Action<T>) Perform an action on every component of type T that is on this GameObject Declaration public static void ForEachComponent<T>(this GameObject gameObject, Action<T> action) Parameters Type Name Description GameObject gameObject this gameObject Action <T> action Action to perform. Type Parameters Name Description T Component Type IsInLayerMask(GameObject, LayerMask) Determines whether or not a game object's layer is included in the specified layer mask. Declaration public static bool IsInLayerMask(this GameObject gameObject, LayerMask layerMask) Parameters Type Name Description GameObject gameObject The game object whose layer to test. LayerMask layerMask The layer mask to test against. Returns Type Description Boolean True if gameObject 's layer is included in layerMask , false otherwise. SetChildrenActive(GameObject, Boolean) Declaration public static void SetChildrenActive(this GameObject root, bool isActive) Parameters Type Name Description GameObject root Boolean isActive SetLayerRecursively(GameObject, Int32) Set the layer to the given object and the full hierarchy below it. Declaration public static void SetLayerRecursively(this GameObject root, int layer) Parameters Type Name Description GameObject root Start point of the traverse Int32 layer The layer to apply SetLayerRecursively(GameObject, Int32, out Dictionary<GameObject, Int32>) Set the layer to the given object and the full hierarchy below it and cache the previous layers in the out parameter. Declaration public static void SetLayerRecursively(this GameObject root, int layer, out Dictionary<GameObject, int> cache) Parameters Type Name Description GameObject root Start point of the traverse Int32 layer The layer to apply Dictionary < GameObject , Int32 > cache The previously set layer for each object"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.InteractionSourceExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.InteractionSourceExtensions.html",
    "title": "Class InteractionSourceExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractionSourceExtensions Extensions for the InteractionSource class to add haptics and expose the renderable model. Inheritance Object InteractionSourceExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class InteractionSourceExtensions"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorFieldsUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.InspectorFieldsUtility.html",
    "title": "Class InspectorFieldsUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorFieldsUtility A collection of helper functions for adding InspectorFields to a custom Inspector Inheritance Object InspectorFieldsUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities Assembly : cs.temp.dll.dll Syntax public static class InspectorFieldsUtility Methods DisplayPropertyField(SerializedProperty) Render a PropertySettings UI field based on the InspectorField Settings Declaration public static void DisplayPropertyField(SerializedProperty prop) Parameters Type Name Description SerializedProperty prop IsPropertyType(SerializedProperty, InspectorField.FieldTypes) Checks the type a property field and returns if it matches the passed in type Declaration public static bool IsPropertyType(SerializedProperty prop, InspectorField.FieldTypes type) Parameters Type Name Description SerializedProperty prop InspectorField.FieldTypes type Returns Type Description Boolean PropertySettingsList(SerializedProperty, List<InspectorFieldData>) Create a new list of serialized PropertySettings from InspectorFields Declaration public static void PropertySettingsList(SerializedProperty settings, List<InspectorFieldData> data) Parameters Type Name Description SerializedProperty settings List < InspectorFieldData > data UpdatePropertySettings(SerializedProperty, Int32, Object) Update a property value in a serialized PropertySettings Declaration public static void UpdatePropertySettings(SerializedProperty prop, int type, object update) Parameters Type Name Description SerializedProperty prop Int32 type Object update"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleDigital.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRuleDigital.html",
    "title": "Struct InputActionRuleDigital | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleDigital Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Boolean > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InputActionRuleDigital : IInputActionRule<bool> Constructors InputActionRuleDigital(MixedRealityInputAction, MixedRealityInputAction, Boolean) Constructor. Declaration public InputActionRuleDigital(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, bool criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Boolean criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public bool Criteria { get; } Property Value Type Description Boolean RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.MixedRealitySpatialAwarenessMeshObserverProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.MixedRealitySpatialAwarenessMeshObserverProfile.html",
    "title": "Class MixedRealitySpatialAwarenessMeshObserverProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessMeshObserverProfile Configuration profile settings for spatial awareness mesh observers. Inheritance Object BaseMixedRealityProfile MixedRealitySpatialAwarenessMeshObserverProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessMeshObserverProfile : BaseMixedRealityProfile Properties DisplayOption Indicates how the mesh subsystem is to display surface meshes within the application. Declaration public SpatialAwarenessMeshDisplayOptions DisplayOption { get; } Property Value Type Description SpatialAwarenessMeshDisplayOptions IsStationaryObserver Indicates whether or not the spatial observer is to remain in a fixed location. Declaration public bool IsStationaryObserver { get; } Property Value Type Description Boolean LevelOfDetail The level of detail used when creating the mesh. Declaration public SpatialAwarenessMeshLevelOfDetail LevelOfDetail { get; } Property Value Type Description SpatialAwarenessMeshLevelOfDetail MeshPhysicsLayer The Unity Physics Layer on which to set observed meshes. Declaration public int MeshPhysicsLayer { get; } Property Value Type Description Int32 ObservationExtents The size of the volume, in meters per axis, from which individual observations will be made. Declaration public Vector3 ObservationExtents { get; } Property Value Type Description Vector3 ObserverVolumeType The shape (ex: axis aligned cube) of the observation volume. Declaration public VolumeType ObserverVolumeType { get; } Property Value Type Description VolumeType OcclusionMaterial The material to be used when observed meshes should occlude other objects. Declaration public Material OcclusionMaterial { get; } Property Value Type Description Material RecalculateNormals Indicates if the spatial awareness system to generate normal for the returned meshes as some platforms may not support returning normal along with the spatial mesh. Declaration public bool RecalculateNormals { get; } Property Value Type Description Boolean StartupBehavior Indicates if the observer is to start immediately or wait for manual startup. Declaration public AutoStartBehavior StartupBehavior { get; } Property Value Type Description AutoStartBehavior TrianglesPerCubicMeter The level of detail, in triangles per cubic meter, for the returned spatial mesh. Declaration public int TrianglesPerCubicMeter { get; } Property Value Type Description Int32 Remarks This value is ignored, unless LevelOfDetail is set to Custom. UpdateInterval The frequency, in seconds, at which the spatial observer updates. Declaration public float UpdateInterval { get; } Property Value Type Description Single VisibleMaterial The material to be used when displaying observed meshes. Declaration public Material VisibleMaterial { get; } Property Value Type Description Material"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics.IMixedRealityDiagnosticsSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics.IMixedRealityDiagnosticsSystem.html",
    "title": "Interface IMixedRealityDiagnosticsSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDiagnosticsSystem The interface contract that defines the Diagnostics system in the Mixed Reality Toolkit Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDiagnosticsSystem : IMixedRealityEventSystem, IMixedRealityEventSource Properties ShowDiagnostics Enable / disable diagnostic display. Declaration bool ShowDiagnostics { get; set; } Property Value Type Description Boolean Remarks When set to true, visibility settings for individual diagnostics are honored. When set to false, all visualizations are hidden. ShowProfiler Enable / disable the profiler display Declaration bool ShowProfiler { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics Interfaces IMixedRealityDiagnosticsHandler IMixedRealityDiagnosticsSystem The interface contract that defines the Diagnostics system in the Mixed Reality Toolkit"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityInputSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityInputSystem.html",
    "title": "Interface IMixedRealityInputSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputSystem Manager interface for a Input system in the Mixed Reality Toolkit All replacement systems for providing Input System functionality should derive from this interface Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputSystem : IMixedRealityEventSystem Properties DetectedControllers List of s currently detected by the input manager. Declaration HashSet<IMixedRealityController> DetectedControllers { get; } Property Value Type Description HashSet < IMixedRealityController > Remarks This property is similar to DetectedInputSources , as this is a subset of those IMixedRealityInputSource s in that list. DetectedInputSources List of the Interaction Input Sources as detected by the input manager like hands or motion controllers. Declaration HashSet<IMixedRealityInputSource> DetectedInputSources { get; } Property Value Type Description HashSet < IMixedRealityInputSource > FocusProvider The current Focus Provider that's been implemented by this Input System. Declaration IMixedRealityFocusProvider FocusProvider { get; } Property Value Type Description IMixedRealityFocusProvider GazeProvider The current Gaze Provider that's been implemented by this Input System. Declaration IMixedRealityGazeProvider GazeProvider { get; } Property Value Type Description IMixedRealityGazeProvider IsInputEnabled Indicates if input is currently enabled or not. Declaration bool IsInputEnabled { get; } Property Value Type Description Boolean Methods ClearFallbackInputStack() Clear all fallback input handlers off the stack. Declaration void ClearFallbackInputStack() ClearInputDisableStack() Clear the input disable stack, which will immediately re-enable input. Declaration void ClearInputDisableStack() ClearModalInputStack() Clear all modal input handlers off the stack. Declaration void ClearModalInputStack() GenerateNewSourceId() Generates a new unique input source id. All Input Sources are required to call this method in their constructor or initialization. Declaration uint GenerateNewSourceId() Returns Type Description UInt32 a new unique Id for the input source. PopFallbackInputHandler() Remove the last game object from the fallback input stack. Declaration void PopFallbackInputHandler() PopInputDisable() Pop disabled input state. When the last disabled state is popped off the stack input will be re-enabled. Declaration void PopInputDisable() PopModalInputHandler() Remove the last game object from the modal input stack. Declaration void PopModalInputHandler() PushFallbackInputHandler(GameObject) Push a game object into the fallback input stack. Any input handlers on the game object are given input events when no modal or focused objects consume the event. Declaration void PushFallbackInputHandler(GameObject inputHandler) Parameters Type Name Description GameObject inputHandler The input handler to push PushInputDisable() Push a disabled input state onto the Input System. While input is disabled no events will be sent out and the cursor displays a waiting animation. Declaration void PushInputDisable() PushModalInputHandler(GameObject) Push a game object into the modal input stack. Any input handlers on the game object are given priority to input events before any focused objects. Declaration void PushModalInputHandler(GameObject inputHandler) Parameters Type Name Description GameObject inputHandler The input handler to push RaiseDictationComplete(IMixedRealityInputSource, String, AudioClip) Declaration void RaiseDictationComplete(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseDictationError(IMixedRealityInputSource, String, AudioClip) Declaration void RaiseDictationError(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseDictationHypothesis(IMixedRealityInputSource, String, AudioClip) Declaration void RaiseDictationHypothesis(IMixedRealityInputSource source, string dictationHypothesis, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationHypothesis AudioClip dictationAudioClip RaiseDictationResult(IMixedRealityInputSource, String, AudioClip) Declaration void RaiseDictationResult(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseFocusChanged(IMixedRealityPointer, GameObject, GameObject) Raise the focus changed event. Declaration void RaiseFocusChanged(IMixedRealityPointer pointer, GameObject oldFocusedObject, GameObject newFocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that the focus change event is raised on. GameObject oldFocusedObject The old focused object. GameObject newFocusedObject The new focused object. RaiseFocusEnter(IMixedRealityPointer, GameObject) Raise the focus enter event. Declaration void RaiseFocusEnter(IMixedRealityPointer pointer, GameObject focusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that has focus. GameObject focusedObject The that the pointer has entered focus on. RaiseFocusExit(IMixedRealityPointer, GameObject) Raise the focus exit event. Declaration void RaiseFocusExit(IMixedRealityPointer pointer, GameObject unfocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that has lost focus. GameObject unfocusedObject The that the pointer has exited focus on. RaiseGestureCanceled(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Canceled Event. Declaration void RaiseGestureCanceled(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, MixedRealityPose) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action MixedRealityPose inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Quaternion) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Quaternion inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Quaternion inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Vector2) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Vector2 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector2 inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Vector3) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Vector3 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector3 inputData RaiseGestureStarted(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Started Event. Declaration void RaiseGestureStarted(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, MixedRealityPose) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action MixedRealityPose inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Quaternion) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Quaternion inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Quaternion inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Vector2) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Vector2 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector2 inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Vector3) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Vector3 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector3 inputData RaiseOnInputDown(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Raise the input down event. Declaration void RaiseOnInputDown(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction RaiseOnInputDown(IMixedRealityInputSource, MixedRealityInputAction) Raise the input down event. Declaration void RaiseOnInputDown(IMixedRealityInputSource source, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction RaiseOnInputPressed(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Raise Input Pressed. Declaration void RaiseOnInputPressed(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction RaiseOnInputPressed(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Single) Raise Input Pressed. Declaration void RaiseOnInputPressed(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, float pressAmount) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Single pressAmount RaiseOnInputPressed(IMixedRealityInputSource, MixedRealityInputAction) Raise Input Pressed. Declaration void RaiseOnInputPressed(IMixedRealityInputSource source, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction RaiseOnInputPressed(IMixedRealityInputSource, MixedRealityInputAction, Single) Raise Input Pressed. Declaration void RaiseOnInputPressed(IMixedRealityInputSource source, MixedRealityInputAction inputAction, float pressAmount) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction Single pressAmount RaiseOnInputUp(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Raise the input up event. Declaration void RaiseOnInputUp(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction RaiseOnInputUp(IMixedRealityInputSource, MixedRealityInputAction) Raise the input up event. Declaration void RaiseOnInputUp(IMixedRealityInputSource source, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction RaisePointerClicked(IMixedRealityPointer, Handedness, MixedRealityInputAction, Int32) Raise the pointer clicked event. Declaration [Obsolete(\"Use RaisePointerClicked(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, int count, Handedness handedness = Handedness.None, IMixedRealityInputSource inputSource = null)\")] void RaisePointerClicked(IMixedRealityPointer pointer, Handedness handedness, MixedRealityInputAction inputAction, int count) Parameters Type Name Description IMixedRealityPointer pointer Handedness handedness MixedRealityInputAction inputAction Int32 count RaisePointerClicked(IMixedRealityPointer, MixedRealityInputAction, Int32, Handedness, IMixedRealityInputSource) Raise the pointer clicked event. Declaration void RaisePointerClicked(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, int count, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer MixedRealityInputAction inputAction Int32 count Handedness handedness IMixedRealityInputSource inputSource RaisePointerDown(IMixedRealityPointer, Handedness, MixedRealityInputAction) Raise the pointer down event. Declaration [Obsolete(\"Use RaisePointerDown(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = Handedness.None, IMixedRealityInputSource inputSource = null)\")] void RaisePointerDown(IMixedRealityPointer pointer, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityPointer pointer The pointer where the event originates. Handedness handedness The handedness of the event. MixedRealityInputAction inputAction RaisePointerDown(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource) Raise the pointer down event. Declaration void RaisePointerDown(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer The pointer where the event originates. MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource RaisePointerUp(IMixedRealityPointer, Handedness, MixedRealityInputAction) Raise the pointer up event. Declaration [Obsolete(\"Use RaisePointerUp(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = Handedness.None, IMixedRealityInputSource inputSource = null)\")] void RaisePointerUp(IMixedRealityPointer pointer, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityPointer pointer Handedness handedness MixedRealityInputAction inputAction RaisePointerUp(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource) Raise the pointer up event. Declaration void RaisePointerUp(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource RaisePoseInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, MixedRealityPose) Raise the 6 degrees of freedom input event. Declaration void RaisePoseInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction MixedRealityPose inputData RaisePoseInputChanged(IMixedRealityInputSource, MixedRealityInputAction, MixedRealityPose) Raise the 6 degrees of freedom input event. Declaration void RaisePoseInputChanged(IMixedRealityInputSource source, MixedRealityInputAction inputAction, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction MixedRealityPose inputData RaisePositionInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Vector2) Raise the 2 degrees of freedom input event. Declaration void RaisePositionInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Vector2 position) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Vector2 position RaisePositionInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Vector3) Raise the 3 degrees of freedom input event. Declaration void RaisePositionInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Vector3 position) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Vector3 position RaisePositionInputChanged(IMixedRealityInputSource, MixedRealityInputAction, Vector2) Raise the 2 degrees of freedom input event. Declaration void RaisePositionInputChanged(IMixedRealityInputSource source, MixedRealityInputAction inputAction, Vector2 position) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction Vector2 position RaisePositionInputChanged(IMixedRealityInputSource, MixedRealityInputAction, Vector3) Raise the 3 degrees of freedom input event. Declaration void RaisePositionInputChanged(IMixedRealityInputSource source, MixedRealityInputAction inputAction, Vector3 position) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction Vector3 position RaisePreFocusChanged(IMixedRealityPointer, GameObject, GameObject) Raise the pre-focus changed event. This event is useful for doing logic before the focus changed event. Declaration void RaisePreFocusChanged(IMixedRealityPointer pointer, GameObject oldFocusedObject, GameObject newFocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that the focus change event is raised on. GameObject oldFocusedObject The old focused object. GameObject newFocusedObject The new focused object. RaiseRotationInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Quaternion) Raise the 3 degrees of freedom input event. Declaration void RaiseRotationInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Quaternion rotation) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Quaternion rotation RaiseRotationInputChanged(IMixedRealityInputSource, MixedRealityInputAction, Quaternion) Raise the 3 degrees of freedom input event. Declaration void RaiseRotationInputChanged(IMixedRealityInputSource source, MixedRealityInputAction inputAction, Quaternion rotation) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction Quaternion rotation RaiseSourceDetected(IMixedRealityInputSource, IMixedRealityController) Raise the event that the Input Source was detected. Declaration void RaiseSourceDetected(IMixedRealityInputSource source, IMixedRealityController controller = null) Parameters Type Name Description IMixedRealityInputSource source The detected Input Source. IMixedRealityController controller RaiseSourceLost(IMixedRealityInputSource, IMixedRealityController) Raise the event that the Input Source was lost. Declaration void RaiseSourceLost(IMixedRealityInputSource source, IMixedRealityController controller = null) Parameters Type Name Description IMixedRealityInputSource source The lost Input Source. IMixedRealityController controller RaiseSourcePoseChanged(IMixedRealityInputSource, IMixedRealityController, MixedRealityPose) Raise the event that the Input Source position was changed. Declaration void RaiseSourcePoseChanged(IMixedRealityInputSource source, IMixedRealityController controller, MixedRealityPose position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller MixedRealityPose position RaiseSourcePositionChanged(IMixedRealityInputSource, IMixedRealityController, Vector2) Raise the event that the Input Source position was changed. Declaration void RaiseSourcePositionChanged(IMixedRealityInputSource source, IMixedRealityController controller, Vector2 position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Vector2 position RaiseSourcePositionChanged(IMixedRealityInputSource, IMixedRealityController, Vector3) Raise the event that the Input Source position was changed. Declaration void RaiseSourcePositionChanged(IMixedRealityInputSource source, IMixedRealityController controller, Vector3 position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Vector3 position RaiseSourceRotationChanged(IMixedRealityInputSource, IMixedRealityController, Quaternion) Raise the event that the Input Source position was changed. Declaration void RaiseSourceRotationChanged(IMixedRealityInputSource source, IMixedRealityController controller, Quaternion rotation) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Quaternion rotation RaiseSourceTrackingStateChanged(IMixedRealityInputSource, IMixedRealityController, TrackingState) Raise the event that the Input Source's tracking state has changed. Declaration void RaiseSourceTrackingStateChanged(IMixedRealityInputSource source, IMixedRealityController controller, TrackingState state) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller TrackingState state RaiseSpeechCommandRecognized(IMixedRealityInputSource, MixedRealityInputAction, RecognitionConfidenceLevel, TimeSpan, DateTime, String) Declaration void RaiseSpeechCommandRecognized(IMixedRealityInputSource source, MixedRealityInputAction inputAction, RecognitionConfidenceLevel confidence, TimeSpan phraseDuration, DateTime phraseStartTime, string text) Parameters Type Name Description IMixedRealityInputSource source MixedRealityInputAction inputAction RecognitionConfidenceLevel confidence TimeSpan phraseDuration DateTime phraseStartTime String text RequestNewGenericInputSource(String, IMixedRealityPointer[]) Declaration IMixedRealityInputSource RequestNewGenericInputSource(string name, IMixedRealityPointer[] pointers = null) Parameters Type Name Description String name IMixedRealityPointer [] pointers Returns Type Description IMixedRealityInputSource Events InputDisabled Event that's raised when the Input is disabled. Declaration event Action InputDisabled Event Type Type Description Action InputEnabled Event that's raised when the Input is enabled. Declaration event Action InputEnabled Event Type Type Description Action"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.RadialViewReferenceDirection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.RadialViewReferenceDirection.html",
    "title": "Enum RadialViewReferenceDirection | Mixed Reality Toolkit Documentation",
    "keywords": "Enum RadialViewReferenceDirection Which direction to orient the radial view object. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum RadialViewReferenceDirection Fields Name Description FacingWorldUp Orient toward the target but ignore roll GravityAligned Orient towards the target but remain vertical or gravity aligned ObjectOriented Orient towards the target including roll, pitch and yaw"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Diagnostics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Diagnostics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.Diagnostics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.Diagnostics Classes DiagnosticsEventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Teleport.TeleportEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Teleport.TeleportEventData.html",
    "title": "Class TeleportEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class TeleportEventData Describes a Teleportation Event. Inheritance Object GenericBaseEventData TeleportEventData Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Teleport Assembly : cs.temp.dll.dll Syntax public class TeleportEventData : GenericBaseEventData Constructors TeleportEventData(EventSystem) Constructor. Declaration public TeleportEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be Properties HotSpot The teleport hot spot. Declaration public IMixedRealityTeleportHotSpot HotSpot { get; } Property Value Type Description IMixedRealityTeleportHotSpot Pointer The pointer that raised the event. Declaration public IMixedRealityPointer Pointer { get; } Property Value Type Description IMixedRealityPointer Methods Initialize(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot target) Parameters Type Name Description IMixedRealityPointer pointer IMixedRealityTeleportHotSpot target"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.ComparerExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.ComparerExtensions.html",
    "title": "Class ComparerExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ComparerExtensions Extension methods for .Net Comparer's Inheritance Object ComparerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class ComparerExtensions Methods GetReversed<TElement>(IComparer<TElement>) Gets a comparer that sorts elements in the opposite order of the original comparer. Declaration public static IComparer<TElement> GetReversed<TElement>(this IComparer<TElement> originalComparer) Parameters Type Name Description IComparer <TElement> originalComparer The comparer whose order should be reversed. Returns Type Description IComparer <TElement> A comparer that sorts elements in the opposite order of originalComparer . Type Parameters Name Description TElement The type of element the comparer compares."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.ParabolaLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders.ParabolaLineDataProvider.html",
    "title": "Class ParabolaLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolaLineDataProvider Base Parabola line data provider. Inheritance Object BaseMixedRealityLineDataProvider ParabolaLineDataProvider ParabolaConstrainedLineDataProvider ParabolaPhysicalLineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.PointCount BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3) BaseMixedRealityLineDataProvider.GetPointInternal(Single) BaseMixedRealityLineDataProvider.GetPointInternal(Int32) BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.Update() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.DataProviders Assembly : cs.temp.dll.dll Syntax public abstract class ParabolaLineDataProvider : BaseMixedRealityLineDataProvider Properties StartPoint The Starting point of this line. Declaration public MixedRealityPose StartPoint { get; } Property Value Type Description MixedRealityPose Remarks Always located at this 's Methods GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) OnValidate() Declaration protected override void OnValidate() Overrides BaseMixedRealityLineDataProvider.OnValidate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.InterpolationUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.InterpolationUtilities.html",
    "title": "Class InterpolationUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class InterpolationUtilities Static class containing interpolation-related utility functions. Inheritance Object InterpolationUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public static class InterpolationUtilities Methods ExpCoefficient(Single, Single) Declaration public static float ExpCoefficient(float hLife, float dTime) Parameters Type Name Description Single hLife Single dTime Returns Type Description Single ExpDecay(Color, Color, Single, Single) Declaration public static Color ExpDecay(Color from, Color to, float hLife, float dTime) Parameters Type Name Description Color from Color to Single hLife Single dTime Returns Type Description Color ExpDecay(Quaternion, Quaternion, Single, Single) Declaration public static Quaternion ExpDecay(Quaternion from, Quaternion to, float hLife, float dTime) Parameters Type Name Description Quaternion from Quaternion to Single hLife Single dTime Returns Type Description Quaternion ExpDecay(Single, Single, Single, Single) Declaration public static float ExpDecay(float from, float to, float hLife, float dTime) Parameters Type Name Description Single from Single to Single hLife Single dTime Returns Type Description Single ExpDecay(Vector2, Vector2, Single, Single) Declaration public static Vector2 ExpDecay(Vector2 from, Vector2 to, float hLife, float dTime) Parameters Type Name Description Vector2 from Vector2 to Single hLife Single dTime Returns Type Description Vector2 ExpDecay(Vector3, Vector3, Single, Single) Declaration public static Vector3 ExpDecay(Vector3 from, Vector3 to, float hLife, float dTime) Parameters Type Name Description Vector3 from Vector3 to Single hLife Single dTime Returns Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Interpolator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.Interpolator.html",
    "title": "Class Interpolator | Mixed Reality Toolkit Documentation",
    "keywords": "Class Interpolator A MonoBehaviour that interpolates a transform's position, rotation or scale. Inheritance Object Interpolator Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public class Interpolator : MonoBehaviour Properties AnimatingLocalRotation True if the transform's local rotation is animating; false otherwise. Declaration public bool AnimatingLocalRotation { get; } Property Value Type Description Boolean AnimatingLocalScale True if the transform's scale is animating; false otherwise. Declaration public bool AnimatingLocalScale { get; } Property Value Type Description Boolean AnimatingPosition True if the transform's position is animating; false otherwise. Declaration public bool AnimatingPosition { get; } Property Value Type Description Boolean AnimatingRotation True if the transform's rotation is animating; false otherwise. Declaration public bool AnimatingRotation { get; } Property Value Type Description Boolean PositionVelocity The velocity of a transform whose position is being interpolated. Declaration public Vector3 PositionVelocity { get; } Property Value Type Description Vector3 Running True if position, rotation or scale are animating; false otherwise. Declaration public bool Running { get; } Property Value Type Description Boolean SmoothLerpToTarget Lerp the estimated targets towards the object each update, slowing and smoothing movement. Declaration public bool SmoothLerpToTarget { get; set; } Property Value Type Description Boolean SmoothPositionLerpRatio Declaration public float SmoothPositionLerpRatio { get; set; } Property Value Type Description Single SmoothRotationLerpRatio Declaration public float SmoothRotationLerpRatio { get; set; } Property Value Type Description Single SmoothScaleLerpRatio Declaration public float SmoothScaleLerpRatio { get; set; } Property Value Type Description Single TargetLocalRotation If animating local rotation, specifies the target local rotation as specified by SetTargetLocalRotation. Otherwise returns the current local rotation of the transform. Declaration public Quaternion TargetLocalRotation { get; } Property Value Type Description Quaternion TargetLocalScale If animating local scale, specifies the target local scale as specified by SetTargetLocalScale. Otherwise returns the current local scale of the transform. Declaration public Vector3 TargetLocalScale { get; } Property Value Type Description Vector3 TargetPosition If animating position, specifies the target position as specified by SetTargetPosition. Otherwise returns the current position of the transform. Declaration public Vector3 TargetPosition { get; } Property Value Type Description Vector3 TargetRotation If animating rotation, specifies the target rotation as specified by SetTargetRotation. Otherwise returns the current rotation of the transform. Declaration public Quaternion TargetRotation { get; } Property Value Type Description Quaternion Methods NonLinearInterpolateTo(Vector3, Vector3, Single, Single) Interpolates smoothly to a target position. Declaration public static Vector3 NonLinearInterpolateTo(Vector3 start, Vector3 target, float deltaTime, float speed) Parameters Type Name Description Vector3 start The starting position. Vector3 target The destination position. Single deltaTime Caller-provided Time.deltaTime. Single speed The speed to apply to the interpolation. Returns Type Description Vector3 New interpolated position closer to target Reset() Stops the transform in place and terminates any animations. Reset() is usually reserved as a MonoBehaviour API call in editor, but is used in this case as a convenience method. Declaration public void Reset() SetTargetLocalRotation(Quaternion) Sets the target local rotation for the transform and if rotation wasn't already animating, fires the InterpolationStarted event. Declaration public void SetTargetLocalRotation(Quaternion target) Parameters Type Name Description Quaternion target The new target local rotation for the transform. SetTargetLocalScale(Vector3) Sets the target local scale for the transform and if scale wasn't already animating, fires the InterpolationStarted event. Declaration public void SetTargetLocalScale(Vector3 target) Parameters Type Name Description Vector3 target The new target local rotation for the transform. SetTargetPosition(Vector3) Sets the target position for the transform and if position wasn't already animating, fires the InterpolationStarted event. Declaration public void SetTargetPosition(Vector3 target) Parameters Type Name Description Vector3 target The new target position to for the transform. SetTargetRotation(Quaternion) Sets the target rotation for the transform and if rotation wasn't already animating, fires the InterpolationStarted event. Declaration public void SetTargetRotation(Quaternion target) Parameters Type Name Description Quaternion target The new target rotation for the transform. SnapToTarget() Snaps to the final target and stops interpolating Declaration public void SnapToTarget() StopInterpolating() Stops the interpolation regardless if it has reached the target Declaration public void StopInterpolating() Events InterpolationDone The event fired when an Interpolation is completed. Declaration public event Action InterpolationDone Event Type Type Description Action InterpolationStarted The event fired when an Interpolation is started. Declaration public event Action InterpolationStarted Event Type Type Description Action"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.MixedRealityDataProviderAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.MixedRealityDataProviderAttribute.html",
    "title": "Class MixedRealityDataProviderAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityDataProviderAttribute Attribute that defines the properties of a Mixed Reality Toolkit data provider. Inheritance Object Attribute MixedRealityExtensionServiceAttribute MixedRealityDataProviderAttribute Implements _Attribute Inherited Members MixedRealityExtensionServiceAttribute.RuntimePlatforms MixedRealityExtensionServiceAttribute.DefaultProfilePath MixedRealityExtensionServiceAttribute.PackageFolder MixedRealityExtensionServiceAttribute.DefaultProfile MixedRealityExtensionServiceAttribute.Find(Type) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class MixedRealityDataProviderAttribute : MixedRealityExtensionServiceAttribute, _Attribute Constructors MixedRealityDataProviderAttribute(Type, SupportedPlatforms, String, String) Declaration public MixedRealityDataProviderAttribute(Type serviceInterfaceType, SupportedPlatforms runtimePlatforms, string profilePath = \"\", string packageFolder = \"MixedRealityToolkit\") Parameters Type Name Description Type serviceInterfaceType SupportedPlatforms runtimePlatforms String profilePath String packageFolder Properties ServiceInterfaceType The interface type of the IMixedRealityService for which the data provider is supported. Declaration public Type ServiceInterfaceType { get; } Property Value Type Description Type Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.WebRequestRest Classes Rest REST Class for CRUD Transactions. Structs Response Response to a REST Call."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.AxisType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.AxisType.html",
    "title": "Enum AxisType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AxisType The AxisType identifies the type of button or input being sent to the framework from a controller. This is mainly information only or for advanced users to understand the input coming directly from the controller. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum AxisType Fields Name Description Digital Digital On/Off input. DualAxis Dual Axis analogue input. None No Specified type. Raw Raw stream from input (proxy only). SingleAxis Single Axis analogue input. SixDof Position AND Rotation analogue input. ThreeDofPosition Position only Axis analogue input. ThreeDofRotation Rotation only Axis analogue input."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.TransformExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.TransformExtensions.html",
    "title": "Class TransformExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class TransformExtensions Extension methods for Unity's Transform class Inheritance Object TransformExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class TransformExtensions Methods EnumerateAncestors(Transform, Boolean) Enumerates the ancestors of the specified transform. Declaration public static IEnumerable<Transform> EnumerateAncestors(this Transform startTransform, bool includeSelf) Parameters Type Name Description Transform startTransform Transform for which ancestors must be returned. Boolean includeSelf Indicates whether the specified transform should be included. Returns Type Description IEnumerable < Transform > An enumeration of all ancestor transforms of the specified start transform. EnumerateHierarchy(Transform) Enumerates all children in the hierarchy starting at the root object. Declaration public static IEnumerable<Transform> EnumerateHierarchy(this Transform root) Parameters Type Name Description Transform root Start point of the traversion set Returns Type Description IEnumerable < Transform > EnumerateHierarchy(Transform, ICollection<Transform>) Enumerates all children in the hierarchy starting at the root object except for the branches in ignore. Declaration public static IEnumerable<Transform> EnumerateHierarchy(this Transform root, ICollection<Transform> ignore) Parameters Type Name Description Transform root Start point of the traversion set ICollection < Transform > ignore Transforms and all its children to be ignored Returns Type Description IEnumerable < Transform > FindAncestorComponent<T>(Transform, Boolean) Find the first component of type T in the ancestors of the specified transform. Declaration public static T FindAncestorComponent<T>(this Transform startTransform, bool includeSelf = true) where T : Component Parameters Type Name Description Transform startTransform Transform for which ancestors must be considered. Boolean includeSelf Indicates whether the specified transform should be included. Returns Type Description T The component of type T . Null if it none was found. Type Parameters Name Description T Type of component to find. GetColliderBounds(Transform) Calculates the bounds of all the colliders attached to this GameObject and all it's children Declaration public static Bounds GetColliderBounds(this Transform transform) Parameters Type Name Description Transform transform Transform of root GameObject the colliders are attached to Returns Type Description Bounds The total bounds of all colliders attached to this GameObject. If no colliders attached, returns a bounds of center and extents 0 GetFullPath(Transform, String, String) An extension method that will get you the full path to an object. Declaration public static string GetFullPath(this Transform transform, string delimiter = \".\", string prefix = \"/\") Parameters Type Name Description Transform transform The transform you wish a full path to. String delimiter The delimiter with which each object is delimited in the string. String prefix Prefix with which the full path to the object should start. Returns Type Description String A delimited string that is the full path to the game object in the hierarchy. IsParentOrChildOf(Transform, Transform) Checks if the provided transforms are child/parent related. Declaration public static bool IsParentOrChildOf(this Transform transform1, Transform transform2) Parameters Type Name Description Transform transform1 Transform transform2 Returns Type Description Boolean True if either transform is the parent of the other or if they are the same"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityPointerProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityPointerProfileInspector.html",
    "title": "Class MixedRealityPointerProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPointerProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityPointerProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityPointerProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.ParabolaPhysicalLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.ParabolaPhysicalLineDataProviderInspector.html",
    "title": "Class ParabolaPhysicalLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolaPhysicalLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector ParabolaPhysicalLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview BaseLineDataProviderInspector.OnSceneGUI() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines Assembly : cs.temp.dll.dll Syntax public class ParabolaPhysicalLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityToolkitInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.MixedRealityToolkitInspector.html",
    "title": "Class MixedRealityToolkitInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitInspector Inheritance Object MixedRealityToolkitInspector Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitInspector : Editor Methods CreateMixedRealityToolkitGameObject() Declaration public static void CreateMixedRealityToolkitGameObject() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.BaseMixedRealityProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.BaseMixedRealityProfileInspector.html",
    "title": "Class BaseMixedRealityProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityProfileInspector Base class for all Inspectors to inherit from. Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityProfileInspector : Editor Methods CheckMixedRealityConfigured(Boolean) Declaration [Obsolete(\"Use MixedRealityInspectorUtility.CheckMixedRealityConfigured instead\")] public static bool CheckMixedRealityConfigured(bool flag = true) Parameters Type Name Description Boolean flag Returns Type Description Boolean CreateCopyProfileValues() Declaration protected static void CreateCopyProfileValues() OnEnable() Declaration protected virtual void OnEnable() RenderProfile(SerializedProperty, GUIContent, Boolean) Renders a . Declaration protected static bool RenderProfile(SerializedProperty property, GUIContent guiContent, bool showAddButton = true) Parameters Type Name Description SerializedProperty property the property. GUIContent guiContent The GUIContent for the field. Boolean showAddButton Optional flag to hide the create button. Returns Type Description Boolean True, if the profile changed. RenderProfile(SerializedProperty, Boolean) Renders a . Declaration protected static bool RenderProfile(SerializedProperty property, bool showAddButton = true) Parameters Type Name Description SerializedProperty property the property. Boolean showAddButton Optional flag to hide the create button. Returns Type Description Boolean True, if the profile changed."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Services.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Services.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Services | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Services Classes BaseDataProvider The base data provider implements and provides default properties for all data providers. BaseEventSystem Base Event System that can be inherited from to give other system features event capabilities. BaseExtensionService The base extension service implements IMixedRealityExtensionService and provides default properties for all extension services. BaseService The base service implements IMixedRealityService and provides default properties for all services. BaseServiceWithConstructor Base with a constructor override. MixedRealityToolkit This class is responsible for coordinating the operation of the Mixed Reality Toolkit. It is the only Singleton in the entire project. It provides a service registry for all active services that are used within a project as well as providing the active configuration profile for the project. The Profile can be swapped out at any time to meet the needs of your project."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingPrimitive.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingPrimitive.html",
    "title": "Class ClippingPrimitive | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingPrimitive An abstract primitive component to animate and visualize a clipping primitive that can be used to drive per pixel based clipping. Inheritance Object ClippingPrimitive ClippingBox ClippingPlane ClippingSphere Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class ClippingPrimitive : MonoBehaviour Fields allocatedMaterials Declaration protected List<Material> allocatedMaterials Field Value Type Description List < Material > clippingSide Declaration protected ClippingPrimitive.Side clippingSide Field Value Type Description ClippingPrimitive.Side materialPropertyBlock Declaration protected MaterialPropertyBlock materialPropertyBlock Field Value Type Description MaterialPropertyBlock modifiedMaterials Declaration protected Dictionary<Material, bool> modifiedMaterials Field Value Type Description Dictionary < Material , Boolean > renderers Declaration protected List<Renderer> renderers Field Value Type Description List < Renderer > Properties ClippingSide The renderer(s) that should be affected by the primitive. Declaration public ClippingPrimitive.Side ClippingSide { get; set; } Property Value Type Description ClippingPrimitive.Side ClippingSideProperty Declaration protected abstract string ClippingSideProperty { get; } Property Value Type Description String Keyword Declaration protected abstract string Keyword { get; } Property Value Type Description String KeywordProperty Declaration protected abstract string KeywordProperty { get; } Property Value Type Description String Methods AddRenderer(Renderer) Declaration public void AddRenderer(Renderer _renderer) Parameters Type Name Description Renderer _renderer GetMaterial(Renderer, Boolean) Declaration protected Material GetMaterial(Renderer _renderer, bool trackAllocations = true) Parameters Type Name Description Renderer _renderer Boolean trackAllocations Returns Type Description Material Initialize() Declaration protected virtual void Initialize() LateUpdate() Declaration protected void LateUpdate() OnDestroy() Declaration protected void OnDestroy() OnDisable() Declaration protected void OnDisable() OnEnable() Declaration protected void OnEnable() OnValidate() Declaration protected void OnValidate() RemoveRenderer(Renderer) Declaration public void RemoveRenderer(Renderer _renderer) Parameters Type Name Description Renderer _renderer RestoreUnassignedMaterials() Declaration protected void RestoreUnassignedMaterials() ToggleClippingFeature(Material, Boolean) Declaration protected void ToggleClippingFeature(Material material, bool keywordOn) Parameters Type Name Description Material material Boolean keywordOn ToggleClippingFeature(Boolean) Declaration protected void ToggleClippingFeature(bool keywordOn) Parameters Type Name Description Boolean keywordOn UpdateRenderers() Declaration protected virtual void UpdateRenderers() UpdateShaderProperties(MaterialPropertyBlock) Declaration protected abstract void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock) Parameters Type Name Description MaterialPropertyBlock materialPropertyBlock"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.BaseRayStabilizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.BaseRayStabilizer.html",
    "title": "Class BaseRayStabilizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseRayStabilizer A base class for a stabilizer that takes an input position and rotation, and performs operations on them to stabilize, or smooth deltas, in the data. Inheritance Object BaseRayStabilizer GazeStabilizer Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public abstract class BaseRayStabilizer : IBaseRayStabilizer Properties StablePosition The stabilized position. Declaration public abstract Vector3 StablePosition { get; } Property Value Type Description Vector3 StableRay A ray representing the stable position and rotation Declaration public abstract Ray StableRay { get; } Property Value Type Description Ray StableRotation The stabilized rotation. Declaration public abstract Quaternion StableRotation { get; } Property Value Type Description Quaternion Methods UpdateStability(Vector3, Quaternion) Call this each frame to smooth out changes to a position and rotation, if supported. Declaration public virtual void UpdateStability(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Input position to smooth. Quaternion rotation Input rotation to smooth. UpdateStability(Vector3, Vector3) Call this each frame to smooth out changes to a position and direction, if supported. Declaration public abstract void UpdateStability(Vector3 position, Vector3 direction) Parameters Type Name Description Vector3 position Input position to smooth. Vector3 direction Input direction to smooth."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.ImplementsAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.ImplementsAttribute.html",
    "title": "Class ImplementsAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class ImplementsAttribute Constraint that allows selection of classes that implement a specific interface when selecting a with the Unity inspector. Inheritance Object SystemTypeAttribute ImplementsAttribute Inherited Members SystemTypeAttribute.Grouping SystemTypeAttribute.AllowAbstract Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax public sealed class ImplementsAttribute : SystemTypeAttribute Constructors ImplementsAttribute(Type, TypeGrouping) Initializes a new instance of the ImplementsAttribute class. Declaration public ImplementsAttribute(Type interfaceType, TypeGrouping grouping) Parameters Type Name Description Type interfaceType Type of interface that selectable classes must implement. TypeGrouping grouping Gets or sets grouping of selectable classes. Defaults to unless explicitly specified. Properties InterfaceType Gets the type of interface that selectable classes must implement. Declaration public Type InterfaceType { get; } Property Value Type Description Type Methods IsConstraintSatisfied(Type) Determines whether the specified Type satisfies filter constraint. Declaration public override bool IsConstraintSatisfied(Type type) Parameters Type Name Description Type type Type to test. Returns Type Description Boolean A Boolean value indicating if the type specified by type satisfies this constraint and should thus be selectable. Overrides SystemTypeAttribute.IsConstraintSatisfied(Type)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.SDKType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Devices.SDKType.html",
    "title": "Enum SDKType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SDKType The SDKType lists the XR SDKs that are supported by the Mixed Reality Toolkit. Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Devices Assembly : cs.temp.dll.dll Syntax public enum SDKType Fields Name Description None No specified type or Standalone / non-XR type OpenVR The OpenVR platform provided by Unity (does not support the downloadable SteamVR SDK). OpenXR The OpenXR platform. SDK to be determined once released. Other Undefined SDK. WindowsMR The Windows 10 Mixed reality SDK provided by the Universal Windows Platform (UWP), for Immersive MR headsets and HoloLens."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor.InputManagerAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor.InputManagerAxis.html",
    "title": "Class InputManagerAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputManagerAxis Used to define an entire InputManagerAxis, with each variable defined by the same term the Inspector shows. Inheritance Object InputManagerAxis Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class InputManagerAxis Fields AltNegativeButton Declaration public string AltNegativeButton Field Value Type Description String AltPositiveButton Declaration public string AltPositiveButton Field Value Type Description String Axis Declaration public int Axis Field Value Type Description Int32 Dead Declaration public float Dead Field Value Type Description Single DescriptiveName Declaration public string DescriptiveName Field Value Type Description String DescriptiveNegativeName Declaration public string DescriptiveNegativeName Field Value Type Description String Gravity Declaration public float Gravity Field Value Type Description Single Invert Declaration public bool Invert Field Value Type Description Boolean JoyNum Declaration public int JoyNum Field Value Type Description Int32 Name Declaration public string Name Field Value Type Description String NegativeButton Declaration public string NegativeButton Field Value Type Description String PositiveButton Declaration public string PositiveButton Field Value Type Description String Sensitivity Declaration public float Sensitivity Field Value Type Description Single Snap Declaration public bool Snap Field Value Type Description Boolean Type Declaration public InputManagerAxisType Type Field Value Type Description InputManagerAxisType"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.TwoHandRotateLogic.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.TwoHandRotateLogic.html",
    "title": "Class TwoHandRotateLogic | Mixed Reality Toolkit Documentation",
    "keywords": "Class TwoHandRotateLogic Implements common logic for rotating holograms using a handlebar metaphor. each frame, object_rotation_delta = rotation_delta(current_hands_vector, previous_hands_vector) where hands_vector is the vector between two hand/controller positions. Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. Inheritance Object TwoHandRotateLogic Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public class TwoHandRotateLogic Constructors TwoHandRotateLogic(RotationConstraintType) Constructor. Declaration public TwoHandRotateLogic(RotationConstraintType rotationConstraint) Parameters Type Name Description RotationConstraintType rotationConstraint Methods GetCurrentRotationConstraint() The current rotation constraint might be modified based on disambiguation logic, for example XOrYBasedOnInitialHandPosition might change the current rotation constraint based on the initial hand positions at the start Declaration public RotationConstraintType GetCurrentRotationConstraint() Returns Type Description RotationConstraintType Setup(Dictionary<UInt32, Vector3>) Setup the rotation logic. Declaration public void Setup(Dictionary<uint, Vector3> handsPressedMap) Parameters Type Name Description Dictionary < UInt32 , Vector3 > handsPressedMap Update(Dictionary<UInt32, Vector3>, Quaternion) Update the rotation based on input. Declaration public Quaternion Update(Dictionary<uint, Vector3> handsPressedMap, Quaternion currentRotation) Parameters Type Name Description Dictionary < UInt32 , Vector3 > handsPressedMap Quaternion currentRotation Returns Type Description Quaternion"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.TwoHandScaleLogic.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.TwoHandScaleLogic.html",
    "title": "Class TwoHandScaleLogic | Mixed Reality Toolkit Documentation",
    "keywords": "Class TwoHandScaleLogic Implements a scale logic that will scale an object based on the ratio of the distance between hands. object_scale = start_object_scale * curr_hand_dist / start_hand_dist Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. Inheritance Object TwoHandScaleLogic Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public class TwoHandScaleLogic Methods Setup(Dictionary<UInt32, Vector3>, Transform) Initialize system with source info from controllers/hands Declaration public virtual void Setup(Dictionary<uint, Vector3> handsPressedMap, Transform manipulationRoot) Parameters Type Name Description Dictionary < UInt32 , Vector3 > handsPressedMap Dictionary that maps inputSources to states Transform manipulationRoot Transform of gameObject to be manipulated UpdateMap(Dictionary<UInt32, Vector3>) update GameObject with new Scale state Declaration public virtual Vector3 UpdateMap(Dictionary<uint, Vector3> handsPressedMap) Parameters Type Name Description Dictionary < UInt32 , Vector3 > handsPressedMap Returns Type Description Vector3 a Vector3 describing the new Scale of the object being manipulated"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.VectorRollingStatistics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.VectorRollingStatistics.html",
    "title": "Class VectorRollingStatistics | Mixed Reality Toolkit Documentation",
    "keywords": "Class VectorRollingStatistics Vector Statistics used in gaze stabilization. Inheritance Object VectorRollingStatistics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public class VectorRollingStatistics Properties ActualSampleCount The number of samples in the current set (may be 0 - maxSamples) Declaration public float ActualSampleCount { get; } Property Value Type Description Single Average The average position. Declaration public Vector3 Average { get; } Property Value Type Description Vector3 CurrentStandardDeviation Current standard deviation of the positions of the vectors. Declaration public float CurrentStandardDeviation { get; } Property Value Type Description Single StandardDeviationDeltaAfterLatestSample Difference to standardDeviation when the latest sample was added. Declaration public float StandardDeviationDeltaAfterLatestSample { get; } Property Value Type Description Single StandardDeviationsAwayOfLatestSample How many standard deviations the latest sample was away. Declaration public float StandardDeviationsAwayOfLatestSample { get; } Property Value Type Description Single Methods AddSample(Vector3) Adds a new sample to the sample list and updates the stats. Declaration public void AddSample(Vector3 value) Parameters Type Name Description Vector3 value The new sample to add Init(Int32) Initialize the rolling stats. Declaration public void Init(int sampleCount) Parameters Type Name Description Int32 sampleCount Reset() Resets the stats to zero. Declaration public void Reset()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Setup.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Setup.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Setup | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Setup Classes MixedRealityEditorSettings Sets Force Text Serialization and visible meta files in all projects that use the Mixed Reality Toolkit."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.MixedRealityToolkitConfigurationProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.MixedRealityToolkitConfigurationProfile.html",
    "title": "Class MixedRealityToolkitConfigurationProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitConfigurationProfile Configuration profile settings for the Mixed Reality Toolkit. Inheritance Object BaseMixedRealityProfile MixedRealityToolkitConfigurationProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitConfigurationProfile : BaseMixedRealityProfile Properties ActiveServices Dictionary list of active Systems used by the Mixed Reality Toolkit at runtime Declaration [Obsolete(\"Use MixedRealityToolkit.ActiveSystems instead\")] public Dictionary<Type, IMixedRealityService> ActiveServices { get; } Property Value Type Description Dictionary < Type , IMixedRealityService > BoundarySystemSystemType Boundary System Script File to instantiate at runtime. Declaration public SystemType BoundarySystemSystemType { get; } Property Value Type Description SystemType BoundaryVisualizationProfile Active profile for controller mapping configuration Declaration public MixedRealityBoundaryVisualizationProfile BoundaryVisualizationProfile { get; } Property Value Type Description MixedRealityBoundaryVisualizationProfile CameraProfile Profile for customizing your camera and quality settings based on if your head mounted display (HMD) is a transparent device or an occluded device. Declaration public MixedRealityCameraProfile CameraProfile { get; } Property Value Type Description MixedRealityCameraProfile DiagnosticsSystemProfile Active profile for diagnostic configuration Declaration public MixedRealityDiagnosticsProfile DiagnosticsSystemProfile { get; } Property Value Type Description MixedRealityDiagnosticsProfile DiagnosticsSystemSystemType Diagnostics System Script File to instantiate at runtime Declaration public SystemType DiagnosticsSystemSystemType { get; } Property Value Type Description SystemType InputSystemProfile Input System profile for setting wiring up events and actions to input devices. Declaration public MixedRealityInputSystemProfile InputSystemProfile { get; } Property Value Type Description MixedRealityInputSystemProfile InputSystemType Input System Script File to instantiate at runtime. Declaration public SystemType InputSystemType { get; } Property Value Type Description SystemType IsBoundarySystemEnabled Enable and configure the boundary system. Declaration public bool IsBoundarySystemEnabled { get; } Property Value Type Description Boolean IsCameraProfileEnabled Enable and configure the Camera Profile for the Mixed Reality Toolkit Declaration public bool IsCameraProfileEnabled { get; } Property Value Type Description Boolean IsDiagnosticsSystemEnabled Is the Diagnostics System enabled? Declaration public bool IsDiagnosticsSystemEnabled { get; } Property Value Type Description Boolean IsInputSystemEnabled Enable and configure the Input System component for the Mixed Reality Toolkit Declaration public bool IsInputSystemEnabled { get; } Property Value Type Description Boolean IsSpatialAwarenessSystemEnabled Enable and configure the spatial awareness system. Declaration public bool IsSpatialAwarenessSystemEnabled { get; } Property Value Type Description Boolean IsTeleportSystemEnabled Enable and configure the boundary system. Declaration public bool IsTeleportSystemEnabled { get; } Property Value Type Description Boolean RegisteredServiceProvidersProfile All the additional non-required systems, features, and managers registered with the Mixed Reality Toolkit. Declaration public MixedRealityRegisteredServiceProvidersProfile RegisteredServiceProvidersProfile { get; } Property Value Type Description MixedRealityRegisteredServiceProvidersProfile SpatialAwarenessSystemSystemType Boundary System Script File to instantiate at runtime. Declaration public SystemType SpatialAwarenessSystemSystemType { get; } Property Value Type Description SystemType TargetExperienceScale The desired the scale of the experience. Declaration public ExperienceScale TargetExperienceScale { get; set; } Property Value Type Description ExperienceScale TeleportSystemSystemType Teleport System Script File to instantiate at runtime. Declaration public SystemType TeleportSystemSystemType { get; } Property Value Type Description SystemType"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.PlacementEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.PlacementEventData.html",
    "title": "Class PlacementEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class PlacementEventData Describes placement of objects events. Inheritance Object GenericBaseEventData PlacementEventData Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum Assembly : cs.temp.dll.dll Syntax public class PlacementEventData : GenericBaseEventData Constructors PlacementEventData(EventSystem) Constructor. Declaration public PlacementEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Usually Properties ObjectBeingPlaced The game object that is being placed. Declaration public GameObject ObjectBeingPlaced { get; } Property Value Type Description GameObject Methods Initialize(IMixedRealityEventSource, GameObject) Populates the event with data. Declaration public void Initialize(IMixedRealityEventSource eventSource, GameObject objectBeingPlaced) Parameters Type Name Description IMixedRealityEventSource eventSource GameObject objectBeingPlaced"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseServiceWithConstructor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseServiceWithConstructor.html",
    "title": "Class BaseServiceWithConstructor | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseServiceWithConstructor Base with a constructor override. Inheritance Object BaseService BaseServiceWithConstructor BaseExtensionService Implements IMixedRealityService IDisposable Inherited Members BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Services Assembly : cs.temp.dll.dll Syntax public abstract class BaseServiceWithConstructor : BaseService, IMixedRealityService, IDisposable Constructors BaseServiceWithConstructor(String, UInt32) Constructor. Declaration public BaseServiceWithConstructor(string name, uint priority) Parameters Type Name Description String name UInt32 priority Properties Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; } Property Value Type Description String Overrides BaseService.Name Priority Optional Priority to reorder registered managers based on their respective priority, reduces the risk of race conditions by prioritizing the order in which managers are evaluated. Declaration public override uint Priority { get; } Property Value Type Description UInt32 Overrides BaseService.Priority Implements IMixedRealityService System.IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingPlane.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingPlane.html",
    "title": "Class ClippingPlane | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingPlane Component to animate and visualize a plane that can be used with per pixel based clipping. Inheritance Object ClippingPrimitive ClippingPlane Inherited Members ClippingPrimitive.renderers ClippingPrimitive.clippingSide ClippingPrimitive.ClippingSide ClippingPrimitive.materialPropertyBlock ClippingPrimitive.modifiedMaterials ClippingPrimitive.allocatedMaterials ClippingPrimitive.AddRenderer(Renderer) ClippingPrimitive.RemoveRenderer(Renderer) ClippingPrimitive.OnValidate() ClippingPrimitive.OnEnable() ClippingPrimitive.OnDisable() ClippingPrimitive.LateUpdate() ClippingPrimitive.OnDestroy() ClippingPrimitive.UpdateRenderers() ClippingPrimitive.ToggleClippingFeature(Boolean) ClippingPrimitive.ToggleClippingFeature(Material, Boolean) ClippingPrimitive.GetMaterial(Renderer, Boolean) ClippingPrimitive.RestoreUnassignedMaterials() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class ClippingPlane : ClippingPrimitive Properties ClippingSideProperty Declaration protected override string ClippingSideProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.ClippingSideProperty Keyword Declaration protected override string Keyword { get; } Property Value Type Description String Overrides ClippingPrimitive.Keyword KeywordProperty Declaration protected override string KeywordProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.KeywordProperty Methods Initialize() Declaration protected override void Initialize() Overrides ClippingPrimitive.Initialize() UpdateShaderProperties(MaterialPropertyBlock) Declaration protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock) Parameters Type Name Description MaterialPropertyBlock materialPropertyBlock Overrides ClippingPrimitive.UpdateShaderProperties(MaterialPropertyBlock)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessSurfaceTypes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem.SpatialAwarenessSurfaceTypes.html",
    "title": "Enum SpatialAwarenessSurfaceTypes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SpatialAwarenessSurfaceTypes Enumeration defining the types of planar surfaces that are supported by the spatial awareness surface finding subsystem. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax [Flags] public enum SpatialAwarenessSurfaceTypes Fields Name Description Ceiling The environment’s ceiling. Floor The environment’s floor. Platform A raised, horizontal surface such as a shelf. Unknown An unknown / unsupported type of surface. Wall A wall within the user’s space."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.ProcessResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.ProcessResult.html",
    "title": "Struct ProcessResult | Mixed Reality Toolkit Documentation",
    "keywords": "Struct ProcessResult Result from a completed asynchronous process. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public struct ProcessResult Constructors ProcessResult(Int32, String[], String[]) Constructor for Process Result. Declaration public ProcessResult(int exitCode, string[] errors, string[] output) Parameters Type Name Description Int32 exitCode Exit code from completed process. String [] errors Errors from completed process. String [] output Output from completed process. Properties Errors Errors from completed process. Declaration public string[] Errors { get; } Property Value Type Description String [] ExitCode Exit code from completed process. Declaration public int ExitCode { get; } Property Value Type Description Int32 Output Output from completed process. Declaration public string[] Output { get; } Property Value Type Description String []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem Interfaces IMixedRealitySpatialAwarenessObject IMixedRealitySpatialAwarenessSystem"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Async.AwaiterExtensions.SimpleCoroutineAwaiter-1.html",
    "title": "Class AwaiterExtensions.SimpleCoroutineAwaiter<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class AwaiterExtensions.SimpleCoroutineAwaiter<T> Processes Coroutine and notifies completion with result. Inheritance Object AwaiterExtensions.SimpleCoroutineAwaiter<T> Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Async Assembly : cs.temp.dll.dll Syntax public class SimpleCoroutineAwaiter<T> : INotifyCompletion Type Parameters Name Description T The result type. Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods Complete(T, Exception) Declaration public void Complete(T taskResult, Exception e) Parameters Type Name Description T taskResult Exception e GetResult() Declaration public T GetResult() Returns Type Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Editor Classes EditorAssemblyReloadManager EditorPrefsUtility Convenience class for setting Editor Preferences. EditorProjectUtilities IconEditor InputMappingAxisUtility Utility class for Unity's Input Manager Mappings."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers Classes BaseMixedRealityLineRenderer Base class for Mixed Reality Line Renderers. MeshLineRenderer Creates instances of a mesh along the line MixedRealityLineRenderer Implements Unity's built in line renderer component, and applies the line data to it. ParticleSystemLineRenderer attaches a set of particles to the line StripMeshLineRenderer Draws a strip of polygons along the line"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Lines | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Utilities.Lines Classes LineFollower Synchronizes the follower's transform position with the point along the line. LineUtility Mixed Reality line utility class with helpful math functions for calculation, and other convenience methods."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.ProcessExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.ProcessExtensions.html",
    "title": "Class ProcessExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProcessExtensions Process Extension class. Inheritance Object ProcessExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class ProcessExtensions Methods StartProcessAsync(Process, ProcessStartInfo, Boolean) Starts a process asynchronously. The provided Process Start Info must not use shell execution, and should redirect the standard output and errors. Declaration public static Task<ProcessResult> StartProcessAsync(this Process process, ProcessStartInfo startInfo, bool showDebug = false) Parameters Type Name Description Process process This Process. ProcessStartInfo startInfo The Process start info. Boolean showDebug Should output debug code to Editor Console? Returns Type Description Task < ProcessResult > StartProcessAsync(Process, String, String, Boolean) Starts a process asynchronously. Declaration public static Task<ProcessResult> StartProcessAsync(this Process process, string fileName, string args, bool showDebug = false) Parameters Type Name Description Process process This Process. String fileName The process executable to run. String args The Process arguments. Boolean showDebug Should output debug code to Editor Console? Returns Type Description Task < ProcessResult >"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.ActivePowerSchemeInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.ActivePowerSchemeInfo.html",
    "title": "Class ActivePowerSchemeInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class ActivePowerSchemeInfo Inheritance Object ActivePowerSchemeInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class ActivePowerSchemeInfo Fields ActivePowerScheme Declaration public string ActivePowerScheme Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Extensions.UnityObjectExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Extensions.UnityObjectExtensions.html",
    "title": "Class UnityObjectExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityObjectExtensions Extension methods for Unity's Object class Inheritance Object UnityObjectExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Extensions Assembly : cs.temp.dll.dll Syntax public static class UnityObjectExtensions Methods DontDestroyOnLoad(Object) Enable Unity objects to skip \"DontDestroyOnLoad\" when editor isn't playing so test runner passes. Declaration public static void DontDestroyOnLoad(this object target) Parameters Type Name Description Object target"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.CameraCache.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.CameraCache.html",
    "title": "Class CameraCache | Mixed Reality Toolkit Documentation",
    "keywords": "Class CameraCache The purpose of this class is to provide a cached reference to the main camera. Calling Camera.main executes a FindByTag on the scene, which will get worse and worse with more tagged objects. Inheritance Object CameraCache Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class CameraCache Properties Main Returns a cached reference to the main camera and uses Camera.main if it hasn't been cached yet. Declaration public static Camera Main { get; } Property Value Type Description Camera Methods Refresh(Camera) Set the cached camera to a new reference and return it Declaration public static Camera Refresh(Camera newMain) Parameters Type Name Description Camera newMain New main camera to cache Returns Type Description Camera"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Devices.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Devices.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Devices | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Devices Classes BaseSpatialAwarenessObserver"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Input.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.Input | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.Input Classes BaseInputEventData Base class of all Input Events. DictationEventData Describes an Input Event with voice dictation. FocusEventData Describes an Input Event associated with a specific pointer's focus state change. GraphicInputEventData Describes a uGUI event that was generated by a specific pointer. InputEventData Describes an Input Event that has a source id. InputEventData<T> Describes and input event with a specific type. MixedRealityPointerEventData Describes an Input Event that involves a tap, click, or touch. SourcePoseEventData<T> Describes a source change event. Source State events do not have an associated MixedRealityInputAction . SourceStateEventData Describes an source state event that has a source id. Source State events do not have an associated MixedRealityInputAction . SpeechEventData Describes an input event that involves keyword recognition."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.ParabolicConstrainedLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines.ParabolicConstrainedLineDataProviderInspector.html",
    "title": "Class ParabolicConstrainedLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolicConstrainedLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector ParabolicConstrainedLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Utilities.Lines Assembly : cs.temp.dll.dll Syntax public class ParabolicConstrainedLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.IMixedRealityExtensionService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.IMixedRealityExtensionService.html",
    "title": "Interface IMixedRealityExtensionService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityExtensionService Generic interface for all optional Mixed Reality systems, components, or features that can be added to the MixedRealityServiceConfiguration Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.Disable() IMixedRealityService.Destroy() IDisposable.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityExtensionService : IMixedRealityService, IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRulePoseAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.InputActionRulePoseAxis.html",
    "title": "Struct InputActionRulePoseAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRulePoseAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < MixedRealityPose > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InputActionRulePoseAxis : IInputActionRule<MixedRealityPose> Constructors InputActionRulePoseAxis(MixedRealityInputAction, MixedRealityInputAction, MixedRealityPose) Constructor. Declaration public InputActionRulePoseAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, MixedRealityPose criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. MixedRealityPose criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public MixedRealityPose Criteria { get; } Property Value Type Description MixedRealityPose RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealitySpeechCommandsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealitySpeechCommandsProfile.html",
    "title": "Class MixedRealitySpeechCommandsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpeechCommandsProfile Configuration profile settings for setting up and consuming Speech Commands. Inheritance Object BaseMixedRealityProfile MixedRealitySpeechCommandsProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpeechCommandsProfile : BaseMixedRealityProfile Properties SpeechCommands The list of Speech Commands users use in your application. Declaration public SpeechCommands[] SpeechCommands { get; } Property Value Type Description SpeechCommands [] SpeechRecognitionConfidenceLevel The speech recognizer's minimum confidence level setting that will raise the action. Declaration public RecognitionConfidenceLevel SpeechRecognitionConfidenceLevel { get; } Property Value Type Description RecognitionConfidenceLevel SpeechRecognizerStartBehavior The list of Speech Commands users use in your application. Declaration public AutoStartBehavior SpeechRecognizerStartBehavior { get; } Property Value Type Description AutoStartBehavior"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingSphere.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.ClippingSphere.html",
    "title": "Class ClippingSphere | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingSphere Component to animate and visualize a sphere that can be used with per pixel based clipping. Inheritance Object ClippingPrimitive ClippingSphere Inherited Members ClippingPrimitive.renderers ClippingPrimitive.clippingSide ClippingPrimitive.ClippingSide ClippingPrimitive.materialPropertyBlock ClippingPrimitive.modifiedMaterials ClippingPrimitive.allocatedMaterials ClippingPrimitive.AddRenderer(Renderer) ClippingPrimitive.RemoveRenderer(Renderer) ClippingPrimitive.OnValidate() ClippingPrimitive.OnEnable() ClippingPrimitive.OnDisable() ClippingPrimitive.LateUpdate() ClippingPrimitive.OnDestroy() ClippingPrimitive.UpdateRenderers() ClippingPrimitive.ToggleClippingFeature(Boolean) ClippingPrimitive.ToggleClippingFeature(Material, Boolean) ClippingPrimitive.GetMaterial(Renderer, Boolean) ClippingPrimitive.RestoreUnassignedMaterials() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class ClippingSphere : ClippingPrimitive Fields radius Declaration protected float radius Field Value Type Description Single Properties ClippingSideProperty Declaration protected override string ClippingSideProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.ClippingSideProperty Keyword Declaration protected override string Keyword { get; } Property Value Type Description String Overrides ClippingPrimitive.Keyword KeywordProperty Declaration protected override string KeywordProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.KeywordProperty Radius The radius of the clipping sphere. Declaration public float Radius { get; } Property Value Type Description Single Methods Initialize() Declaration protected override void Initialize() Overrides ClippingPrimitive.Initialize() UpdateShaderProperties(MaterialPropertyBlock) Declaration protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock) Parameters Type Name Description MaterialPropertyBlock materialPropertyBlock Overrides ClippingPrimitive.UpdateShaderProperties(MaterialPropertyBlock)"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.InstallStatus.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.InstallStatus.html",
    "title": "Class InstallStatus | Mixed Reality Toolkit Documentation",
    "keywords": "Class InstallStatus Inheritance Object InstallStatus Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class InstallStatus Fields Code Declaration public int Code Field Value Type Description Int32 CodeText Declaration public string CodeText Field Value Type Description String Reason Declaration public string Reason Field Value Type Description String Success Declaration public bool Success Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.InterfaceInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.InterfaceInfo.html",
    "title": "Class InterfaceInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class InterfaceInfo Inheritance Object InterfaceInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class InterfaceInfo Fields Description Declaration public string Description Field Value Type Description String GUID Declaration public string GUID Field Value Type Description String Index Declaration public int Index Field Value Type Description Int32 ProfilesList Declaration public NetworkProfileInfo[] ProfilesList Field Value Type Description NetworkProfileInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.IpAddressInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.IpAddressInfo.html",
    "title": "Class IpAddressInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class IpAddressInfo Inheritance Object IpAddressInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class IpAddressInfo Fields IpAddress Declaration public string IpAddress Field Value Type Description String Mask Declaration public string Mask Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityTouchPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.IMixedRealityTouchPointer.html",
    "title": "Interface IMixedRealityTouchPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTouchPointer Interface for handling touch pointers. Inherited Members IMixedRealityPointer.Controller IMixedRealityPointer.PointerId IMixedRealityPointer.PointerName IMixedRealityPointer.InputSourceParent IMixedRealityPointer.BaseCursor IMixedRealityPointer.CursorModifier IMixedRealityPointer.TeleportHotSpot IMixedRealityPointer.IsInteractionEnabled IMixedRealityPointer.IsFocusLocked IMixedRealityPointer.PointerExtent IMixedRealityPointer.Rays IMixedRealityPointer.PrioritizedLayerMasksOverride IMixedRealityPointer.FocusTarget IMixedRealityPointer.Result IMixedRealityPointer.RayStabilizer IMixedRealityPointer.RaycastMode IMixedRealityPointer.SphereCastRadius IMixedRealityPointer.PointerOrientation IMixedRealityPointer.OnPreRaycast() IMixedRealityPointer.OnPostRaycast() IMixedRealityPointer.TryGetPointerPosition(Vector3) IMixedRealityPointer.TryGetPointingRay(Ray) IMixedRealityPointer.TryGetPointerRotation(Quaternion) Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTouchPointer : IMixedRealityPointer, IEqualityComparer Properties FingerId Current finger id of the touch. Declaration int FingerId { get; set; } Property Value Type Description Int32 TouchRay Current touch ray. Declaration Ray TouchRay { get; set; } Property Value Type Description Ray"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.BaseDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.BaseDeviceManager.html",
    "title": "Class BaseDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseDeviceManager Base Device manager to inherit from. Inheritance Object BaseDeviceManager MouseDeviceManager UnityJoystickManager UnityTouchDeviceManager Implements IMixedRealityDeviceManager Namespace : Microsoft.MixedReality.Toolkit.Core.Providers Assembly : cs.temp.dll.dll Syntax public class BaseDeviceManager : BaseExtensionService, IMixedRealityDeviceManager Constructors BaseDeviceManager(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public BaseDeviceManager(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Methods GetActiveControllers() Declaration public virtual IMixedRealityController[] GetActiveControllers() Returns Type Description IMixedRealityController [] RequestPointers(SystemType, Handedness, Boolean) Request an array of pointers for the controller type. Declaration protected virtual IMixedRealityPointer[] RequestPointers(SystemType controllerType, Handedness controllingHand, bool useSpecificType = false) Parameters Type Name Description SystemType controllerType The controller type making the request for pointers. Handedness controllingHand The handedness of the controller making the request. Boolean useSpecificType Only register pointers with a specific type. Returns Type Description IMixedRealityPointer [] Implements IMixedRealityDeviceManager"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.BaseGenericInputSource.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.BaseGenericInputSource.html",
    "title": "Class BaseGenericInputSource | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseGenericInputSource Base class for input sources that don't inherit from MonoBehaviour. This base class does not support adding or removing pointers, because many will never pass pointers in their constructors and will fall back to either the Gaze or Mouse Pointer. Inheritance Object BaseGenericInputSource Implements IDisposable Namespace : Microsoft.MixedReality.Toolkit.Core.Providers Assembly : cs.temp.dll.dll Syntax public class BaseGenericInputSource : IMixedRealityInputSource, IDisposable Constructors BaseGenericInputSource(String, IMixedRealityPointer[]) Constructor. Declaration public BaseGenericInputSource(string name, IMixedRealityPointer[] pointers = null) Parameters Type Name Description String name IMixedRealityPointer [] pointers Properties Pointers Declaration public virtual IMixedRealityPointer[] Pointers { get; } Property Value Type Description IMixedRealityPointer [] SourceId Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName Declaration public string SourceName { get; } Property Value Type Description String Methods Dispose() Dispose. Declaration public virtual void Dispose() Equals(IMixedRealityInputSource, IMixedRealityInputSource) Declaration public static bool Equals(IMixedRealityInputSource left, IMixedRealityInputSource right) Parameters Type Name Description IMixedRealityInputSource left IMixedRealityInputSource right Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Implements System.IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.CanvasUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.CanvasUtility.html",
    "title": "Class CanvasUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class CanvasUtility Helper class for setting up canvases for use in the MRTK. Inheritance Object CanvasUtility Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class CanvasUtility : MonoBehaviour Properties Canvas The canvas this helper script is targeting. Declaration public Canvas Canvas { get; set; } Property Value Type Description Canvas"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Attributes.PhysicsLayerAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Attributes.PhysicsLayerAttribute.html",
    "title": "Class PhysicsLayerAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class PhysicsLayerAttribute Attribute used to make an Int32 field render a dropdown generated from the current layers defined in the Tag Manager. Inheritance Object PhysicsLayerAttribute Namespace : Microsoft.MixedReality.Toolkit.Core.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class PhysicsLayerAttribute : PropertyAttribute Constructors PhysicsLayerAttribute() Declaration public PhysicsLayerAttribute()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem.MixedRealitySpatialAwarenessEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem.MixedRealitySpatialAwarenessEventData.html",
    "title": "Class MixedRealitySpatialAwarenessEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessEventData Data for spatial awareness events. Inheritance Object GenericBaseEventData MixedRealitySpatialAwarenessEventData MixedRealitySpatialAwarenessEventData<T> Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessEventData : GenericBaseEventData Constructors MixedRealitySpatialAwarenessEventData(EventSystem) Constructor. Declaration public MixedRealitySpatialAwarenessEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties Id Identifier of the object associated with this event. Declaration public int Id { get; } Property Value Type Description Int32 Methods Initialize(IMixedRealitySpatialAwarenessObserver, Int32) Initialize the event data. Declaration public void Initialize(IMixedRealitySpatialAwarenessObserver observer, int id) Parameters Type Name Description IMixedRealitySpatialAwarenessObserver observer The that raised the event. Int32 id The identifier of the observed spatial object."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.Handlers Interfaces IMixedRealitySpatialAwarenessObservationHandler<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput Classes GenericJoystickController MouseController Manages the mouse using unity input system. MouseDeviceManager UnityJoystickManager Manages joysticks using unity input system. UnityTouchController UnityTouchDeviceManager Manages Touch devices using unity input system. XboxController Xbox Controller using Unity Input System"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.CalibrationSpace.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.CalibrationSpace.html",
    "title": "Class CalibrationSpace | Mixed Reality Toolkit Documentation",
    "keywords": "Class CalibrationSpace Sets global shader variables relating to calibration space transforms Inheritance Object CalibrationSpace Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public class CalibrationSpace : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.SpeechCommands.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.SpeechCommands.html",
    "title": "Struct SpeechCommands | Mixed Reality Toolkit Documentation",
    "keywords": "Struct SpeechCommands Data structure for mapping Voice and Keyboard input to MixedRealityInputAction s that can be raised by the Input System. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct SpeechCommands Constructors SpeechCommands(String, KeyCode, MixedRealityInputAction) Constructor. Declaration public SpeechCommands(string keyword, KeyCode keyCode, MixedRealityInputAction action) Parameters Type Name Description String keyword The Keyword. KeyCode keyCode The KeyCode. MixedRealityInputAction action The Action to perform when Keyword or KeyCode is recognized. Properties Action The MixedRealityInputAction that is raised by either the Keyword or KeyCode. Declaration public MixedRealityInputAction Action { get; } Property Value Type Description MixedRealityInputAction KeyCode The corresponding KeyCode that also raises the same action as the Keyword. Declaration public KeyCode KeyCode { get; } Property Value Type Description KeyCode Keyword The Keyword to listen for. Declaration public string Keyword { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityInputActionRulesProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityInputActionRulesProfile.html",
    "title": "Class MixedRealityInputActionRulesProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputActionRulesProfile Inheritance Object BaseMixedRealityProfile MixedRealityInputActionRulesProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputActionRulesProfile : BaseMixedRealityProfile Properties InputActionRulesDigital All the Input Action Rules for Boolean based MixedRealityInputAction s Declaration public InputActionRuleDigital[] InputActionRulesDigital { get; } Property Value Type Description InputActionRuleDigital [] InputActionRulesDualAxis All the Input Action Rules for based MixedRealityInputAction s Declaration public InputActionRuleDualAxis[] InputActionRulesDualAxis { get; } Property Value Type Description InputActionRuleDualAxis [] InputActionRulesPoseAxis All the Input Action Rules for based MixedRealityInputAction s Declaration public InputActionRulePoseAxis[] InputActionRulesPoseAxis { get; } Property Value Type Description InputActionRulePoseAxis [] InputActionRulesQuaternionAxis All the Input Action Rules for based MixedRealityInputAction s Declaration public InputActionRuleQuaternionAxis[] InputActionRulesQuaternionAxis { get; } Property Value Type Description InputActionRuleQuaternionAxis [] InputActionRulesSingleAxis All the Input Action Rules for Single based MixedRealityInputAction s Declaration public InputActionRuleSingleAxis[] InputActionRulesSingleAxis { get; } Property Value Type Description InputActionRuleSingleAxis [] InputActionRulesVectorAxis All the Input Action Rules for based MixedRealityInputAction s Declaration public InputActionRuleVectorAxis[] InputActionRulesVectorAxis { get; } Property Value Type Description InputActionRuleVectorAxis []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.InterpolationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.InterpolationType.html",
    "title": "Enum InterpolationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InterpolationType Defines the type of interpolation to use when calculating a spline. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Lines Assembly : cs.temp.dll.dll Syntax public enum InterpolationType Fields Name Description Bezier CatmullRom Hermite"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.RayStep.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.RayStep.html",
    "title": "Struct RayStep | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RayStep Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Physics Assembly : cs.temp.dll.dll Syntax [Serializable] public struct RayStep Constructors RayStep(Vector3, Vector3) Declaration public RayStep(Vector3 origin, Vector3 terminus) Parameters Type Name Description Vector3 origin Vector3 terminus Properties Direction Declaration public Vector3 Direction { get; } Property Value Type Description Vector3 Length Declaration public float Length { get; } Property Value Type Description Single Origin Declaration public Vector3 Origin { get; } Property Value Type Description Vector3 Terminus Declaration public Vector3 Terminus { get; } Property Value Type Description Vector3 Methods Contains(Vector3) Declaration public bool Contains(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Boolean CopyRay(Ray, Single) Declaration public void CopyRay(Ray ray, float rayLength) Parameters Type Name Description Ray ray Single rayLength GetDirectionByDistance(RayStep[], Single) Returns a direction along an array of RaySteps by distance Declaration public static Vector3 GetDirectionByDistance(RayStep[] steps, float distance) Parameters Type Name Description RayStep [] steps Single distance Returns Type Description Vector3 GetPoint(Single) Declaration public Vector3 GetPoint(float distance) Parameters Type Name Description Single distance Returns Type Description Vector3 GetPointByDistance(RayStep[], Single) Returns a point along an array of RaySteps by distance Declaration public static Vector3 GetPointByDistance(RayStep[] steps, float distance) Parameters Type Name Description RayStep [] steps Single distance Returns Type Description Vector3 GetStepByDistance(RayStep[], Single) Returns a RayStep along an array of RaySteps by distance Declaration public static RayStep GetStepByDistance(RayStep[] steps, float distance) Parameters Type Name Description RayStep [] steps Single distance Returns Type Description RayStep UpdateRayStep(ref Vector3, ref Vector3) Update current raystep with new origin and terminus points. Pass by ref to avoid unnecessary struct copy into function since values will be copied anyways locally Declaration public void UpdateRayStep(ref Vector3 origin, ref Vector3 terminus) Parameters Type Name Description Vector3 origin beginning of raystep origin Vector3 terminus end of raystep Operators Implicit(RayStep to Ray) Declaration public static implicit operator Ray(RayStep r) Parameters Type Name Description RayStep r Returns Type Description Ray"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.AutoStartBehavior.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.AutoStartBehavior.html",
    "title": "Enum AutoStartBehavior | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AutoStartBehavior This enumeration identifies two different ways to handle the startup behavior for a feature. Both will warm up the component, ready for it's use (e.g. connecting backend services or registering for events. The first causes the feature to start immediately. The second allows the feature to be manually started at a later time. Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum AutoStartBehavior Fields Name Description AutoStart Automatically start the feature ManualStart Delay the start of the feature until the user requests it to begin"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.OrientationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.OrientationType.html",
    "title": "Enum OrientationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum OrientationType Orientation type enum Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum OrientationType Fields Name Description FaceCenterAxis Lay flat on the surface, facing in FaceCenterAxisReversed Lay flat on the surface, facing out FaceOrigin Rotate towards the origin FaceOriginReversed Rotate towards the origin + 180 degrees FaceParentDown Parent Relative Down FaceParentForwardReversed Zero rotation + 180 degrees FaceParentFoward Zero rotation FaceParentUp Parent Relative Up None Don't rotate at all"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Setup.MixedRealityEditorSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Setup.MixedRealityEditorSettings.html",
    "title": "Class MixedRealityEditorSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityEditorSettings Sets Force Text Serialization and visible meta files in all projects that use the Mixed Reality Toolkit. Inheritance Object MixedRealityEditorSettings Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Setup Assembly : cs.temp.dll.dll Syntax public class MixedRealityEditorSettings : IActiveBuildTargetChanged Constructors MixedRealityEditorSettings() Declaration public MixedRealityEditorSettings() Properties callbackOrder Declaration public int callbackOrder { get; } Property Value Type Description Int32 MixedRealityToolkit_AbsoluteFolderPath Declaration public static string MixedRealityToolkit_AbsoluteFolderPath { get; } Property Value Type Description String MixedRealityToolkit_RelativeFolderPath Declaration public static string MixedRealityToolkit_RelativeFolderPath { get; } Property Value Type Description String Methods OnActiveBuildTargetChanged(BuildTarget, BuildTarget) Declaration public void OnActiveBuildTargetChanged(BuildTarget previousTarget, BuildTarget newTarget) Parameters Type Name Description BuildTarget previousTarget BuildTarget newTarget"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.MovementConstraintType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.MovementConstraintType.html",
    "title": "Enum MovementConstraintType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MovementConstraintType Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum MovementConstraintType Fields Name Description FixDistanceFromHead None"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.SpatialAwarenessSystem Classes MixedRealitySpatialAwarenessEventData Data for spatial awareness events. MixedRealitySpatialAwarenessEventData<T> Data for spatial awareness events."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityGesturesProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityGesturesProfileInspector.html",
    "title": "Class MixedRealityGesturesProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityGesturesProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityGesturesProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityGesturesProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityInputActionsProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles.MixedRealityInputActionsProfileInspector.html",
    "title": "Class MixedRealityInputActionsProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputActionsProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityInputActionsProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMixedRealityToolkitLogo() BaseMixedRealityToolkitConfigurationProfileInspector.CheckProfileLock(Object, Boolean) BaseMixedRealityProfileInspector.CheckMixedRealityConfigured(Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, GUIContent, Boolean) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Boolean) BaseMixedRealityProfileInspector.CreateCopyProfileValues() Namespace : Microsoft.MixedReality.Toolkit.Core.Inspectors.Profiles Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputActionsProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.IMixedRealitySpatialAwarenessObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.IMixedRealitySpatialAwarenessObject.html",
    "title": "Interface IMixedRealitySpatialAwarenessObject | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessObject Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessObject Properties GameObject Declaration GameObject GameObject { get; set; } Property Value Type Description GameObject Id Declaration int Id { get; set; } Property Value Type Description Int32 Renderer Declaration MeshRenderer Renderer { get; set; } Property Value Type Description MeshRenderer Methods CleanObject() Declaration void CleanObject()"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.IMixedRealitySpatialAwarenessSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem.IMixedRealitySpatialAwarenessSystem.html",
    "title": "Interface IMixedRealitySpatialAwarenessSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessSystem Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessSystem : IMixedRealityEventSystem Properties SpatialAwarenessObjectParent Gets the parent object to which all spatial awareness s are to be parented. Declaration GameObject SpatialAwarenessObjectParent { get; } Property Value Type Description GameObject Methods CreateSpatialAwarenessObjectParent(String) Creates the a parent, that is a child if the Spatial Awareness System parent so that the scene hierarchy does not get overly cluttered. Declaration GameObject CreateSpatialAwarenessObjectParent(string name) Parameters Type Name Description String name Returns Type Description GameObject The to which spatial awareness objects will be parented. Remarks This method is to be called by implementations of the interface, not by application code. GenerateNewSourceId() Generates a new source identifier for an implementation. Declaration uint GenerateNewSourceId() Returns Type Description UInt32 The source identifier to be used by the implementation. Remarks This method is to be called by implementations of the interface, not by application code. GetObserver(String) Get the that is registered under the specified name. Declaration IMixedRealitySpatialAwarenessObserver GetObserver(string name) Parameters Type Name Description String name The friendly name of the observer. Returns Type Description IMixedRealitySpatialAwarenessObserver The requested observer, or null if one cannot be found. Remarks If more than one observer is registered under the specified name, the first will be returned. GetObserver<T>(String) Get the observer that is registered under the specified name matching the specified type. Declaration T GetObserver<T>(string name) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Returns Type Description T The requested observer, or null if one cannot be found. Type Parameters Name Description T The desired spatial awareness observer type (ex: ) Remarks If more than one observer is registered under the specified name, the first will be returned. GetObservers() Gets the collection of registered data providers. Declaration IReadOnlyList<IMixedRealitySpatialAwarenessObserver> GetObservers() Returns Type Description IReadOnlyList < IMixedRealitySpatialAwarenessObserver > Read only copy of the list of registered observers. GetObservers<T>() Get the collection of registered observers of the specified type. Declaration IReadOnlyList<T> GetObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Returns Type Description IReadOnlyList <T> Readonly copy of the list of registered observers that implement the specified type. Type Parameters Name Description T The desired spatial awareness observer type (ex: ) RaiseMeshAdded(IMixedRealitySpatialAwarenessObserver, Int32, SpatialAwarenessMeshObject) The spatial awareness system will call the method to indicate a mesh has been added. Declaration void RaiseMeshAdded(IMixedRealitySpatialAwarenessObserver observer, int meshId, SpatialAwarenessMeshObject meshObject) Parameters Type Name Description IMixedRealitySpatialAwarenessObserver observer The observer raising the event. Int32 meshId Value identifying the mesh. SpatialAwarenessMeshObject meshObject The mesh . Remarks This method is to be called by implementations of the interface, not by application code. RaiseMeshRemoved(IMixedRealitySpatialAwarenessObserver, Int32) The spatial awareness system will call the method to indicate an existing mesh has been removed. Declaration void RaiseMeshRemoved(IMixedRealitySpatialAwarenessObserver observer, int meshId) Parameters Type Name Description IMixedRealitySpatialAwarenessObserver observer The observer raising the event. Int32 meshId Value identifying the mesh. Remarks This method is to be called by implementations of the interface, not by application code. RaiseMeshUpdated(IMixedRealitySpatialAwarenessObserver, Int32, SpatialAwarenessMeshObject) The spatial awareness system will call the method to indicate an existing mesh has been updated. Declaration void RaiseMeshUpdated(IMixedRealitySpatialAwarenessObserver observer, int meshId, SpatialAwarenessMeshObject meshObject) Parameters Type Name Description IMixedRealitySpatialAwarenessObserver observer The observer raising the event. Int32 meshId Value identifying the mesh. SpatialAwarenessMeshObject meshObject The mesh . Remarks This method is to be called by implementations of the interface, not by application code. ResumeObserver<T>(String) Starts / restarts the spatial observer registered under the specified name matching the specified type. Declaration void ResumeObserver<T>(string name) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Type Parameters Name Description T The desired spatial awareness observer type (ex: ) ResumeObservers() Starts / restarts all spatial observers of the specified type. Declaration void ResumeObservers() ResumeObservers<T>() Starts / restarts all spatial observers of the specified type. Declaration void ResumeObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Type Parameters Name Description T The desired spatial awareness observer type (ex: ) SuspendObserver<T>(String) Stops / pauses the spatial observer registered under the specified name matching the specified type. Declaration void SuspendObserver<T>(string name) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Type Parameters Name Description T The desired spatial awareness observer type (ex: ) SuspendObservers() Stops / pauses all spatial observers. Declaration void SuspendObservers() SuspendObservers<T>() Stops / pauses all spatial observers of the specified type. Declaration void SuspendObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Type Parameters Name Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Providers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Providers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Providers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Providers Classes BaseController Base Controller class to inherit from for all controllers. BaseDeviceManager Base Device manager to inherit from. BaseGenericInputSource Base class for input sources that don't inherit from MonoBehaviour. This base class does not support adding or removing pointers, because many will never pass pointers in their constructors and will fall back to either the Gaze or Mouse Pointer. BaseSpatialObserver GenericPointer Base Class for pointers that don't inherit from MonoBehaviour."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Services.BaseDataProvider.html",
    "title": "Class BaseDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseDataProvider The base data provider implements and provides default properties for all data providers. Inheritance Object BaseService BaseServiceWithConstructor BaseExtensionService BaseDataProvider Implements IMixedRealityDataProvider IMixedRealityExtensionService IMixedRealityService IDisposable Inherited Members BaseExtensionService.ConfigurationProfile BaseServiceWithConstructor.Name BaseServiceWithConstructor.Priority BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Services Assembly : cs.temp.dll.dll Syntax public abstract class BaseDataProvider : BaseExtensionService, IMixedRealityDataProvider, IMixedRealityExtensionService, IMixedRealityService, IDisposable Remarks Empty, but reserved for future use, in case additional properties or methods are assigned. Constructors BaseDataProvider(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public BaseDataProvider(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name UInt32 priority BaseMixedRealityProfile profile Implements IMixedRealityDataProvider IMixedRealityExtensionService IMixedRealityService System.IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.DebugUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.DebugUtilities.html",
    "title": "Class DebugUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class DebugUtilities Inheritance Object DebugUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class DebugUtilities Methods DebugAssert(Boolean) Asserts a condition. Declaration public static void DebugAssert(bool condition) Parameters Type Name Description Boolean condition The condition that is expected to be true. DebugAssert(Boolean, String) Asserts a condition. Declaration public static void DebugAssert(bool condition, string message) Parameters Type Name Description Boolean condition The condition that is expected to be true. String message The message to display if the condition evaluates to false. DebugLog(String) Logs a message. Declaration public static void DebugLog(string message) Parameters Type Name Description String message DebugLogError(String) Logs an error message. Declaration public static void DebugLogError(string message) Parameters Type Name Description String message DebugLogWarning(String) Logs a warning message. Declaration public static void DebugLogWarning(string message) Parameters Type Name Description String message"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.EdgeUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.EdgeUtilities.html",
    "title": "Class EdgeUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class EdgeUtilities The EdgeUtilities class provides functionality for working with objects. Inheritance Object EdgeUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class EdgeUtilities Fields InvalidPoint A value representing an invalid point. Declaration public static readonly Vector2 InvalidPoint Field Value Type Description Vector2 Methods GetIntersectionPoint(Edge, Edge) Returns the point at which two values intersect. Declaration public static Vector2 GetIntersectionPoint(Edge edgeA, Edge edgeB) Parameters Type Name Description Edge edgeA The first edge Edge edgeB The second edge Returns Type Description Vector2 A Vector2 representing the point at which the two edges intersect, InscribedRectangleDescription.InvalidPoint otherwise. IsInsideBoundary(Edge[], Vector2) Determines if the specified point is within the provided geometry. Declaration public static bool IsInsideBoundary(Edge[] geometryEdges, Vector2 point) Parameters Type Name Description Edge [] geometryEdges The geometry for which we are checking the point. Vector2 point The point being checked. Returns Type Description Boolean True if the point falls within the geometry, false otherwise. IsValidPoint(Vector2) Checks to see if a point is valid. Declaration public static bool IsValidPoint(Vector2 point) Parameters Type Name Description Vector2 point The point to check. Returns Type Description Boolean True if the point is valid, false otherwise. Remarks A point is considered invalid if any one of it's coordinate values are infinite or not a number."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.MixedRealityRaycaster.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.MixedRealityRaycaster.html",
    "title": "Class MixedRealityRaycaster | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityRaycaster Inheritance Object MixedRealityRaycaster Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public static class MixedRealityRaycaster Fields DebugEnabled Declaration public static bool DebugEnabled Field Value Type Description Boolean Methods RaycastBoxPhysicsStep(RayStep, Vector3, Vector3, Matrix4x4, Single, LayerMask[], Int32, Boolean, out Vector3[], out Vector3[], out Boolean[]) Box raycasts each physics . Declaration public static bool RaycastBoxPhysicsStep(RayStep step, Vector3 extents, Vector3 targetPosition, Matrix4x4 matrix, float maxDistance, LayerMask[] prioritizedLayerMasks, int raysPerEdge, bool isOrthographic, out Vector3[] points, out Vector3[] normals, out bool[] hits) Parameters Type Name Description RayStep step Vector3 extents Vector3 targetPosition Matrix4x4 matrix Single maxDistance LayerMask [] prioritizedLayerMasks Int32 raysPerEdge Boolean isOrthographic Vector3 [] points Vector3 [] normals Boolean [] hits Returns Type Description Boolean Whether or not the raycast hit something. RaycastSimplePhysicsStep(RayStep, LayerMask[], out RaycastHit) Simple raycasts each physics . Declaration public static bool RaycastSimplePhysicsStep(RayStep step, LayerMask[] prioritizedLayerMasks, out RaycastHit physicsHit) Parameters Type Name Description RayStep step LayerMask [] prioritizedLayerMasks RaycastHit physicsHit Returns Type Description Boolean Whether or not the raycast hit something. RaycastSimplePhysicsStep(RayStep, Single, LayerMask[], out RaycastHit) Simple raycasts each physics within a specified maximum distance. Declaration public static bool RaycastSimplePhysicsStep(RayStep step, float maxDistance, LayerMask[] prioritizedLayerMasks, out RaycastHit physicsHit) Parameters Type Name Description RayStep step Single maxDistance LayerMask [] prioritizedLayerMasks RaycastHit physicsHit Returns Type Description Boolean Whether or not the raycast hit something. RaycastSpherePhysicsStep(RayStep, Single, LayerMask[], out RaycastHit) Sphere raycasts each physics . Declaration public static bool RaycastSpherePhysicsStep(RayStep step, float radius, LayerMask[] prioritizedLayerMasks, out RaycastHit physicsHit) Parameters Type Name Description RayStep step Single radius LayerMask [] prioritizedLayerMasks RaycastHit physicsHit Returns Type Description Boolean Whether or not the raycast hit something. RaycastSpherePhysicsStep(RayStep, Single, Single, LayerMask[], out RaycastHit) Sphere raycasts each physics within a specified maximum distance. Declaration public static bool RaycastSpherePhysicsStep(RayStep step, float radius, float maxDistance, LayerMask[] prioritizedLayerMasks, out RaycastHit physicsHit) Parameters Type Name Description RayStep step Single radius Single maxDistance LayerMask [] prioritizedLayerMasks RaycastHit physicsHit Returns Type Description Boolean Whether or not the raycast hit something. TryGetPrioritizedPhysicsHit(RaycastHit[], LayerMask[], out RaycastHit) Tries to get the prioritized physics raycast hit based on the prioritized layer masks. Declaration public static bool TryGetPrioritizedPhysicsHit(RaycastHit[] hits, LayerMask[] priorityLayers, out RaycastHit raycastHit) Parameters Type Name Description RaycastHit [] hits LayerMask [] priorityLayers RaycastHit raycastHit Returns Type Description Boolean The minimum distance hit within the first layer that has hits. Remarks Sorts all hit objects first by layerMask, then by distance."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.RaycastResultComparer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Physics.RaycastResultComparer.html",
    "title": "Class RaycastResultComparer | Mixed Reality Toolkit Documentation",
    "keywords": "Class RaycastResultComparer Compares the Raycast Results from Unity's Graphic & Physics Raycasters. Inheritance Object RaycastResultComparer Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Physics Assembly : cs.temp.dll.dll Syntax public class RaycastResultComparer : IComparer<ComparableRaycastResult> Methods Compare(ComparableRaycastResult, ComparableRaycastResult) Declaration public int Compare(ComparableRaycastResult left, ComparableRaycastResult right) Parameters Type Name Description ComparableRaycastResult left ComparableRaycastResult right Returns Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.NetworkProfileInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.NetworkProfileInfo.html",
    "title": "Class NetworkProfileInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class NetworkProfileInfo Inheritance Object NetworkProfileInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class NetworkProfileInfo Fields GroupPolicyProfile Declaration public bool GroupPolicyProfile Field Value Type Description Boolean Name Declaration public string Name Field Value Type Description String PerUserProfile Declaration public bool PerUserProfile Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.PowerStateInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.PowerStateInfo.html",
    "title": "Class PowerStateInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class PowerStateInfo Inheritance Object PowerStateInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class PowerStateInfo Fields LowPowerState Declaration public bool LowPowerState Field Value Type Description Boolean LowPowerStateAvailable Declaration public bool LowPowerStateAvailable Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.ProcessInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.ProcessInfo.html",
    "title": "Class ProcessInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProcessInfo Inheritance Object ProcessInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class ProcessInfo Fields CPUUsage Declaration public float CPUUsage Field Value Type Description Single ImageName Declaration public string ImageName Field Value Type Description String PageFileUsage Declaration public float PageFileUsage Field Value Type Description Single PrivateWorkingSet Declaration public int PrivateWorkingSet Field Value Type Description Int32 ProcessId Declaration public int ProcessId Field Value Type Description Int32 SessionId Declaration public int SessionId Field Value Type Description Int32 UserName Declaration public string UserName Field Value Type Description String VirtualSize Declaration public int VirtualSize Field Value Type Description Int32 WorkingSetSize Declaration public int WorkingSetSize Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityPointerProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityPointerProfile.html",
    "title": "Class MixedRealityPointerProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPointerProfile Configuration profile settings for setting up controller pointers. Inheritance Object BaseMixedRealityProfile MixedRealityPointerProfile Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealityPointerProfile : BaseMixedRealityProfile Properties DebugDrawPointingRayColors The colors to use when debugging pointer rays. Declaration public Color[] DebugDrawPointingRayColors { get; } Property Value Type Description Color [] DebugDrawPointingRays Toggle to enable or disable debug pointing rays. Declaration public bool DebugDrawPointingRays { get; } Property Value Type Description Boolean GazeCursorPrefab The gaze cursor prefab to use on the Gaze pointer. Declaration public GameObject GazeCursorPrefab { get; } Property Value Type Description GameObject GazeProviderType The concrete type of to use. Declaration public SystemType GazeProviderType { get; } Property Value Type Description SystemType PointerOptions The Pointer options for this profile. Declaration public PointerOption[] PointerOptions { get; } Property Value Type Description PointerOption [] PointingExtent Maximum distance at which all pointers can collide with a GameObject, unless it has an override extent. Declaration public float PointingExtent { get; } Property Value Type Description Single PointingRaycastLayerMasks The LayerMasks, in prioritized order, that are used to determine the GazeTarget when raycasting. Declaration public LayerMask[] PointingRaycastLayerMasks { get; } Property Value Type Description LayerMask []"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.PointDistributionMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Lines.PointDistributionMode.html",
    "title": "Enum PointDistributionMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PointDistributionMode Defines how to get an interpolated point along a line Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Lines Assembly : cs.temp.dll.dll Syntax public enum PointDistributionMode Fields Name Description Auto Adjust placement automatically (default) DistanceCurveValue Place based on curve DistanceSingleValue Place based on distance None Don't adjust placement"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.TeleportSurfaceResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Physics.TeleportSurfaceResult.html",
    "title": "Enum TeleportSurfaceResult | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TeleportSurfaceResult Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Physics Assembly : cs.temp.dll.dll Syntax [Serializable] public enum TeleportSurfaceResult Fields Name Description HotSpot Invalid None Valid"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.CollationOrder.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.CollationOrder.html",
    "title": "Enum CollationOrder | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CollationOrder Collation order type used for sorting Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax public enum CollationOrder Fields Name Description Alphabetical Sort by transform name AlphabeticalReversed Sort by transform name, reversed ChildOrder Sort by child order of parent ChildOrderReversed Sort by child order of parent, reversed None Don't sort, just display in order received"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.QuaternionSmoothed.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities.QuaternionSmoothed.html",
    "title": "Struct QuaternionSmoothed | Mixed Reality Toolkit Documentation",
    "keywords": "Struct QuaternionSmoothed Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public struct QuaternionSmoothed Constructors QuaternionSmoothed(Quaternion, Single) Declaration public QuaternionSmoothed(Quaternion value, float smoothingTime) Parameters Type Name Description Quaternion value Single smoothingTime Properties Current Declaration public Quaternion Current { get; set; } Property Value Type Description Quaternion Goal Declaration public Quaternion Goal { get; set; } Property Value Type Description Quaternion SmoothTime Declaration public float SmoothTime { get; set; } Property Value Type Description Single Methods SetGoal(Quaternion) Declaration public void SetGoal(Quaternion newGoal) Parameters Type Name Description Quaternion newGoal Update(Single) Declaration public void Update(float deltaTime) Parameters Type Name Description Single deltaTime"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Boundary.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Boundary.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.Boundary | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.EventDatum.Boundary Classes BoundaryEventData The data describing the boundary system event."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Diagnostics.DiagnosticsEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.EventDatum.Diagnostics.DiagnosticsEventData.html",
    "title": "Class DiagnosticsEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class DiagnosticsEventData Inheritance Object GenericBaseEventData DiagnosticsEventData Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Core.EventDatum.Diagnostics Assembly : cs.temp.dll.dll Syntax public class DiagnosticsEventData : GenericBaseEventData Constructors DiagnosticsEventData(EventSystem) Constructor Declaration public DiagnosticsEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Methods Initialize(IMixedRealityDiagnosticsSystem) Constructor Declaration public void Initialize(IMixedRealityDiagnosticsSystem diagnosticsSystem) Parameters Type Name Description IMixedRealityDiagnosticsSystem diagnosticsSystem The instance of the Diagnostic System that raised the event."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.PlatformUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.PlatformUtility.html",
    "title": "Class PlatformUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class PlatformUtility Inheritance Object PlatformUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities Assembly : cs.temp.dll.dll Syntax public static class PlatformUtility Methods IsPlatformSupported(RuntimePlatform, SupportedPlatforms) Declaration public static bool IsPlatformSupported(this RuntimePlatform runtimePlatform, SupportedPlatforms platforms) Parameters Type Name Description RuntimePlatform runtimePlatform SupportedPlatforms platforms Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.WirelessNetworkInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures.WirelessNetworkInfo.html",
    "title": "Class WirelessNetworkInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class WirelessNetworkInfo Inheritance Object WirelessNetworkInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.WindowsDevicePortal.DataStructures Assembly : cs.temp.dll.dll Syntax [Serializable] public class WirelessNetworkInfo Fields AlreadyConnected Declaration public bool AlreadyConnected Field Value Type Description Boolean AuthenticationAlgorithm Declaration public string AuthenticationAlgorithm Field Value Type Description String BSSID Declaration public int[] BSSID Field Value Type Description Int32 [] Channel Declaration public int Channel Field Value Type Description Int32 CipherAlgorithm Declaration public string CipherAlgorithm Field Value Type Description String Connectable (0 | 1) Declaration public int Connectable Field Value Type Description Int32 InfrastructureType Declaration public string InfrastructureType Field Value Type Description String PhysicalTypes Declaration public string[] PhysicalTypes Field Value Type Description String [] ProfileAvailable Declaration public bool ProfileAvailable Field Value Type Description Boolean ProfileName Declaration public string ProfileName Field Value Type Description String SecurityEnabled (0 | 1) Declaration public int SecurityEnabled Field Value Type Description Int32 SignalQuality Declaration public int SignalQuality Field Value Type Description Int32 SSID Declaration public string SSID Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityInputAction.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem.MixedRealityInputAction.html",
    "title": "Struct MixedRealityInputAction | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityInputAction An Input Action for mapping an action to an Input Sources Button, Joystick, Sensor, etc. Implements IEqualityComparer Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Core.Definitions.InputSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MixedRealityInputAction : IEqualityComparer Constructors MixedRealityInputAction(UInt32, String, AxisType) Constructor. Declaration public MixedRealityInputAction(uint id, string description, AxisType axisConstraint = null) Parameters Type Name Description UInt32 id String description AxisType axisConstraint Properties AxisConstraint The Axis constraint for the Input Action Declaration public AxisType AxisConstraint { get; } Property Value Type Description AxisType Description A short description of the Input Action. Declaration public string Description { get; } Property Value Type Description String Id The Unique Id of this Input Action. Declaration public uint Id { get; } Property Value Type Description UInt32 None Declaration public static MixedRealityInputAction None { get; } Property Value Type Description MixedRealityInputAction Methods Equals(MixedRealityInputAction) Declaration public bool Equals(MixedRealityInputAction other) Parameters Type Name Description MixedRealityInputAction other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators Equality(MixedRealityInputAction, MixedRealityInputAction) Declaration public static bool operator ==(MixedRealityInputAction left, MixedRealityInputAction right) Parameters Type Name Description MixedRealityInputAction left MixedRealityInputAction right Returns Type Description Boolean Inequality(MixedRealityInputAction, MixedRealityInputAction) Declaration public static bool operator !=(MixedRealityInputAction left, MixedRealityInputAction right) Parameters Type Name Description MixedRealityInputAction left MixedRealityInputAction right Returns Type Description Boolean Implements IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Core.Interfaces.Devices Interfaces IMixedRealityController Mixed Reality Toolkit controller definition, used to manage a specific controller type IMixedRealityControllerPoseSynchronizer Basic interface for synchronizing to a controller pose. IMixedRealityControllerVisualizer IMixedRealityDeviceManager Mixed Reality Toolkit device definition, used to instantiate and manage a specific device / SDK IMixedRealityDictationSystem Mixed Reality Toolkit controller definition, used to manage a specific controller type IMixedRealitySpeechSystem Mixed Reality Toolkit controller definition, used to manage a specific controller type"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics.IMixedRealityDiagnosticsHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics.IMixedRealityDiagnosticsHandler.html",
    "title": "Interface IMixedRealityDiagnosticsHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDiagnosticsHandler Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.Diagnostics Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDiagnosticsHandler : IEventSystemHandler Methods OnDiagnosticSettingsChanged(DiagnosticsEventData) Declaration void OnDiagnosticSettingsChanged(DiagnosticsEventData eventData) Parameters Type Name Description DiagnosticsEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.ICursorModifier.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem.ICursorModifier.html",
    "title": "Interface ICursorModifier | Mixed Reality Toolkit Documentation",
    "keywords": "Interface ICursorModifier Interface for cursor modifiers that can modify a 's properties. Namespace : Microsoft.MixedReality.Toolkit.Core.Interfaces.InputSystem Assembly : cs.temp.dll.dll Syntax public interface ICursorModifier : IMixedRealityFocusChangedHandler Properties CursorNormalOffset Direction of the IMixedRealityCursor offset. Declaration Vector3 CursorNormalOffset { get; set; } Property Value Type Description Vector3 CursorParameters IMixedRealityCursor animation parameters to set when this is focused. Leave empty for none. Declaration AnimatorParameter[] CursorParameters { get; } Property Value Type Description AnimatorParameter [] CursorPositionOffset How much a IMixedRealityCursor 's position should be offset from the surface of the when overlapping. Declaration Vector3 CursorPositionOffset { get; set; } Property Value Type Description Vector3 CursorScaleOffset Scale of the IMixedRealityCursor when looking at this . Declaration Vector3 CursorScaleOffset { get; set; } Property Value Type Description Vector3 HideCursorOnFocus Should the IMixedRealityCursor be hidden when this is focused? Declaration bool HideCursorOnFocus { get; set; } Property Value Type Description Boolean HostTransform Transform for which this IMixedRealityCursor modifies applies its various properties. Declaration Transform HostTransform { get; set; } Property Value Type Description Transform SnapCursorPosition Should the IMixedRealityCursor snap to the 's position? Declaration bool SnapCursorPosition { get; set; } Property Value Type Description Boolean UseGazeBasedNormal If true, the normal from the pointing vector will be used to orient the IMixedRealityCursor instead of the targeted 's normal at point of contact. Declaration bool UseGazeBasedNormal { get; set; } Property Value Type Description Boolean Methods GetCursorVisibility() Indicates whether the IMixedRealityCursor should be visible or not. Declaration bool GetCursorVisibility() Returns Type Description Boolean True if IMixedRealityCursor should be visible, false if not. GetModifiedPosition(IMixedRealityCursor) Returns the IMixedRealityCursor position after considering this modifier. Declaration Vector3 GetModifiedPosition(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor IMixedRealityCursor that is being modified. Returns Type Description Vector3 New position for the IMixedRealityCursor GetModifiedRotation(IMixedRealityCursor) Returns the IMixedRealityCursor rotation after considering this modifier. Declaration Quaternion GetModifiedRotation(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor IMixedRealityCursor that is being modified. Returns Type Description Quaternion New rotation for the IMixedRealityCursor GetModifiedScale(IMixedRealityCursor) Returns the IMixedRealityCursor 's local scale after considering this modifier. Declaration Vector3 GetModifiedScale(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor IMixedRealityCursor that is being modified. Returns Type Description Vector3 New local scale for the IMixedRealityCursor GetModifiedTransform(IMixedRealityCursor, out Vector3, out Quaternion, out Vector3) Returns the modified for the IMixedRealityCursor after considering this modifier. Declaration void GetModifiedTransform(IMixedRealityCursor cursor, out Vector3 position, out Quaternion rotation, out Vector3 scale) Parameters Type Name Description IMixedRealityCursor cursor Cursor that is being modified. Vector3 position Modified position. Quaternion rotation Modified rotation. Vector3 scale Modified scale."
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb.USBDeviceListener.OnUsbDevicesChanged.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb.USBDeviceListener.OnUsbDevicesChanged.html",
    "title": "Delegate USBDeviceListener.OnUsbDevicesChanged | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate USBDeviceListener.OnUsbDevicesChanged Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb Assembly : cs.temp.dll.dll Syntax public delegate void OnUsbDevicesChanged(UsbDevice[] usbDevices); Parameters Type Name Description UsbDevice [] usbDevices"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb.USBDeviceListener.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb.USBDeviceListener.html",
    "title": "Class USBDeviceListener | Mixed Reality Toolkit Documentation",
    "keywords": "Class USBDeviceListener Inheritance Object USBDeviceListener Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Editor.Usb Assembly : cs.temp.dll.dll Syntax public class USBDeviceListener Fields USBDevices Declaration public static USBDeviceInfo[] USBDevices Field Value Type Description USBDeviceInfo [] Events UsbDevicesChanged Declaration public static event USBDeviceListener.OnUsbDevicesChanged UsbDevicesChanged Event Type Type Description USBDeviceListener.OnUsbDevicesChanged"
  },
  "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.ParticleSystemLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers.ParticleSystemLineRenderer.html",
    "title": "Class ParticleSystemLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParticleSystemLineRenderer attaches a set of particles to the line Inheritance Object BaseMixedRealityLineRenderer ParticleSystemLineRenderer Inherited Members BaseMixedRealityLineRenderer.lineDataSource BaseMixedRealityLineRenderer.LineDataSource BaseMixedRealityLineRenderer.LineColor BaseMixedRealityLineRenderer.LineWidth BaseMixedRealityLineRenderer.WidthMultiplier BaseMixedRealityLineRenderer.ColorOffset BaseMixedRealityLineRenderer.WidthOffset BaseMixedRealityLineRenderer.StepMode BaseMixedRealityLineRenderer.LineStepCount BaseMixedRealityLineRenderer.GetColor(Single) BaseMixedRealityLineRenderer.GetWidth(Single) Namespace : Microsoft.MixedReality.Toolkit.Core.Utilities.Lines.Renderers Assembly : cs.temp.dll.dll Syntax public class ParticleSystemLineRenderer : BaseMixedRealityLineRenderer Properties DecayGradient Declaration public Gradient DecayGradient { get; set; } Property Value Type Description Gradient LifetimeAfterDisabled Declaration public float LifetimeAfterDisabled { get; set; } Property Value Type Description Single LineMaterial Declaration public Material LineMaterial { get; set; } Property Value Type Description Material MainParticleRenderer Declaration public ParticleSystemRenderer MainParticleRenderer { get; set; } Property Value Type Description ParticleSystemRenderer MaxParticles Declaration public int MaxParticles { get; set; } Property Value Type Description Int32 NoiseFrequency Declaration public float NoiseFrequency { get; set; } Property Value Type Description Single NoiseOcatives Declaration public int NoiseOcatives { get; set; } Property Value Type Description Int32 NoiseSpeed Declaration public float NoiseSpeed { get; set; } Property Value Type Description Single NoiseStrength Declaration public Vector3 NoiseStrength { get; set; } Property Value Type Description Vector3 ParticleNoiseOnDisabled Declaration public bool ParticleNoiseOnDisabled { get; set; } Property Value Type Description Boolean"
  }
}